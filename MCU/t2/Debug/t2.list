
t2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  080073c0  080073c0  000173c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077fc  080077fc  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  080077fc  080077fc  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077fc  080077fc  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077fc  080077fc  000177fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007800  08007800  00017800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08007804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200000f0  080078f4  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  080078f4  00020208  2**0
                  ALLOC
 11 .ARM.attributes 0000002d  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a77d  00000000  00000000  0002011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d7  00000000  00000000  0002a89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002da80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019afc  00000000  00000000  0002e430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7d5  00000000  00000000  00047f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c300  00000000  00000000  00056701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2a01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002350  00000000  00000000  000e2a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f0 	.word	0x200000f0
 8000128:	00000000 	.word	0x00000000
 800012c:	080073a4 	.word	0x080073a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000f4 	.word	0x200000f4
 8000148:	080073a4 	.word	0x080073a4

0800014c <OLED_WR_Byte>:
#else
//向SSD1106写入一个字节。
//dat:要写入的数据/命令
//cmd:数据/命令标志 0,表示命令;1,表示数据;
void OLED_WR_Byte(unsigned char dat,unsigned char cmd)
{	
 800014c:	b500      	push	{lr}
 800014e:	b085      	sub	sp, #20
 8000150:	4603      	mov	r3, r0
 8000152:	460a      	mov	r2, r1
 8000154:	f88d 3007 	strb.w	r3, [sp, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	f88d 3006 	strb.w	r3, [sp, #6]
	unsigned char i;			  
	if(cmd)
 800015e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d006      	beq.n	8000174 <OLED_WR_Byte+0x28>
	  OLED_DC_Set();
 8000166:	2201      	movs	r2, #1
 8000168:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800016c:	4827      	ldr	r0, [pc, #156]	; (800020c <OLED_WR_Byte+0xc0>)
 800016e:	f005 fb7b 	bl	8005868 <HAL_GPIO_WritePin>
 8000172:	e005      	b.n	8000180 <OLED_WR_Byte+0x34>
	else 
	  OLED_DC_Clr();		  
 8000174:	2200      	movs	r2, #0
 8000176:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800017a:	4824      	ldr	r0, [pc, #144]	; (800020c <OLED_WR_Byte+0xc0>)
 800017c:	f005 fb74 	bl	8005868 <HAL_GPIO_WritePin>
	OLED_CS_Clr();
 8000180:	2200      	movs	r2, #0
 8000182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000186:	4821      	ldr	r0, [pc, #132]	; (800020c <OLED_WR_Byte+0xc0>)
 8000188:	f005 fb6e 	bl	8005868 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800018c:	2300      	movs	r3, #0
 800018e:	f88d 300f 	strb.w	r3, [sp, #15]
 8000192:	e026      	b.n	80001e2 <OLED_WR_Byte+0x96>
	{			  
		OLED_SCLK_Clr();
 8000194:	2200      	movs	r2, #0
 8000196:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800019a:	481c      	ldr	r0, [pc, #112]	; (800020c <OLED_WR_Byte+0xc0>)
 800019c:	f005 fb64 	bl	8005868 <HAL_GPIO_WritePin>
		if(dat&0x80)
 80001a0:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	da06      	bge.n	80001b6 <OLED_WR_Byte+0x6a>
		   OLED_SDIN_Set();
 80001a8:	2201      	movs	r2, #1
 80001aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ae:	4817      	ldr	r0, [pc, #92]	; (800020c <OLED_WR_Byte+0xc0>)
 80001b0:	f005 fb5a 	bl	8005868 <HAL_GPIO_WritePin>
 80001b4:	e005      	b.n	80001c2 <OLED_WR_Byte+0x76>
		else 
		   OLED_SDIN_Clr();
 80001b6:	2200      	movs	r2, #0
 80001b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001bc:	4813      	ldr	r0, [pc, #76]	; (800020c <OLED_WR_Byte+0xc0>)
 80001be:	f005 fb53 	bl	8005868 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80001c2:	2201      	movs	r2, #1
 80001c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c8:	4810      	ldr	r0, [pc, #64]	; (800020c <OLED_WR_Byte+0xc0>)
 80001ca:	f005 fb4d 	bl	8005868 <HAL_GPIO_WritePin>
		dat<<=1;   
 80001ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80001d2:	005b      	lsls	r3, r3, #1
 80001d4:	f88d 3007 	strb.w	r3, [sp, #7]
	for(i=0;i<8;i++)
 80001d8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80001dc:	3301      	adds	r3, #1
 80001de:	f88d 300f 	strb.w	r3, [sp, #15]
 80001e2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80001e6:	2b07      	cmp	r3, #7
 80001e8:	d9d4      	bls.n	8000194 <OLED_WR_Byte+0x48>
	}				 		  
	OLED_CS_Set();
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001f0:	4806      	ldr	r0, [pc, #24]	; (800020c <OLED_WR_Byte+0xc0>)
 80001f2:	f005 fb39 	bl	8005868 <HAL_GPIO_WritePin>
	OLED_DC_Set();   	  
 80001f6:	2201      	movs	r2, #1
 80001f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <OLED_WR_Byte+0xc0>)
 80001fe:	f005 fb33 	bl	8005868 <HAL_GPIO_WritePin>
} 
 8000202:	bf00      	nop
 8000204:	b005      	add	sp, #20
 8000206:	f85d fb04 	ldr.w	pc, [sp], #4
 800020a:	bf00      	nop
 800020c:	40010c00 	.word	0x40010c00

08000210 <OLED_Set_Pos>:
#endif
	void OLED_Set_Pos(unsigned char x, unsigned char y) 
{ 
 8000210:	b500      	push	{lr}
 8000212:	b083      	sub	sp, #12
 8000214:	4603      	mov	r3, r0
 8000216:	460a      	mov	r2, r1
 8000218:	f88d 3007 	strb.w	r3, [sp, #7]
 800021c:	4613      	mov	r3, r2
 800021e:	f88d 3006 	strb.w	r3, [sp, #6]
	OLED_WR_Byte(0xb0+y,OLED_CMD);
 8000222:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000226:	3b50      	subs	r3, #80	; 0x50
 8000228:	b2db      	uxtb	r3, r3
 800022a:	2100      	movs	r1, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ff8d 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
 8000232:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000236:	091b      	lsrs	r3, r3, #4
 8000238:	b2db      	uxtb	r3, r3
 800023a:	f043 0310 	orr.w	r3, r3, #16
 800023e:	b2db      	uxtb	r3, r3
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f7ff ff82 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte((x&0x0f)|0x01,OLED_CMD); 
 8000248:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800024c:	f003 030e 	and.w	r3, r3, #14
 8000250:	b25b      	sxtb	r3, r3
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	b25b      	sxtb	r3, r3
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2100      	movs	r1, #0
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ff75 	bl	800014c <OLED_WR_Byte>
}   	  
 8000262:	bf00      	nop
 8000264:	b003      	add	sp, #12
 8000266:	f85d fb04 	ldr.w	pc, [sp], #4

0800026a <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}		   			 
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  
void OLED_Clear(void)  
{  
 800026a:	b500      	push	{lr}
 800026c:	b083      	sub	sp, #12
	unsigned char i,n;		    
	for(i=0;i<8;i++)  
 800026e:	2300      	movs	r3, #0
 8000270:	f88d 3007 	strb.w	r3, [sp, #7]
 8000274:	e025      	b.n	80002c2 <OLED_Clear+0x58>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8000276:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800027a:	3b50      	subs	r3, #80	; 0x50
 800027c:	b2db      	uxtb	r3, r3
 800027e:	2100      	movs	r1, #0
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ff63 	bl	800014c <OLED_WR_Byte>
		OLED_WR_Byte (0x02,OLED_CMD);      //设置显示位置―列低地址
 8000286:	2100      	movs	r1, #0
 8000288:	2002      	movs	r0, #2
 800028a:	f7ff ff5f 	bl	800014c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 800028e:	2100      	movs	r1, #0
 8000290:	2010      	movs	r0, #16
 8000292:	f7ff ff5b 	bl	800014c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 8000296:	2300      	movs	r3, #0
 8000298:	f88d 3006 	strb.w	r3, [sp, #6]
 800029c:	e008      	b.n	80002b0 <OLED_Clear+0x46>
 800029e:	2101      	movs	r1, #1
 80002a0:	2000      	movs	r0, #0
 80002a2:	f7ff ff53 	bl	800014c <OLED_WR_Byte>
 80002a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80002aa:	3301      	adds	r3, #1
 80002ac:	f88d 3006 	strb.w	r3, [sp, #6]
 80002b0:	f99d 3006 	ldrsb.w	r3, [sp, #6]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	daf2      	bge.n	800029e <OLED_Clear+0x34>
	for(i=0;i<8;i++)  
 80002b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80002bc:	3301      	adds	r3, #1
 80002be:	f88d 3007 	strb.w	r3, [sp, #7]
 80002c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80002c6:	2b07      	cmp	r3, #7
 80002c8:	d9d5      	bls.n	8000276 <OLED_Clear+0xc>
	} //更新显示
}
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	b003      	add	sp, #12
 80002d0:	f85d fb04 	ldr.w	pc, [sp], #4

080002d4 <OLED_Init>:
} 


//初始化SH1106					    
void OLED_Init(void)
{
 80002d4:	b500      	push	{lr}
 80002d6:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80002d8:	4b6c      	ldr	r3, [pc, #432]	; (800048c <OLED_Init+0x1b8>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a6b      	ldr	r2, [pc, #428]	; (800048c <OLED_Init+0x1b8>)
 80002de:	f043 0308 	orr.w	r3, r3, #8
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b69      	ldr	r3, [pc, #420]	; (800048c <OLED_Init+0x1b8>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0308 	and.w	r3, r3, #8
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	9b01      	ldr	r3, [sp, #4]

	//CS
	GPIO_InitStruct.Pin = OLED_CS_GPIO_PIN;
 80002f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002f4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f6:	2301      	movs	r3, #1
 80002f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002fa:	2301      	movs	r3, #1
 80002fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002fe:	2303      	movs	r3, #3
 8000300:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(OLED_CS_GPIO, &GPIO_InitStruct);
 8000302:	ab02      	add	r3, sp, #8
 8000304:	4619      	mov	r1, r3
 8000306:	4862      	ldr	r0, [pc, #392]	; (8000490 <OLED_Init+0x1bc>)
 8000308:	f005 f92e 	bl	8005568 <HAL_GPIO_Init>

	//DC
	GPIO_InitStruct.Pin = OLED_DC_GPIO_PIN;
 800030c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000310:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000312:	2301      	movs	r3, #1
 8000314:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000316:	2301      	movs	r3, #1
 8000318:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800031a:	2303      	movs	r3, #3
 800031c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(OLED_DC_GPIO, &GPIO_InitStruct);
 800031e:	ab02      	add	r3, sp, #8
 8000320:	4619      	mov	r1, r3
 8000322:	485b      	ldr	r0, [pc, #364]	; (8000490 <OLED_Init+0x1bc>)
 8000324:	f005 f920 	bl	8005568 <HAL_GPIO_Init>

	//SCLK
	GPIO_InitStruct.Pin = OLED_SCLK_GPIO_PIN;
 8000328:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800032c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000332:	2301      	movs	r3, #1
 8000334:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000336:	2303      	movs	r3, #3
 8000338:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(OLED_SCLK_GPIO, &GPIO_InitStruct);
 800033a:	ab02      	add	r3, sp, #8
 800033c:	4619      	mov	r1, r3
 800033e:	4854      	ldr	r0, [pc, #336]	; (8000490 <OLED_Init+0x1bc>)
 8000340:	f005 f912 	bl	8005568 <HAL_GPIO_Init>

	//SDIN
	GPIO_InitStruct.Pin = OLED_SDIN_GPIO_PIN;
 8000344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000348:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034a:	2301      	movs	r3, #1
 800034c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800034e:	2301      	movs	r3, #1
 8000350:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000352:	2303      	movs	r3, #3
 8000354:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(OLED_SDIN_GPIO, &GPIO_InitStruct);
 8000356:	ab02      	add	r3, sp, #8
 8000358:	4619      	mov	r1, r3
 800035a:	484d      	ldr	r0, [pc, #308]	; (8000490 <OLED_Init+0x1bc>)
 800035c:	f005 f904 	bl	8005568 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(OLED_CS_GPIO, OLED_CS_GPIO_PIN, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000366:	484a      	ldr	r0, [pc, #296]	; (8000490 <OLED_Init+0x1bc>)
 8000368:	f005 fa7e 	bl	8005868 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(OLED_DC_GPIO, OLED_DC_GPIO_PIN, GPIO_PIN_SET);
 800036c:	2201      	movs	r2, #1
 800036e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000372:	4847      	ldr	r0, [pc, #284]	; (8000490 <OLED_Init+0x1bc>)
 8000374:	f005 fa78 	bl	8005868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OLED_SCLK_GPIO, OLED_SCLK_GPIO_PIN, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037e:	4844      	ldr	r0, [pc, #272]	; (8000490 <OLED_Init+0x1bc>)
 8000380:	f005 fa72 	bl	8005868 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OLED_SDIN_GPIO, OLED_SDIN_GPIO_PIN, GPIO_PIN_SET);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800038a:	4841      	ldr	r0, [pc, #260]	; (8000490 <OLED_Init+0x1bc>)
 800038c:	f005 fa6c 	bl	8005868 <HAL_GPIO_WritePin>
	OLED_RST_Clr();
	delay_ms(100);
	OLED_RST_Set();
	#endif
					  
	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 8000390:	2100      	movs	r1, #0
 8000392:	20ae      	movs	r0, #174	; 0xae
 8000394:	f7ff feda 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//---set low column address
 8000398:	2100      	movs	r1, #0
 800039a:	2002      	movs	r0, #2
 800039c:	f7ff fed6 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 80003a0:	2100      	movs	r1, #0
 80003a2:	2010      	movs	r0, #16
 80003a4:	f7ff fed2 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 80003a8:	2100      	movs	r1, #0
 80003aa:	2040      	movs	r0, #64	; 0x40
 80003ac:	f7ff fece 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 80003b0:	2100      	movs	r1, #0
 80003b2:	2081      	movs	r0, #129	; 0x81
 80003b4:	f7ff feca 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD); // Set SEG Output Current Brightness
 80003b8:	2100      	movs	r1, #0
 80003ba:	20cf      	movs	r0, #207	; 0xcf
 80003bc:	f7ff fec6 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 80003c0:	2100      	movs	r1, #0
 80003c2:	20a1      	movs	r0, #161	; 0xa1
 80003c4:	f7ff fec2 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
 80003c8:	2100      	movs	r1, #0
 80003ca:	20c8      	movs	r0, #200	; 0xc8
 80003cc:	f7ff febe 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 80003d0:	2100      	movs	r1, #0
 80003d2:	20a6      	movs	r0, #166	; 0xa6
 80003d4:	f7ff feba 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 80003d8:	2100      	movs	r1, #0
 80003da:	20a8      	movs	r0, #168	; 0xa8
 80003dc:	f7ff feb6 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 80003e0:	2100      	movs	r1, #0
 80003e2:	203f      	movs	r0, #63	; 0x3f
 80003e4:	f7ff feb2 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 80003e8:	2100      	movs	r1, #0
 80003ea:	20d3      	movs	r0, #211	; 0xd3
 80003ec:	f7ff feae 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 80003f0:	2100      	movs	r1, #0
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff feaa 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 80003f8:	2100      	movs	r1, #0
 80003fa:	20d5      	movs	r0, #213	; 0xd5
 80003fc:	f7ff fea6 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 8000400:	2100      	movs	r1, #0
 8000402:	2080      	movs	r0, #128	; 0x80
 8000404:	f7ff fea2 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 8000408:	2100      	movs	r1, #0
 800040a:	20d9      	movs	r0, #217	; 0xd9
 800040c:	f7ff fe9e 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8000410:	2100      	movs	r1, #0
 8000412:	20f1      	movs	r0, #241	; 0xf1
 8000414:	f7ff fe9a 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 8000418:	2100      	movs	r1, #0
 800041a:	20da      	movs	r0, #218	; 0xda
 800041c:	f7ff fe96 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 8000420:	2100      	movs	r1, #0
 8000422:	2012      	movs	r0, #18
 8000424:	f7ff fe92 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 8000428:	2100      	movs	r1, #0
 800042a:	20db      	movs	r0, #219	; 0xdb
 800042c:	f7ff fe8e 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
 8000430:	2100      	movs	r1, #0
 8000432:	2040      	movs	r0, #64	; 0x40
 8000434:	f7ff fe8a 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 8000438:	2100      	movs	r1, #0
 800043a:	2020      	movs	r0, #32
 800043c:	f7ff fe86 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 8000440:	2100      	movs	r1, #0
 8000442:	2002      	movs	r0, #2
 8000444:	f7ff fe82 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 8000448:	2100      	movs	r1, #0
 800044a:	208d      	movs	r0, #141	; 0x8d
 800044c:	f7ff fe7e 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 8000450:	2100      	movs	r1, #0
 8000452:	2014      	movs	r0, #20
 8000454:	f7ff fe7a 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
 8000458:	2100      	movs	r1, #0
 800045a:	20a4      	movs	r0, #164	; 0xa4
 800045c:	f7ff fe76 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
 8000460:	2100      	movs	r1, #0
 8000462:	20a6      	movs	r0, #166	; 0xa6
 8000464:	f7ff fe72 	bl	800014c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 8000468:	2100      	movs	r1, #0
 800046a:	20af      	movs	r0, #175	; 0xaf
 800046c:	f7ff fe6e 	bl	800014c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xAF,OLED_CMD); /*display ON*/ 
 8000470:	2100      	movs	r1, #0
 8000472:	20af      	movs	r0, #175	; 0xaf
 8000474:	f7ff fe6a 	bl	800014c <OLED_WR_Byte>
	OLED_Clear();
 8000478:	f7ff fef7 	bl	800026a <OLED_Clear>
	OLED_Set_Pos(0,0); 	
 800047c:	2100      	movs	r1, #0
 800047e:	2000      	movs	r0, #0
 8000480:	f7ff fec6 	bl	8000210 <OLED_Set_Pos>
}  
 8000484:	bf00      	nop
 8000486:	b007      	add	sp, #28
 8000488:	f85d fb04 	ldr.w	pc, [sp], #4
 800048c:	40021000 	.word	0x40021000
 8000490:	40010c00 	.word	0x40010c00

08000494 <load24_littleendian>:
*
* Returns 32-bit unsigned integer loaded from x (most significant byte is zero)
**************************************************/
#if KYBER_ETA1 == 3
static uint32_t load24_littleendian(const uint8_t x[3])
{
 8000494:	b084      	sub	sp, #16
 8000496:	9001      	str	r0, [sp, #4]
  uint32_t r;
  r  = (uint32_t)x[0];
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	9303      	str	r3, [sp, #12]
  r |= (uint32_t)x[1] << 8;
 800049e:	9b01      	ldr	r3, [sp, #4]
 80004a0:	3301      	adds	r3, #1
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	021b      	lsls	r3, r3, #8
 80004a6:	9a03      	ldr	r2, [sp, #12]
 80004a8:	4313      	orrs	r3, r2
 80004aa:	9303      	str	r3, [sp, #12]
  r |= (uint32_t)x[2] << 16;
 80004ac:	9b01      	ldr	r3, [sp, #4]
 80004ae:	3302      	adds	r3, #2
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	041b      	lsls	r3, r3, #16
 80004b4:	9a03      	ldr	r2, [sp, #12]
 80004b6:	4313      	orrs	r3, r2
 80004b8:	9303      	str	r3, [sp, #12]
  return r;
 80004ba:	9b03      	ldr	r3, [sp, #12]
}
 80004bc:	4618      	mov	r0, r3
 80004be:	b004      	add	sp, #16
 80004c0:	4770      	bx	lr
	...

080004c4 <cbd3>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *buf: pointer to input byte array
**************************************************/
#if KYBER_ETA1 == 3
static void cbd3(poly *r, const uint8_t buf[3*KYBER_N/4])
{
 80004c4:	b500      	push	{lr}
 80004c6:	b089      	sub	sp, #36	; 0x24
 80004c8:	9001      	str	r0, [sp, #4]
 80004ca:	9100      	str	r1, [sp, #0]
  unsigned int i,j;
  uint32_t t,d;
  int16_t a,b;

  for(i=0;i<KYBER_N/4;i++) {
 80004cc:	2300      	movs	r3, #0
 80004ce:	9307      	str	r3, [sp, #28]
 80004d0:	e050      	b.n	8000574 <cbd3+0xb0>
    t  = load24_littleendian(buf+3*i);
 80004d2:	9a07      	ldr	r2, [sp, #28]
 80004d4:	4613      	mov	r3, r2
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	4413      	add	r3, r2
 80004da:	9a00      	ldr	r2, [sp, #0]
 80004dc:	4413      	add	r3, r2
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff ffd8 	bl	8000494 <load24_littleendian>
 80004e4:	9005      	str	r0, [sp, #20]
    d  = t & 0x00249249;
 80004e6:	9a05      	ldr	r2, [sp, #20]
 80004e8:	4b26      	ldr	r3, [pc, #152]	; (8000584 <cbd3+0xc0>)
 80004ea:	4013      	ands	r3, r2
 80004ec:	9304      	str	r3, [sp, #16]
    d += (t>>1) & 0x00249249;
 80004ee:	9b05      	ldr	r3, [sp, #20]
 80004f0:	085a      	lsrs	r2, r3, #1
 80004f2:	4b24      	ldr	r3, [pc, #144]	; (8000584 <cbd3+0xc0>)
 80004f4:	4013      	ands	r3, r2
 80004f6:	9a04      	ldr	r2, [sp, #16]
 80004f8:	4413      	add	r3, r2
 80004fa:	9304      	str	r3, [sp, #16]
    d += (t>>2) & 0x00249249;
 80004fc:	9b05      	ldr	r3, [sp, #20]
 80004fe:	089a      	lsrs	r2, r3, #2
 8000500:	4b20      	ldr	r3, [pc, #128]	; (8000584 <cbd3+0xc0>)
 8000502:	4013      	ands	r3, r2
 8000504:	9a04      	ldr	r2, [sp, #16]
 8000506:	4413      	add	r3, r2
 8000508:	9304      	str	r3, [sp, #16]

    for(j=0;j<4;j++) {
 800050a:	2300      	movs	r3, #0
 800050c:	9306      	str	r3, [sp, #24]
 800050e:	e02b      	b.n	8000568 <cbd3+0xa4>
      a = (d >> (6*j+0)) & 0x7;
 8000510:	9a06      	ldr	r2, [sp, #24]
 8000512:	4613      	mov	r3, r2
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	4413      	add	r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	461a      	mov	r2, r3
 800051c:	9b04      	ldr	r3, [sp, #16]
 800051e:	40d3      	lsrs	r3, r2
 8000520:	b21b      	sxth	r3, r3
 8000522:	f003 0307 	and.w	r3, r3, #7
 8000526:	f8ad 300e 	strh.w	r3, [sp, #14]
      b = (d >> (6*j+3)) & 0x7;
 800052a:	9a06      	ldr	r2, [sp, #24]
 800052c:	4613      	mov	r3, r2
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	4413      	add	r3, r2
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	3303      	adds	r3, #3
 8000536:	9a04      	ldr	r2, [sp, #16]
 8000538:	fa22 f303 	lsr.w	r3, r2, r3
 800053c:	b21b      	sxth	r3, r3
 800053e:	f003 0307 	and.w	r3, r3, #7
 8000542:	f8ad 300c 	strh.w	r3, [sp, #12]
      r->coeffs[4*i+j] = a - b;
 8000546:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800054a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800054e:	1ad3      	subs	r3, r2, r3
 8000550:	b299      	uxth	r1, r3
 8000552:	9b07      	ldr	r3, [sp, #28]
 8000554:	009a      	lsls	r2, r3, #2
 8000556:	9b06      	ldr	r3, [sp, #24]
 8000558:	441a      	add	r2, r3
 800055a:	b209      	sxth	r1, r1
 800055c:	9b01      	ldr	r3, [sp, #4]
 800055e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(j=0;j<4;j++) {
 8000562:	9b06      	ldr	r3, [sp, #24]
 8000564:	3301      	adds	r3, #1
 8000566:	9306      	str	r3, [sp, #24]
 8000568:	9b06      	ldr	r3, [sp, #24]
 800056a:	2b03      	cmp	r3, #3
 800056c:	d9d0      	bls.n	8000510 <cbd3+0x4c>
  for(i=0;i<KYBER_N/4;i++) {
 800056e:	9b07      	ldr	r3, [sp, #28]
 8000570:	3301      	adds	r3, #1
 8000572:	9307      	str	r3, [sp, #28]
 8000574:	9b07      	ldr	r3, [sp, #28]
 8000576:	2b3f      	cmp	r3, #63	; 0x3f
 8000578:	d9ab      	bls.n	80004d2 <cbd3+0xe>
    }
  }
}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	b009      	add	sp, #36	; 0x24
 8000580:	f85d fb04 	ldr.w	pc, [sp], #4
 8000584:	00249249 	.word	0x00249249

08000588 <pqcrystals_kyber512_ref_poly_cbd_eta1>:
#endif

void poly_cbd_eta1(poly *r, const uint8_t buf[KYBER_ETA1*KYBER_N/4])
{
 8000588:	b500      	push	{lr}
 800058a:	b083      	sub	sp, #12
 800058c:	9001      	str	r0, [sp, #4]
 800058e:	9100      	str	r1, [sp, #0]
#if KYBER_ETA1 == 2
  cbd2(r, buf);
#elif KYBER_ETA1 == 3
  cbd3(r, buf);
 8000590:	9900      	ldr	r1, [sp, #0]
 8000592:	9801      	ldr	r0, [sp, #4]
 8000594:	f7ff ff96 	bl	80004c4 <cbd3>
#else
#error "This implementation requires eta1 in {2,3}"
#endif
}
 8000598:	bf00      	nop
 800059a:	b003      	add	sp, #12
 800059c:	f85d fb04 	ldr.w	pc, [sp], #4

080005a0 <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 80005a0:	b4f0      	push	{r4, r5, r6, r7}
 80005a2:	b086      	sub	sp, #24
 80005a4:	9001      	str	r0, [sp, #4]
  unsigned int i;
  uint64_t r = 0;
 80005a6:	f04f 0000 	mov.w	r0, #0
 80005aa:	f04f 0100 	mov.w	r1, #0
 80005ae:	e9cd 0102 	strd	r0, r1, [sp, #8]

  for(i=0;i<8;i++)
 80005b2:	2100      	movs	r1, #0
 80005b4:	9105      	str	r1, [sp, #20]
 80005b6:	e023      	b.n	8000600 <load64+0x60>
    r |= (uint64_t)x[i] << 8*i;
 80005b8:	9801      	ldr	r0, [sp, #4]
 80005ba:	9905      	ldr	r1, [sp, #20]
 80005bc:	4401      	add	r1, r0
 80005be:	7809      	ldrb	r1, [r1, #0]
 80005c0:	b2c9      	uxtb	r1, r1
 80005c2:	2000      	movs	r0, #0
 80005c4:	460c      	mov	r4, r1
 80005c6:	4605      	mov	r5, r0
 80005c8:	9905      	ldr	r1, [sp, #20]
 80005ca:	00c9      	lsls	r1, r1, #3
 80005cc:	f1a1 0c20 	sub.w	ip, r1, #32
 80005d0:	f1c1 0020 	rsb	r0, r1, #32
 80005d4:	fa05 f301 	lsl.w	r3, r5, r1
 80005d8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005dc:	ea43 030c 	orr.w	r3, r3, ip
 80005e0:	fa24 f000 	lsr.w	r0, r4, r0
 80005e4:	4303      	orrs	r3, r0
 80005e6:	fa04 f201 	lsl.w	r2, r4, r1
 80005ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80005ee:	ea40 0602 	orr.w	r6, r0, r2
 80005f2:	ea41 0703 	orr.w	r7, r1, r3
 80005f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
  for(i=0;i<8;i++)
 80005fa:	9905      	ldr	r1, [sp, #20]
 80005fc:	3101      	adds	r1, #1
 80005fe:	9105      	str	r1, [sp, #20]
 8000600:	9905      	ldr	r1, [sp, #20]
 8000602:	2907      	cmp	r1, #7
 8000604:	d9d8      	bls.n	80005b8 <load64+0x18>

  return r;
 8000606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
}
 800060a:	4610      	mov	r0, r2
 800060c:	4619      	mov	r1, r3
 800060e:	b006      	add	sp, #24
 8000610:	bcf0      	pop	{r4, r5, r6, r7}
 8000612:	4770      	bx	lr

08000614 <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 8000614:	b470      	push	{r4, r5, r6}
 8000616:	b087      	sub	sp, #28
 8000618:	9003      	str	r0, [sp, #12]
 800061a:	e9cd 2300 	strd	r2, r3, [sp]
  unsigned int i;

  for(i=0;i<8;i++)
 800061e:	2300      	movs	r3, #0
 8000620:	9305      	str	r3, [sp, #20]
 8000622:	e019      	b.n	8000658 <store64+0x44>
    x[i] = u >> 8*i;
 8000624:	9b05      	ldr	r3, [sp, #20]
 8000626:	00d9      	lsls	r1, r3, #3
 8000628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800062c:	f1c1 0620 	rsb	r6, r1, #32
 8000630:	f1a1 0020 	sub.w	r0, r1, #32
 8000634:	fa22 f401 	lsr.w	r4, r2, r1
 8000638:	fa03 f606 	lsl.w	r6, r3, r6
 800063c:	4334      	orrs	r4, r6
 800063e:	fa23 f000 	lsr.w	r0, r3, r0
 8000642:	4304      	orrs	r4, r0
 8000644:	fa23 f501 	lsr.w	r5, r3, r1
 8000648:	9a03      	ldr	r2, [sp, #12]
 800064a:	9b05      	ldr	r3, [sp, #20]
 800064c:	4413      	add	r3, r2
 800064e:	b2e2      	uxtb	r2, r4
 8000650:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 8000652:	9b05      	ldr	r3, [sp, #20]
 8000654:	3301      	adds	r3, #1
 8000656:	9305      	str	r3, [sp, #20]
 8000658:	9b05      	ldr	r3, [sp, #20]
 800065a:	2b07      	cmp	r3, #7
 800065c:	d9e2      	bls.n	8000624 <store64+0x10>
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	b007      	add	sp, #28
 8000664:	bc70      	pop	{r4, r5, r6}
 8000666:	4770      	bx	lr

08000668 <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 8000668:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800066c:	f5ad 6d38 	sub.w	sp, sp, #2944	; 0xb80
 8000670:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8000674:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000678:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 800067a:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800067e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000688:	f50d 6137 	add.w	r1, sp, #2928	; 0xb70
 800068c:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 8000690:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8000694:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800069e:	f60d 3168 	addw	r1, sp, #2920	; 0xb68
 80006a2:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 80006a6:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80006aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80006b4:	f50d 6136 	add.w	r1, sp, #2912	; 0xb60
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 80006bc:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80006c0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80006ca:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
 80006ce:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 80006d2:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80006d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80006e0:	f50d 6135 	add.w	r1, sp, #2896	; 0xb50
 80006e4:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 80006e8:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80006ec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80006f6:	f60d 3148 	addw	r1, sp, #2888	; 0xb48
 80006fa:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 80006fe:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8000702:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800070c:	f50d 6134 	add.w	r1, sp, #2880	; 0xb40
 8000710:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 8000714:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8000718:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000722:	f60d 3138 	addw	r1, sp, #2872	; 0xb38
 8000726:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 800072a:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800072e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000738:	f50d 6133 	add.w	r1, sp, #2864	; 0xb30
 800073c:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 8000740:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8000744:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800074e:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
 8000752:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 8000756:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800075a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8000764:	f50d 6132 	add.w	r1, sp, #2848	; 0xb20
 8000768:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 800076c:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8000770:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800077a:	f60d 3118 	addw	r1, sp, #2840	; 0xb18
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 8000782:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8000786:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000790:	f50d 6131 	add.w	r1, sp, #2832	; 0xb10
 8000794:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 8000798:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800079c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80007a6:	f60d 3108 	addw	r1, sp, #2824	; 0xb08
 80007aa:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 80007ae:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80007b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80007bc:	f50d 6130 	add.w	r1, sp, #2816	; 0xb00
 80007c0:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 80007c4:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80007c8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80007d2:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
 80007d6:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 80007da:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80007de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80007e8:	f50d 612f 	add.w	r1, sp, #2800	; 0xaf0
 80007ec:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 80007f0:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80007f4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80007fe:	f60d 21e8 	addw	r1, sp, #2792	; 0xae8
 8000802:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 8000806:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800080a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8000814:	f50d 612e 	add.w	r1, sp, #2784	; 0xae0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 800081c:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8000820:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800082a:	f60d 21d8 	addw	r1, sp, #2776	; 0xad8
 800082e:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 8000832:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8000836:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8000840:	f50d 612d 	add.w	r1, sp, #2768	; 0xad0
 8000844:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 8000848:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800084c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 8000856:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
 800085a:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 800085e:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8000862:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 800086c:	f50d 612c 	add.w	r1, sp, #2752	; 0xac0
 8000870:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 8000874:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8000878:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8000882:	f60d 21b8 	addw	r1, sp, #2744	; 0xab8
 8000886:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 800088a:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800088e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8000898:	f50d 612b 	add.w	r1, sp, #2736	; 0xab0
 800089c:	e9c1 2300 	strd	r2, r3, [r1]

        for(round = 0; round < NROUNDS; round += 2) {
 80008a0:	2300      	movs	r3, #0
 80008a2:	f8cd 3b7c 	str.w	r3, [sp, #2940]	; 0xb7c
 80008a6:	f002 be67 	b.w	8003578 <KeccakF1600_StatePermute+0x2f10>
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 80008aa:	f50d 6337 	add.w	r3, sp, #2928	; 0xb70
 80008ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008b2:	f60d 3348 	addw	r3, sp, #2888	; 0xb48
 80008b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ba:	ea80 0c02 	eor.w	ip, r0, r2
 80008be:	f8cd c000 	str.w	ip, [sp]
 80008c2:	404b      	eors	r3, r1
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	f50d 6332 	add.w	r3, sp, #2848	; 0xb20
 80008ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80008d2:	4684      	mov	ip, r0
 80008d4:	ea8c 0c02 	eor.w	ip, ip, r2
 80008d8:	f8cd c008 	str.w	ip, [sp, #8]
 80008dc:	404b      	eors	r3, r1
 80008de:	9303      	str	r3, [sp, #12]
 80008e0:	f60d 23f8 	addw	r3, sp, #2808	; 0xaf8
 80008e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80008ec:	4684      	mov	ip, r0
 80008ee:	ea8c 0c02 	eor.w	ip, ip, r2
 80008f2:	f8cd c010 	str.w	ip, [sp, #16]
 80008f6:	404b      	eors	r3, r1
 80008f8:	9305      	str	r3, [sp, #20]
 80008fa:	f50d 632d 	add.w	r3, sp, #2768	; 0xad0
 80008fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000902:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8000906:	4684      	mov	ip, r0
 8000908:	ea82 0c0c 	eor.w	ip, r2, ip
 800090c:	f8cd c440 	str.w	ip, [sp, #1088]	; 0x440
 8000910:	404b      	eors	r3, r1
 8000912:	f8cd 3444 	str.w	r3, [sp, #1092]	; 0x444
 8000916:	f50d 6388 	add.w	r3, sp, #1088	; 0x440
 800091a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800091e:	f60d 21a8 	addw	r1, sp, #2728	; 0xaa8
 8000922:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 8000926:	f60d 3368 	addw	r3, sp, #2920	; 0xb68
 800092a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800092e:	f50d 6334 	add.w	r3, sp, #2880	; 0xb40
 8000932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000936:	ea80 0c02 	eor.w	ip, r0, r2
 800093a:	f8cd c018 	str.w	ip, [sp, #24]
 800093e:	404b      	eors	r3, r1
 8000940:	9307      	str	r3, [sp, #28]
 8000942:	f60d 3318 	addw	r3, sp, #2840	; 0xb18
 8000946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800094a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800094e:	4684      	mov	ip, r0
 8000950:	ea8c 0c02 	eor.w	ip, ip, r2
 8000954:	f8cd c020 	str.w	ip, [sp, #32]
 8000958:	404b      	eors	r3, r1
 800095a:	9309      	str	r3, [sp, #36]	; 0x24
 800095c:	f50d 632f 	add.w	r3, sp, #2800	; 0xaf0
 8000960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000964:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8000968:	4684      	mov	ip, r0
 800096a:	ea8c 0c02 	eor.w	ip, ip, r2
 800096e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8000972:	404b      	eors	r3, r1
 8000974:	930b      	str	r3, [sp, #44]	; 0x2c
 8000976:	f60d 23c8 	addw	r3, sp, #2760	; 0xac8
 800097a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800097e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8000982:	4684      	mov	ip, r0
 8000984:	ea82 0c0c 	eor.w	ip, r2, ip
 8000988:	f8cd c448 	str.w	ip, [sp, #1096]	; 0x448
 800098c:	404b      	eors	r3, r1
 800098e:	f8cd 344c 	str.w	r3, [sp, #1100]	; 0x44c
 8000992:	f50d 6389 	add.w	r3, sp, #1096	; 0x448
 8000996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800099a:	f50d 612a 	add.w	r1, sp, #2720	; 0xaa0
 800099e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 80009a2:	f50d 6336 	add.w	r3, sp, #2912	; 0xb60
 80009a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80009aa:	f60d 3338 	addw	r3, sp, #2872	; 0xb38
 80009ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b2:	ea80 0c02 	eor.w	ip, r0, r2
 80009b6:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
 80009ba:	404b      	eors	r3, r1
 80009bc:	930d      	str	r3, [sp, #52]	; 0x34
 80009be:	f50d 6331 	add.w	r3, sp, #2832	; 0xb10
 80009c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80009ca:	4684      	mov	ip, r0
 80009cc:	ea8c 0c02 	eor.w	ip, ip, r2
 80009d0:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 80009d4:	404b      	eors	r3, r1
 80009d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80009d8:	f60d 23e8 	addw	r3, sp, #2792	; 0xae8
 80009dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80009e4:	4684      	mov	ip, r0
 80009e6:	ea8c 0c02 	eor.w	ip, ip, r2
 80009ea:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 80009ee:	404b      	eors	r3, r1
 80009f0:	9311      	str	r3, [sp, #68]	; 0x44
 80009f2:	f50d 632c 	add.w	r3, sp, #2752	; 0xac0
 80009f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80009fe:	4684      	mov	ip, r0
 8000a00:	ea82 0c0c 	eor.w	ip, r2, ip
 8000a04:	f8cd c450 	str.w	ip, [sp, #1104]	; 0x450
 8000a08:	404b      	eors	r3, r1
 8000a0a:	f8cd 3454 	str.w	r3, [sp, #1108]	; 0x454
 8000a0e:	f50d 638a 	add.w	r3, sp, #1104	; 0x450
 8000a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a16:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
 8000a1a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000a1e:	f60d 3358 	addw	r3, sp, #2904	; 0xb58
 8000a22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a26:	f50d 6333 	add.w	r3, sp, #2864	; 0xb30
 8000a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a2e:	ea80 0c02 	eor.w	ip, r0, r2
 8000a32:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8000a36:	404b      	eors	r3, r1
 8000a38:	9313      	str	r3, [sp, #76]	; 0x4c
 8000a3a:	f60d 3308 	addw	r3, sp, #2824	; 0xb08
 8000a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a42:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8000a46:	4684      	mov	ip, r0
 8000a48:	ea8c 0c02 	eor.w	ip, ip, r2
 8000a4c:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8000a50:	404b      	eors	r3, r1
 8000a52:	9315      	str	r3, [sp, #84]	; 0x54
 8000a54:	f50d 632e 	add.w	r3, sp, #2784	; 0xae0
 8000a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a5c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8000a60:	4684      	mov	ip, r0
 8000a62:	ea8c 0c02 	eor.w	ip, ip, r2
 8000a66:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8000a6a:	404b      	eors	r3, r1
 8000a6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8000a6e:	f60d 23b8 	addw	r3, sp, #2744	; 0xab8
 8000a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a76:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8000a7a:	4684      	mov	ip, r0
 8000a7c:	ea82 0c0c 	eor.w	ip, r2, ip
 8000a80:	f8cd c458 	str.w	ip, [sp, #1112]	; 0x458
 8000a84:	404b      	eors	r3, r1
 8000a86:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
 8000a8a:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
 8000a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a92:	f50d 6129 	add.w	r1, sp, #2704	; 0xa90
 8000a96:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 8000a9a:	f50d 6335 	add.w	r3, sp, #2896	; 0xb50
 8000a9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000aa2:	f60d 3328 	addw	r3, sp, #2856	; 0xb28
 8000aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aaa:	ea80 0c02 	eor.w	ip, r0, r2
 8000aae:	f8cd c060 	str.w	ip, [sp, #96]	; 0x60
 8000ab2:	404b      	eors	r3, r1
 8000ab4:	9319      	str	r3, [sp, #100]	; 0x64
 8000ab6:	f50d 6330 	add.w	r3, sp, #2816	; 0xb00
 8000aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000abe:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8000ac2:	4684      	mov	ip, r0
 8000ac4:	ea8c 0c02 	eor.w	ip, ip, r2
 8000ac8:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
 8000acc:	404b      	eors	r3, r1
 8000ace:	931b      	str	r3, [sp, #108]	; 0x6c
 8000ad0:	f60d 23d8 	addw	r3, sp, #2776	; 0xad8
 8000ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad8:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8000adc:	4684      	mov	ip, r0
 8000ade:	ea8c 0c02 	eor.w	ip, ip, r2
 8000ae2:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 8000ae6:	404b      	eors	r3, r1
 8000ae8:	931d      	str	r3, [sp, #116]	; 0x74
 8000aea:	f50d 632b 	add.w	r3, sp, #2736	; 0xab0
 8000aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af2:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8000af6:	4684      	mov	ip, r0
 8000af8:	ea82 0c0c 	eor.w	ip, r2, ip
 8000afc:	f8cd c460 	str.w	ip, [sp, #1120]	; 0x460
 8000b00:	404b      	eors	r3, r1
 8000b02:	f8cd 3464 	str.w	r3, [sp, #1124]	; 0x464
 8000b06:	f50d 638c 	add.w	r3, sp, #1120	; 0x460
 8000b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0e:	f60d 2188 	addw	r1, sp, #2696	; 0xa88
 8000b12:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round, A, E)
            Da = BCu^ROL(BCe, 1);
 8000b16:	f8dd 3aa0 	ldr.w	r3, [sp, #2720]	; 0xaa0
 8000b1a:	0fda      	lsrs	r2, r3, #31
 8000b1c:	f8dd 3aa4 	ldr.w	r3, [sp, #2724]	; 0xaa4
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	4313      	orrs	r3, r2
 8000b24:	931f      	str	r3, [sp, #124]	; 0x7c
 8000b26:	f8dd 3aa4 	ldr.w	r3, [sp, #2724]	; 0xaa4
 8000b2a:	0fda      	lsrs	r2, r3, #31
 8000b2c:	f8dd 3aa0 	ldr.w	r3, [sp, #2720]	; 0xaa0
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	4313      	orrs	r3, r2
 8000b34:	931e      	str	r3, [sp, #120]	; 0x78
 8000b36:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8000b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b3e:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8000b42:	4684      	mov	ip, r0
 8000b44:	ea82 0c0c 	eor.w	ip, r2, ip
 8000b48:	f8cd c468 	str.w	ip, [sp, #1128]	; 0x468
 8000b4c:	404b      	eors	r3, r1
 8000b4e:	f8cd 346c 	str.w	r3, [sp, #1132]	; 0x46c
 8000b52:	f50d 638d 	add.w	r3, sp, #1128	; 0x468
 8000b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b5a:	f50d 6128 	add.w	r1, sp, #2688	; 0xa80
 8000b5e:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8000b62:	f8dd 3a98 	ldr.w	r3, [sp, #2712]	; 0xa98
 8000b66:	0fda      	lsrs	r2, r3, #31
 8000b68:	f8dd 3a9c 	ldr.w	r3, [sp, #2716]	; 0xa9c
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	9321      	str	r3, [sp, #132]	; 0x84
 8000b72:	f8dd 3a9c 	ldr.w	r3, [sp, #2716]	; 0xa9c
 8000b76:	0fda      	lsrs	r2, r3, #31
 8000b78:	f8dd 3a98 	ldr.w	r3, [sp, #2712]	; 0xa98
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	9320      	str	r3, [sp, #128]	; 0x80
 8000b82:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8000b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b8a:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 8000b8e:	4684      	mov	ip, r0
 8000b90:	ea82 0c0c 	eor.w	ip, r2, ip
 8000b94:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
 8000b98:	404b      	eors	r3, r1
 8000b9a:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
 8000b9e:	f50d 638e 	add.w	r3, sp, #1136	; 0x470
 8000ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba6:	f60d 2178 	addw	r1, sp, #2680	; 0xa78
 8000baa:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8000bae:	f8dd 3a90 	ldr.w	r3, [sp, #2704]	; 0xa90
 8000bb2:	0fda      	lsrs	r2, r3, #31
 8000bb4:	f8dd 3a94 	ldr.w	r3, [sp, #2708]	; 0xa94
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	9323      	str	r3, [sp, #140]	; 0x8c
 8000bbe:	f8dd 3a94 	ldr.w	r3, [sp, #2708]	; 0xa94
 8000bc2:	0fda      	lsrs	r2, r3, #31
 8000bc4:	f8dd 3a90 	ldr.w	r3, [sp, #2704]	; 0xa90
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	9322      	str	r3, [sp, #136]	; 0x88
 8000bce:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8000bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd6:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8000bda:	4684      	mov	ip, r0
 8000bdc:	ea82 0c0c 	eor.w	ip, r2, ip
 8000be0:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
 8000be4:	404b      	eors	r3, r1
 8000be6:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
 8000bea:	f50d 638f 	add.w	r3, sp, #1144	; 0x478
 8000bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf2:	f50d 6127 	add.w	r1, sp, #2672	; 0xa70
 8000bf6:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 8000bfa:	f8dd 3a88 	ldr.w	r3, [sp, #2696]	; 0xa88
 8000bfe:	0fda      	lsrs	r2, r3, #31
 8000c00:	f8dd 3a8c 	ldr.w	r3, [sp, #2700]	; 0xa8c
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4313      	orrs	r3, r2
 8000c08:	9325      	str	r3, [sp, #148]	; 0x94
 8000c0a:	f8dd 3a8c 	ldr.w	r3, [sp, #2700]	; 0xa8c
 8000c0e:	0fda      	lsrs	r2, r3, #31
 8000c10:	f8dd 3a88 	ldr.w	r3, [sp, #2696]	; 0xa88
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4313      	orrs	r3, r2
 8000c18:	9324      	str	r3, [sp, #144]	; 0x90
 8000c1a:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8000c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c22:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8000c26:	4684      	mov	ip, r0
 8000c28:	ea82 0c0c 	eor.w	ip, r2, ip
 8000c2c:	f8cd c480 	str.w	ip, [sp, #1152]	; 0x480
 8000c30:	404b      	eors	r3, r1
 8000c32:	f8cd 3484 	str.w	r3, [sp, #1156]	; 0x484
 8000c36:	f50d 6390 	add.w	r3, sp, #1152	; 0x480
 8000c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3e:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
 8000c42:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8000c46:	f8dd 3aa8 	ldr.w	r3, [sp, #2728]	; 0xaa8
 8000c4a:	0fda      	lsrs	r2, r3, #31
 8000c4c:	f8dd 3aac 	ldr.w	r3, [sp, #2732]	; 0xaac
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4313      	orrs	r3, r2
 8000c54:	9327      	str	r3, [sp, #156]	; 0x9c
 8000c56:	f8dd 3aac 	ldr.w	r3, [sp, #2732]	; 0xaac
 8000c5a:	0fda      	lsrs	r2, r3, #31
 8000c5c:	f8dd 3aa8 	ldr.w	r3, [sp, #2728]	; 0xaa8
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4313      	orrs	r3, r2
 8000c64:	9326      	str	r3, [sp, #152]	; 0x98
 8000c66:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8000c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6e:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8000c72:	4684      	mov	ip, r0
 8000c74:	ea82 0c0c 	eor.w	ip, r2, ip
 8000c78:	f8cd c488 	str.w	ip, [sp, #1160]	; 0x488
 8000c7c:	404b      	eors	r3, r1
 8000c7e:	f8cd 348c 	str.w	r3, [sp, #1164]	; 0x48c
 8000c82:	f50d 6391 	add.w	r3, sp, #1160	; 0x488
 8000c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8a:	f50d 6126 	add.w	r1, sp, #2656	; 0xa60
 8000c8e:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 8000c92:	f50d 6337 	add.w	r3, sp, #2928	; 0xb70
 8000c96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c9a:	f50d 6328 	add.w	r3, sp, #2688	; 0xa80
 8000c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca2:	ea80 0c02 	eor.w	ip, r0, r2
 8000ca6:	f8cd c490 	str.w	ip, [sp, #1168]	; 0x490
 8000caa:	404b      	eors	r3, r1
 8000cac:	f8cd 3494 	str.w	r3, [sp, #1172]	; 0x494
 8000cb0:	f50d 6392 	add.w	r3, sp, #1168	; 0x490
 8000cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb8:	f50d 6137 	add.w	r1, sp, #2928	; 0xb70
 8000cbc:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 8000cc0:	f50d 6337 	add.w	r3, sp, #2928	; 0xb70
 8000cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc8:	f60d 21a8 	addw	r1, sp, #2728	; 0xaa8
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 8000cd0:	f50d 6334 	add.w	r3, sp, #2880	; 0xb40
 8000cd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cd8:	f60d 2378 	addw	r3, sp, #2680	; 0xa78
 8000cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce0:	ea80 0c02 	eor.w	ip, r0, r2
 8000ce4:	f8cd c498 	str.w	ip, [sp, #1176]	; 0x498
 8000ce8:	404b      	eors	r3, r1
 8000cea:	f8cd 349c 	str.w	r3, [sp, #1180]	; 0x49c
 8000cee:	f50d 6393 	add.w	r3, sp, #1176	; 0x498
 8000cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf6:	f50d 6134 	add.w	r1, sp, #2880	; 0xb40
 8000cfa:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 8000cfe:	f8dd 3b44 	ldr.w	r3, [sp, #2884]	; 0xb44
 8000d02:	031a      	lsls	r2, r3, #12
 8000d04:	f8dd 3b40 	ldr.w	r3, [sp, #2880]	; 0xb40
 8000d08:	0d1b      	lsrs	r3, r3, #20
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	f8cd 34a0 	str.w	r3, [sp, #1184]	; 0x4a0
 8000d10:	f8dd 3b40 	ldr.w	r3, [sp, #2880]	; 0xb40
 8000d14:	031a      	lsls	r2, r3, #12
 8000d16:	f8dd 3b44 	ldr.w	r3, [sp, #2884]	; 0xb44
 8000d1a:	0d1b      	lsrs	r3, r3, #20
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	f8cd 34a4 	str.w	r3, [sp, #1188]	; 0x4a4
 8000d22:	f50d 6394 	add.w	r3, sp, #1184	; 0x4a0
 8000d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2a:	f50d 612a 	add.w	r1, sp, #2720	; 0xaa0
 8000d2e:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 8000d32:	f50d 6331 	add.w	r3, sp, #2832	; 0xb10
 8000d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d3a:	f50d 6327 	add.w	r3, sp, #2672	; 0xa70
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	ea80 0c02 	eor.w	ip, r0, r2
 8000d46:	f8cd c4a8 	str.w	ip, [sp, #1192]	; 0x4a8
 8000d4a:	404b      	eors	r3, r1
 8000d4c:	f8cd 34ac 	str.w	r3, [sp, #1196]	; 0x4ac
 8000d50:	f50d 6395 	add.w	r3, sp, #1192	; 0x4a8
 8000d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d58:	f50d 6131 	add.w	r1, sp, #2832	; 0xb10
 8000d5c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 8000d60:	f8dd 3b14 	ldr.w	r3, [sp, #2836]	; 0xb14
 8000d64:	02da      	lsls	r2, r3, #11
 8000d66:	f8dd 3b10 	ldr.w	r3, [sp, #2832]	; 0xb10
 8000d6a:	0d5b      	lsrs	r3, r3, #21
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	f8cd 34b0 	str.w	r3, [sp, #1200]	; 0x4b0
 8000d72:	f8dd 3b10 	ldr.w	r3, [sp, #2832]	; 0xb10
 8000d76:	02da      	lsls	r2, r3, #11
 8000d78:	f8dd 3b14 	ldr.w	r3, [sp, #2836]	; 0xb14
 8000d7c:	0d5b      	lsrs	r3, r3, #21
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	f8cd 34b4 	str.w	r3, [sp, #1204]	; 0x4b4
 8000d84:	f50d 6396 	add.w	r3, sp, #1200	; 0x4b0
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
 8000d90:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 8000d94:	f50d 632e 	add.w	r3, sp, #2784	; 0xae0
 8000d98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d9c:	f60d 2368 	addw	r3, sp, #2664	; 0xa68
 8000da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da4:	ea80 0c02 	eor.w	ip, r0, r2
 8000da8:	f8cd c4b8 	str.w	ip, [sp, #1208]	; 0x4b8
 8000dac:	404b      	eors	r3, r1
 8000dae:	f8cd 34bc 	str.w	r3, [sp, #1212]	; 0x4bc
 8000db2:	f50d 6397 	add.w	r3, sp, #1208	; 0x4b8
 8000db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dba:	f50d 612e 	add.w	r1, sp, #2784	; 0xae0
 8000dbe:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 8000dc2:	f8dd 3ae0 	ldr.w	r3, [sp, #2784]	; 0xae0
 8000dc6:	0ada      	lsrs	r2, r3, #11
 8000dc8:	f8dd 3ae4 	ldr.w	r3, [sp, #2788]	; 0xae4
 8000dcc:	055b      	lsls	r3, r3, #21
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	f8cd 34c4 	str.w	r3, [sp, #1220]	; 0x4c4
 8000dd4:	f8dd 3ae4 	ldr.w	r3, [sp, #2788]	; 0xae4
 8000dd8:	0ada      	lsrs	r2, r3, #11
 8000dda:	f8dd 3ae0 	ldr.w	r3, [sp, #2784]	; 0xae0
 8000dde:	055b      	lsls	r3, r3, #21
 8000de0:	4313      	orrs	r3, r2
 8000de2:	f8cd 34c0 	str.w	r3, [sp, #1216]	; 0x4c0
 8000de6:	f50d 6398 	add.w	r3, sp, #1216	; 0x4c0
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	f50d 6129 	add.w	r1, sp, #2704	; 0xa90
 8000df2:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 8000df6:	f50d 632b 	add.w	r3, sp, #2736	; 0xab0
 8000dfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dfe:	f50d 6326 	add.w	r3, sp, #2656	; 0xa60
 8000e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e06:	ea80 0c02 	eor.w	ip, r0, r2
 8000e0a:	f8cd c4c8 	str.w	ip, [sp, #1224]	; 0x4c8
 8000e0e:	404b      	eors	r3, r1
 8000e10:	f8cd 34cc 	str.w	r3, [sp, #1228]	; 0x4cc
 8000e14:	f50d 6399 	add.w	r3, sp, #1224	; 0x4c8
 8000e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1c:	f50d 612b 	add.w	r1, sp, #2736	; 0xab0
 8000e20:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 8000e24:	f8dd 3ab0 	ldr.w	r3, [sp, #2736]	; 0xab0
 8000e28:	0c9a      	lsrs	r2, r3, #18
 8000e2a:	f8dd 3ab4 	ldr.w	r3, [sp, #2740]	; 0xab4
 8000e2e:	039b      	lsls	r3, r3, #14
 8000e30:	4313      	orrs	r3, r2
 8000e32:	f8cd 34d4 	str.w	r3, [sp, #1236]	; 0x4d4
 8000e36:	f8dd 3ab4 	ldr.w	r3, [sp, #2740]	; 0xab4
 8000e3a:	0c9a      	lsrs	r2, r3, #18
 8000e3c:	f8dd 3ab0 	ldr.w	r3, [sp, #2736]	; 0xab0
 8000e40:	039b      	lsls	r3, r3, #14
 8000e42:	4313      	orrs	r3, r2
 8000e44:	f8cd 34d0 	str.w	r3, [sp, #1232]	; 0x4d0
 8000e48:	f50d 639a 	add.w	r3, sp, #1232	; 0x4d0
 8000e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e50:	f60d 2188 	addw	r1, sp, #2696	; 0xa88
 8000e54:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 8000e58:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8000e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e60:	43d1      	mvns	r1, r2
 8000e62:	9128      	str	r1, [sp, #160]	; 0xa0
 8000e64:	43db      	mvns	r3, r3
 8000e66:	9329      	str	r3, [sp, #164]	; 0xa4
 8000e68:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 8000e74:	4684      	mov	ip, r0
 8000e76:	ea0c 0c02 	and.w	ip, ip, r2
 8000e7a:	f8cd c0a8 	str.w	ip, [sp, #168]	; 0xa8
 8000e7e:	400b      	ands	r3, r1
 8000e80:	932b      	str	r3, [sp, #172]	; 0xac
 8000e82:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 8000e8e:	4684      	mov	ip, r0
 8000e90:	ea82 0c0c 	eor.w	ip, r2, ip
 8000e94:	f8cd c4d8 	str.w	ip, [sp, #1240]	; 0x4d8
 8000e98:	404b      	eors	r3, r1
 8000e9a:	f8cd 34dc 	str.w	r3, [sp, #1244]	; 0x4dc
 8000e9e:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f60d 2158 	addw	r1, sp, #2648	; 0xa58
 8000eaa:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8000eae:	4ac1      	ldr	r2, [pc, #772]	; (80011b4 <KeccakF1600_StatePermute+0xb4c>)
 8000eb0:	f8dd 3b7c 	ldr.w	r3, [sp, #2940]	; 0xb7c
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ebc:	f60d 2358 	addw	r3, sp, #2648	; 0xa58
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	ea82 0c00 	eor.w	ip, r2, r0
 8000ec8:	f8cd c4e0 	str.w	ip, [sp, #1248]	; 0x4e0
 8000ecc:	404b      	eors	r3, r1
 8000ece:	f8cd 34e4 	str.w	r3, [sp, #1252]	; 0x4e4
 8000ed2:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 8000ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eda:	f60d 2158 	addw	r1, sp, #2648	; 0xa58
 8000ede:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 8000ee2:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8000ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eea:	43d1      	mvns	r1, r2
 8000eec:	912c      	str	r1, [sp, #176]	; 0xb0
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	932d      	str	r3, [sp, #180]	; 0xb4
 8000ef2:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 8000efe:	4684      	mov	ip, r0
 8000f00:	ea0c 0c02 	and.w	ip, ip, r2
 8000f04:	f8cd c0b8 	str.w	ip, [sp, #184]	; 0xb8
 8000f08:	400b      	ands	r3, r1
 8000f0a:	932f      	str	r3, [sp, #188]	; 0xbc
 8000f0c:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8000f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f14:	e9dd 012e 	ldrd	r0, r1, [sp, #184]	; 0xb8
 8000f18:	4684      	mov	ip, r0
 8000f1a:	ea82 0c0c 	eor.w	ip, r2, ip
 8000f1e:	f8cd c4e8 	str.w	ip, [sp, #1256]	; 0x4e8
 8000f22:	404b      	eors	r3, r1
 8000f24:	f8cd 34ec 	str.w	r3, [sp, #1260]	; 0x4ec
 8000f28:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 8000f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f30:	f50d 6125 	add.w	r1, sp, #2640	; 0xa50
 8000f34:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 8000f38:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	43d1      	mvns	r1, r2
 8000f42:	9130      	str	r1, [sp, #192]	; 0xc0
 8000f44:	43db      	mvns	r3, r3
 8000f46:	9331      	str	r3, [sp, #196]	; 0xc4
 8000f48:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	e9dd 0130 	ldrd	r0, r1, [sp, #192]	; 0xc0
 8000f54:	4684      	mov	ip, r0
 8000f56:	ea0c 0c02 	and.w	ip, ip, r2
 8000f5a:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
 8000f5e:	400b      	ands	r3, r1
 8000f60:	9333      	str	r3, [sp, #204]	; 0xcc
 8000f62:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8000f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6a:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 8000f6e:	4684      	mov	ip, r0
 8000f70:	ea82 0c0c 	eor.w	ip, r2, ip
 8000f74:	f8cd c4f0 	str.w	ip, [sp, #1264]	; 0x4f0
 8000f78:	404b      	eors	r3, r1
 8000f7a:	f8cd 34f4 	str.w	r3, [sp, #1268]	; 0x4f4
 8000f7e:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f60d 2148 	addw	r1, sp, #2632	; 0xa48
 8000f8a:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 8000f8e:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	43d1      	mvns	r1, r2
 8000f98:	9134      	str	r1, [sp, #208]	; 0xd0
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	9335      	str	r3, [sp, #212]	; 0xd4
 8000f9e:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	e9dd 0134 	ldrd	r0, r1, [sp, #208]	; 0xd0
 8000faa:	4684      	mov	ip, r0
 8000fac:	ea0c 0c02 	and.w	ip, ip, r2
 8000fb0:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
 8000fb4:	400b      	ands	r3, r1
 8000fb6:	9337      	str	r3, [sp, #220]	; 0xdc
 8000fb8:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	e9dd 0136 	ldrd	r0, r1, [sp, #216]	; 0xd8
 8000fc4:	4684      	mov	ip, r0
 8000fc6:	ea82 0c0c 	eor.w	ip, r2, ip
 8000fca:	f8cd c4f8 	str.w	ip, [sp, #1272]	; 0x4f8
 8000fce:	404b      	eors	r3, r1
 8000fd0:	f8cd 34fc 	str.w	r3, [sp, #1276]	; 0x4fc
 8000fd4:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f50d 6124 	add.w	r1, sp, #2624	; 0xa40
 8000fe0:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 8000fe4:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8000fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fec:	43d1      	mvns	r1, r2
 8000fee:	9138      	str	r1, [sp, #224]	; 0xe0
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	9339      	str	r3, [sp, #228]	; 0xe4
 8000ff4:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	e9dd 0138 	ldrd	r0, r1, [sp, #224]	; 0xe0
 8001000:	4684      	mov	ip, r0
 8001002:	ea0c 0c02 	and.w	ip, ip, r2
 8001006:	f8cd c0e8 	str.w	ip, [sp, #232]	; 0xe8
 800100a:	400b      	ands	r3, r1
 800100c:	933b      	str	r3, [sp, #236]	; 0xec
 800100e:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	e9dd 013a 	ldrd	r0, r1, [sp, #232]	; 0xe8
 800101a:	4684      	mov	ip, r0
 800101c:	ea82 0c0c 	eor.w	ip, r2, ip
 8001020:	f8cd c500 	str.w	ip, [sp, #1280]	; 0x500
 8001024:	404b      	eors	r3, r1
 8001026:	f8cd 3504 	str.w	r3, [sp, #1284]	; 0x504
 800102a:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
 8001036:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 800103a:	f60d 3358 	addw	r3, sp, #2904	; 0xb58
 800103e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001042:	f60d 2368 	addw	r3, sp, #2664	; 0xa68
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	ea80 0c02 	eor.w	ip, r0, r2
 800104e:	f8cd c508 	str.w	ip, [sp, #1288]	; 0x508
 8001052:	404b      	eors	r3, r1
 8001054:	f8cd 350c 	str.w	r3, [sp, #1292]	; 0x50c
 8001058:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
 8001064:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 8001068:	f8dd 3b58 	ldr.w	r3, [sp, #2904]	; 0xb58
 800106c:	091a      	lsrs	r2, r3, #4
 800106e:	f8dd 3b5c 	ldr.w	r3, [sp, #2908]	; 0xb5c
 8001072:	071b      	lsls	r3, r3, #28
 8001074:	4313      	orrs	r3, r2
 8001076:	f8cd 3514 	str.w	r3, [sp, #1300]	; 0x514
 800107a:	f8dd 3b5c 	ldr.w	r3, [sp, #2908]	; 0xb5c
 800107e:	091a      	lsrs	r2, r3, #4
 8001080:	f8dd 3b58 	ldr.w	r3, [sp, #2904]	; 0xb58
 8001084:	071b      	lsls	r3, r3, #28
 8001086:	4313      	orrs	r3, r2
 8001088:	f8cd 3510 	str.w	r3, [sp, #1296]	; 0x510
 800108c:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f60d 21a8 	addw	r1, sp, #2728	; 0xaa8
 8001098:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 800109c:	f60d 3328 	addw	r3, sp, #2856	; 0xb28
 80010a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010a4:	f50d 6326 	add.w	r3, sp, #2656	; 0xa60
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	ea80 0c02 	eor.w	ip, r0, r2
 80010b0:	f8cd c518 	str.w	ip, [sp, #1304]	; 0x518
 80010b4:	404b      	eors	r3, r1
 80010b6:	f8cd 351c 	str.w	r3, [sp, #1308]	; 0x51c
 80010ba:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
 80010c6:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 80010ca:	f8dd 3b28 	ldr.w	r3, [sp, #2856]	; 0xb28
 80010ce:	0b1a      	lsrs	r2, r3, #12
 80010d0:	f8dd 3b2c 	ldr.w	r3, [sp, #2860]	; 0xb2c
 80010d4:	051b      	lsls	r3, r3, #20
 80010d6:	4313      	orrs	r3, r2
 80010d8:	f8cd 3524 	str.w	r3, [sp, #1316]	; 0x524
 80010dc:	f8dd 3b2c 	ldr.w	r3, [sp, #2860]	; 0xb2c
 80010e0:	0b1a      	lsrs	r2, r3, #12
 80010e2:	f8dd 3b28 	ldr.w	r3, [sp, #2856]	; 0xb28
 80010e6:	051b      	lsls	r3, r3, #20
 80010e8:	4313      	orrs	r3, r2
 80010ea:	f8cd 3520 	str.w	r3, [sp, #1312]	; 0x520
 80010ee:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f50d 612a 	add.w	r1, sp, #2720	; 0xaa0
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 80010fe:	f50d 6332 	add.w	r3, sp, #2848	; 0xb20
 8001102:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001106:	f50d 6328 	add.w	r3, sp, #2688	; 0xa80
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	ea80 0c02 	eor.w	ip, r0, r2
 8001112:	f8cd c528 	str.w	ip, [sp, #1320]	; 0x528
 8001116:	404b      	eors	r3, r1
 8001118:	f8cd 352c 	str.w	r3, [sp, #1324]	; 0x52c
 800111c:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f50d 6132 	add.w	r1, sp, #2848	; 0xb20
 8001128:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 800112c:	f8dd 3b20 	ldr.w	r3, [sp, #2848]	; 0xb20
 8001130:	0f5a      	lsrs	r2, r3, #29
 8001132:	f8dd 3b24 	ldr.w	r3, [sp, #2852]	; 0xb24
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4313      	orrs	r3, r2
 800113a:	f8cd 3534 	str.w	r3, [sp, #1332]	; 0x534
 800113e:	f8dd 3b24 	ldr.w	r3, [sp, #2852]	; 0xb24
 8001142:	0f5a      	lsrs	r2, r3, #29
 8001144:	f8dd 3b20 	ldr.w	r3, [sp, #2848]	; 0xb20
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	4313      	orrs	r3, r2
 800114c:	f8cd 3530 	str.w	r3, [sp, #1328]	; 0x530
 8001150:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
 800115c:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 8001160:	f50d 632f 	add.w	r3, sp, #2800	; 0xaf0
 8001164:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001168:	f60d 2378 	addw	r3, sp, #2680	; 0xa78
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	ea80 0c02 	eor.w	ip, r0, r2
 8001174:	f8cd c538 	str.w	ip, [sp, #1336]	; 0x538
 8001178:	404b      	eors	r3, r1
 800117a:	f8cd 353c 	str.w	r3, [sp, #1340]	; 0x53c
 800117e:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f50d 612f 	add.w	r1, sp, #2800	; 0xaf0
 800118a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 800118e:	f8dd 3af4 	ldr.w	r3, [sp, #2804]	; 0xaf4
 8001192:	035a      	lsls	r2, r3, #13
 8001194:	f8dd 3af0 	ldr.w	r3, [sp, #2800]	; 0xaf0
 8001198:	0cdb      	lsrs	r3, r3, #19
 800119a:	4313      	orrs	r3, r2
 800119c:	f8cd 3540 	str.w	r3, [sp, #1344]	; 0x540
 80011a0:	f8dd 3af0 	ldr.w	r3, [sp, #2800]	; 0xaf0
 80011a4:	035a      	lsls	r2, r3, #13
 80011a6:	f8dd 3af4 	ldr.w	r3, [sp, #2804]	; 0xaf4
 80011aa:	0cdb      	lsrs	r3, r3, #19
 80011ac:	4313      	orrs	r3, r2
 80011ae:	f8cd 3544 	str.w	r3, [sp, #1348]	; 0x544
 80011b2:	e001      	b.n	80011b8 <KeccakF1600_StatePermute+0xb50>
 80011b4:	08007590 	.word	0x08007590
 80011b8:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f50d 6129 	add.w	r1, sp, #2704	; 0xa90
 80011c4:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 80011c8:	f50d 632c 	add.w	r3, sp, #2752	; 0xac0
 80011cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011d0:	f50d 6327 	add.w	r3, sp, #2672	; 0xa70
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	ea80 0c02 	eor.w	ip, r0, r2
 80011dc:	f8cd c548 	str.w	ip, [sp, #1352]	; 0x548
 80011e0:	404b      	eors	r3, r1
 80011e2:	f8cd 354c 	str.w	r3, [sp, #1356]	; 0x54c
 80011e6:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	f50d 612c 	add.w	r1, sp, #2752	; 0xac0
 80011f2:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 80011f6:	f8dd 3ac4 	ldr.w	r3, [sp, #2756]	; 0xac4
 80011fa:	075a      	lsls	r2, r3, #29
 80011fc:	f8dd 3ac0 	ldr.w	r3, [sp, #2752]	; 0xac0
 8001200:	08db      	lsrs	r3, r3, #3
 8001202:	4313      	orrs	r3, r2
 8001204:	f8cd 3550 	str.w	r3, [sp, #1360]	; 0x550
 8001208:	f8dd 3ac0 	ldr.w	r3, [sp, #2752]	; 0xac0
 800120c:	075a      	lsls	r2, r3, #29
 800120e:	f8dd 3ac4 	ldr.w	r3, [sp, #2756]	; 0xac4
 8001212:	08db      	lsrs	r3, r3, #3
 8001214:	4313      	orrs	r3, r2
 8001216:	f8cd 3554 	str.w	r3, [sp, #1364]	; 0x554
 800121a:	f50d 63aa 	add.w	r3, sp, #1360	; 0x550
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f60d 2188 	addw	r1, sp, #2696	; 0xa88
 8001226:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 800122a:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	43d1      	mvns	r1, r2
 8001234:	913c      	str	r1, [sp, #240]	; 0xf0
 8001236:	43db      	mvns	r3, r3
 8001238:	933d      	str	r3, [sp, #244]	; 0xf4
 800123a:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	e9dd 013c 	ldrd	r0, r1, [sp, #240]	; 0xf0
 8001246:	4684      	mov	ip, r0
 8001248:	ea0c 0c02 	and.w	ip, ip, r2
 800124c:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
 8001250:	400b      	ands	r3, r1
 8001252:	933f      	str	r3, [sp, #252]	; 0xfc
 8001254:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	e9dd 013e 	ldrd	r0, r1, [sp, #248]	; 0xf8
 8001260:	4684      	mov	ip, r0
 8001262:	ea82 0c0c 	eor.w	ip, r2, ip
 8001266:	f8cd c558 	str.w	ip, [sp, #1368]	; 0x558
 800126a:	404b      	eors	r3, r1
 800126c:	f8cd 355c 	str.w	r3, [sp, #1372]	; 0x55c
 8001270:	f50d 63ab 	add.w	r3, sp, #1368	; 0x558
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	f50d 6123 	add.w	r1, sp, #2608	; 0xa30
 800127c:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 8001280:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	43d1      	mvns	r1, r2
 800128a:	9140      	str	r1, [sp, #256]	; 0x100
 800128c:	43db      	mvns	r3, r3
 800128e:	9341      	str	r3, [sp, #260]	; 0x104
 8001290:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	e9dd 0140 	ldrd	r0, r1, [sp, #256]	; 0x100
 800129c:	4684      	mov	ip, r0
 800129e:	ea0c 0c02 	and.w	ip, ip, r2
 80012a2:	f8cd c108 	str.w	ip, [sp, #264]	; 0x108
 80012a6:	400b      	ands	r3, r1
 80012a8:	9343      	str	r3, [sp, #268]	; 0x10c
 80012aa:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 80012ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b2:	e9dd 0142 	ldrd	r0, r1, [sp, #264]	; 0x108
 80012b6:	4684      	mov	ip, r0
 80012b8:	ea82 0c0c 	eor.w	ip, r2, ip
 80012bc:	f8cd c560 	str.w	ip, [sp, #1376]	; 0x560
 80012c0:	404b      	eors	r3, r1
 80012c2:	f8cd 3564 	str.w	r3, [sp, #1380]	; 0x564
 80012c6:	f50d 63ac 	add.w	r3, sp, #1376	; 0x560
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f60d 2128 	addw	r1, sp, #2600	; 0xa28
 80012d2:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 80012d6:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	43d1      	mvns	r1, r2
 80012e0:	9144      	str	r1, [sp, #272]	; 0x110
 80012e2:	43db      	mvns	r3, r3
 80012e4:	9345      	str	r3, [sp, #276]	; 0x114
 80012e6:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	e9dd 0144 	ldrd	r0, r1, [sp, #272]	; 0x110
 80012f2:	4684      	mov	ip, r0
 80012f4:	ea0c 0c02 	and.w	ip, ip, r2
 80012f8:	f8cd c118 	str.w	ip, [sp, #280]	; 0x118
 80012fc:	400b      	ands	r3, r1
 80012fe:	9347      	str	r3, [sp, #284]	; 0x11c
 8001300:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	e9dd 0146 	ldrd	r0, r1, [sp, #280]	; 0x118
 800130c:	4684      	mov	ip, r0
 800130e:	ea82 0c0c 	eor.w	ip, r2, ip
 8001312:	f8cd c568 	str.w	ip, [sp, #1384]	; 0x568
 8001316:	404b      	eors	r3, r1
 8001318:	f8cd 356c 	str.w	r3, [sp, #1388]	; 0x56c
 800131c:	f50d 63ad 	add.w	r3, sp, #1384	; 0x568
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f50d 6122 	add.w	r1, sp, #2592	; 0xa20
 8001328:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 800132c:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	43d1      	mvns	r1, r2
 8001336:	9148      	str	r1, [sp, #288]	; 0x120
 8001338:	43db      	mvns	r3, r3
 800133a:	9349      	str	r3, [sp, #292]	; 0x124
 800133c:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8001348:	4684      	mov	ip, r0
 800134a:	ea0c 0c02 	and.w	ip, ip, r2
 800134e:	f8cd c128 	str.w	ip, [sp, #296]	; 0x128
 8001352:	400b      	ands	r3, r1
 8001354:	934b      	str	r3, [sp, #300]	; 0x12c
 8001356:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 800135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8001362:	4684      	mov	ip, r0
 8001364:	ea82 0c0c 	eor.w	ip, r2, ip
 8001368:	f8cd c570 	str.w	ip, [sp, #1392]	; 0x570
 800136c:	404b      	eors	r3, r1
 800136e:	f8cd 3574 	str.w	r3, [sp, #1396]	; 0x574
 8001372:	f50d 63ae 	add.w	r3, sp, #1392	; 0x570
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f60d 2118 	addw	r1, sp, #2584	; 0xa18
 800137e:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 8001382:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	43d1      	mvns	r1, r2
 800138c:	914c      	str	r1, [sp, #304]	; 0x130
 800138e:	43db      	mvns	r3, r3
 8001390:	934d      	str	r3, [sp, #308]	; 0x134
 8001392:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	e9dd 014c 	ldrd	r0, r1, [sp, #304]	; 0x130
 800139e:	4684      	mov	ip, r0
 80013a0:	ea0c 0c02 	and.w	ip, ip, r2
 80013a4:	f8cd c138 	str.w	ip, [sp, #312]	; 0x138
 80013a8:	400b      	ands	r3, r1
 80013aa:	934f      	str	r3, [sp, #316]	; 0x13c
 80013ac:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	e9dd 014e 	ldrd	r0, r1, [sp, #312]	; 0x138
 80013b8:	4684      	mov	ip, r0
 80013ba:	ea82 0c0c 	eor.w	ip, r2, ip
 80013be:	f8cd c578 	str.w	ip, [sp, #1400]	; 0x578
 80013c2:	404b      	eors	r3, r1
 80013c4:	f8cd 357c 	str.w	r3, [sp, #1404]	; 0x57c
 80013c8:	f50d 63af 	add.w	r3, sp, #1400	; 0x578
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f50d 6121 	add.w	r1, sp, #2576	; 0xa10
 80013d4:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 80013d8:	f60d 3368 	addw	r3, sp, #2920	; 0xb68
 80013dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013e0:	f60d 2378 	addw	r3, sp, #2680	; 0xa78
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	ea80 0c02 	eor.w	ip, r0, r2
 80013ec:	f8cd c580 	str.w	ip, [sp, #1408]	; 0x580
 80013f0:	404b      	eors	r3, r1
 80013f2:	f8cd 3584 	str.w	r3, [sp, #1412]	; 0x584
 80013f6:	f50d 63b0 	add.w	r3, sp, #1408	; 0x580
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f60d 3168 	addw	r1, sp, #2920	; 0xb68
 8001402:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 8001406:	f8dd 3b68 	ldr.w	r3, [sp, #2920]	; 0xb68
 800140a:	0fda      	lsrs	r2, r3, #31
 800140c:	f8dd 3b6c 	ldr.w	r3, [sp, #2924]	; 0xb6c
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4313      	orrs	r3, r2
 8001414:	f8cd 358c 	str.w	r3, [sp, #1420]	; 0x58c
 8001418:	f8dd 3b6c 	ldr.w	r3, [sp, #2924]	; 0xb6c
 800141c:	0fda      	lsrs	r2, r3, #31
 800141e:	f8dd 3b68 	ldr.w	r3, [sp, #2920]	; 0xb68
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4313      	orrs	r3, r2
 8001426:	f8cd 3588 	str.w	r3, [sp, #1416]	; 0x588
 800142a:	f50d 63b1 	add.w	r3, sp, #1416	; 0x588
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f60d 21a8 	addw	r1, sp, #2728	; 0xaa8
 8001436:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 800143a:	f60d 3338 	addw	r3, sp, #2872	; 0xb38
 800143e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001442:	f50d 6327 	add.w	r3, sp, #2672	; 0xa70
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	ea80 0c02 	eor.w	ip, r0, r2
 800144e:	f8cd c590 	str.w	ip, [sp, #1424]	; 0x590
 8001452:	404b      	eors	r3, r1
 8001454:	f8cd 3594 	str.w	r3, [sp, #1428]	; 0x594
 8001458:	f50d 63b2 	add.w	r3, sp, #1424	; 0x590
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f60d 3138 	addw	r1, sp, #2872	; 0xb38
 8001464:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 8001468:	f8dd 3b38 	ldr.w	r3, [sp, #2872]	; 0xb38
 800146c:	0e9a      	lsrs	r2, r3, #26
 800146e:	f8dd 3b3c 	ldr.w	r3, [sp, #2876]	; 0xb3c
 8001472:	019b      	lsls	r3, r3, #6
 8001474:	4313      	orrs	r3, r2
 8001476:	f8cd 359c 	str.w	r3, [sp, #1436]	; 0x59c
 800147a:	f8dd 3b3c 	ldr.w	r3, [sp, #2876]	; 0xb3c
 800147e:	0e9a      	lsrs	r2, r3, #26
 8001480:	f8dd 3b38 	ldr.w	r3, [sp, #2872]	; 0xb38
 8001484:	019b      	lsls	r3, r3, #6
 8001486:	4313      	orrs	r3, r2
 8001488:	f8cd 3598 	str.w	r3, [sp, #1432]	; 0x598
 800148c:	f50d 63b3 	add.w	r3, sp, #1432	; 0x598
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f50d 612a 	add.w	r1, sp, #2720	; 0xaa0
 8001498:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 800149c:	f60d 3308 	addw	r3, sp, #2824	; 0xb08
 80014a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014a4:	f60d 2368 	addw	r3, sp, #2664	; 0xa68
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	ea80 0c02 	eor.w	ip, r0, r2
 80014b0:	f8cd c5a0 	str.w	ip, [sp, #1440]	; 0x5a0
 80014b4:	404b      	eors	r3, r1
 80014b6:	f8cd 35a4 	str.w	r3, [sp, #1444]	; 0x5a4
 80014ba:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f60d 3108 	addw	r1, sp, #2824	; 0xb08
 80014c6:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 80014ca:	f8dd 3b08 	ldr.w	r3, [sp, #2824]	; 0xb08
 80014ce:	09da      	lsrs	r2, r3, #7
 80014d0:	f8dd 3b0c 	ldr.w	r3, [sp, #2828]	; 0xb0c
 80014d4:	065b      	lsls	r3, r3, #25
 80014d6:	4313      	orrs	r3, r2
 80014d8:	f8cd 35ac 	str.w	r3, [sp, #1452]	; 0x5ac
 80014dc:	f8dd 3b0c 	ldr.w	r3, [sp, #2828]	; 0xb0c
 80014e0:	09da      	lsrs	r2, r3, #7
 80014e2:	f8dd 3b08 	ldr.w	r3, [sp, #2824]	; 0xb08
 80014e6:	065b      	lsls	r3, r3, #25
 80014e8:	4313      	orrs	r3, r2
 80014ea:	f8cd 35a8 	str.w	r3, [sp, #1448]	; 0x5a8
 80014ee:	f50d 63b5 	add.w	r3, sp, #1448	; 0x5a8
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
 80014fa:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 80014fe:	f60d 23d8 	addw	r3, sp, #2776	; 0xad8
 8001502:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001506:	f50d 6326 	add.w	r3, sp, #2656	; 0xa60
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	ea80 0c02 	eor.w	ip, r0, r2
 8001512:	f8cd c5b0 	str.w	ip, [sp, #1456]	; 0x5b0
 8001516:	404b      	eors	r3, r1
 8001518:	f8cd 35b4 	str.w	r3, [sp, #1460]	; 0x5b4
 800151c:	f50d 63b6 	add.w	r3, sp, #1456	; 0x5b0
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	f60d 21d8 	addw	r1, sp, #2776	; 0xad8
 8001528:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 800152c:	f8dd 3ad8 	ldr.w	r3, [sp, #2776]	; 0xad8
 8001530:	0e1a      	lsrs	r2, r3, #24
 8001532:	f8dd 3adc 	ldr.w	r3, [sp, #2780]	; 0xadc
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	4313      	orrs	r3, r2
 800153a:	f8cd 35bc 	str.w	r3, [sp, #1468]	; 0x5bc
 800153e:	f8dd 3adc 	ldr.w	r3, [sp, #2780]	; 0xadc
 8001542:	0e1a      	lsrs	r2, r3, #24
 8001544:	f8dd 3ad8 	ldr.w	r3, [sp, #2776]	; 0xad8
 8001548:	021b      	lsls	r3, r3, #8
 800154a:	4313      	orrs	r3, r2
 800154c:	f8cd 35b8 	str.w	r3, [sp, #1464]	; 0x5b8
 8001550:	f50d 63b7 	add.w	r3, sp, #1464	; 0x5b8
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f50d 6129 	add.w	r1, sp, #2704	; 0xa90
 800155c:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 8001560:	f50d 632d 	add.w	r3, sp, #2768	; 0xad0
 8001564:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001568:	f50d 6328 	add.w	r3, sp, #2688	; 0xa80
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	ea80 0c02 	eor.w	ip, r0, r2
 8001574:	f8cd c5c0 	str.w	ip, [sp, #1472]	; 0x5c0
 8001578:	404b      	eors	r3, r1
 800157a:	f8cd 35c4 	str.w	r3, [sp, #1476]	; 0x5c4
 800157e:	f50d 63b8 	add.w	r3, sp, #1472	; 0x5c0
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f50d 612d 	add.w	r1, sp, #2768	; 0xad0
 800158a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 800158e:	f8dd 3ad0 	ldr.w	r3, [sp, #2768]	; 0xad0
 8001592:	0b9a      	lsrs	r2, r3, #14
 8001594:	f8dd 3ad4 	ldr.w	r3, [sp, #2772]	; 0xad4
 8001598:	049b      	lsls	r3, r3, #18
 800159a:	4313      	orrs	r3, r2
 800159c:	f8cd 35cc 	str.w	r3, [sp, #1484]	; 0x5cc
 80015a0:	f8dd 3ad4 	ldr.w	r3, [sp, #2772]	; 0xad4
 80015a4:	0b9a      	lsrs	r2, r3, #14
 80015a6:	f8dd 3ad0 	ldr.w	r3, [sp, #2768]	; 0xad0
 80015aa:	049b      	lsls	r3, r3, #18
 80015ac:	4313      	orrs	r3, r2
 80015ae:	f8cd 35c8 	str.w	r3, [sp, #1480]	; 0x5c8
 80015b2:	f50d 63b9 	add.w	r3, sp, #1480	; 0x5c8
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f60d 2188 	addw	r1, sp, #2696	; 0xa88
 80015be:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 80015c2:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	43d1      	mvns	r1, r2
 80015cc:	9150      	str	r1, [sp, #320]	; 0x140
 80015ce:	43db      	mvns	r3, r3
 80015d0:	9351      	str	r3, [sp, #324]	; 0x144
 80015d2:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	e9dd 0150 	ldrd	r0, r1, [sp, #320]	; 0x140
 80015de:	4684      	mov	ip, r0
 80015e0:	ea0c 0c02 	and.w	ip, ip, r2
 80015e4:	f8cd c148 	str.w	ip, [sp, #328]	; 0x148
 80015e8:	400b      	ands	r3, r1
 80015ea:	9353      	str	r3, [sp, #332]	; 0x14c
 80015ec:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	e9dd 0152 	ldrd	r0, r1, [sp, #328]	; 0x148
 80015f8:	4684      	mov	ip, r0
 80015fa:	ea82 0c0c 	eor.w	ip, r2, ip
 80015fe:	f8cd c5d0 	str.w	ip, [sp, #1488]	; 0x5d0
 8001602:	404b      	eors	r3, r1
 8001604:	f8cd 35d4 	str.w	r3, [sp, #1492]	; 0x5d4
 8001608:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
 8001614:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 8001618:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	43d1      	mvns	r1, r2
 8001622:	9154      	str	r1, [sp, #336]	; 0x150
 8001624:	43db      	mvns	r3, r3
 8001626:	9355      	str	r3, [sp, #340]	; 0x154
 8001628:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	e9dd 0154 	ldrd	r0, r1, [sp, #336]	; 0x150
 8001634:	4684      	mov	ip, r0
 8001636:	ea0c 0c02 	and.w	ip, ip, r2
 800163a:	f8cd c158 	str.w	ip, [sp, #344]	; 0x158
 800163e:	400b      	ands	r3, r1
 8001640:	9357      	str	r3, [sp, #348]	; 0x15c
 8001642:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 800164e:	4684      	mov	ip, r0
 8001650:	ea82 0c0c 	eor.w	ip, r2, ip
 8001654:	f8cd c5d8 	str.w	ip, [sp, #1496]	; 0x5d8
 8001658:	404b      	eors	r3, r1
 800165a:	f8cd 35dc 	str.w	r3, [sp, #1500]	; 0x5dc
 800165e:	f50d 63bb 	add.w	r3, sp, #1496	; 0x5d8
 8001662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001666:	f50d 6120 	add.w	r1, sp, #2560	; 0xa00
 800166a:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 800166e:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	43d1      	mvns	r1, r2
 8001678:	9158      	str	r1, [sp, #352]	; 0x160
 800167a:	43db      	mvns	r3, r3
 800167c:	9359      	str	r3, [sp, #356]	; 0x164
 800167e:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	e9dd 0158 	ldrd	r0, r1, [sp, #352]	; 0x160
 800168a:	4684      	mov	ip, r0
 800168c:	ea0c 0c02 	and.w	ip, ip, r2
 8001690:	f8cd c168 	str.w	ip, [sp, #360]	; 0x168
 8001694:	400b      	ands	r3, r1
 8001696:	935b      	str	r3, [sp, #364]	; 0x16c
 8001698:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	e9dd 015a 	ldrd	r0, r1, [sp, #360]	; 0x168
 80016a4:	4684      	mov	ip, r0
 80016a6:	ea82 0c0c 	eor.w	ip, r2, ip
 80016aa:	f8cd c5e0 	str.w	ip, [sp, #1504]	; 0x5e0
 80016ae:	404b      	eors	r3, r1
 80016b0:	f8cd 35e4 	str.w	r3, [sp, #1508]	; 0x5e4
 80016b4:	f50d 63bc 	add.w	r3, sp, #1504	; 0x5e0
 80016b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016bc:	f60d 11f8 	addw	r1, sp, #2552	; 0x9f8
 80016c0:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 80016c4:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	43d1      	mvns	r1, r2
 80016ce:	915c      	str	r1, [sp, #368]	; 0x170
 80016d0:	43db      	mvns	r3, r3
 80016d2:	935d      	str	r3, [sp, #372]	; 0x174
 80016d4:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	e9dd 015c 	ldrd	r0, r1, [sp, #368]	; 0x170
 80016e0:	4684      	mov	ip, r0
 80016e2:	ea0c 0c02 	and.w	ip, ip, r2
 80016e6:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
 80016ea:	400b      	ands	r3, r1
 80016ec:	935f      	str	r3, [sp, #380]	; 0x17c
 80016ee:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 80016fa:	4684      	mov	ip, r0
 80016fc:	ea82 0c0c 	eor.w	ip, r2, ip
 8001700:	f8cd c5e8 	str.w	ip, [sp, #1512]	; 0x5e8
 8001704:	404b      	eors	r3, r1
 8001706:	f8cd 35ec 	str.w	r3, [sp, #1516]	; 0x5ec
 800170a:	f50d 63bd 	add.w	r3, sp, #1512	; 0x5e8
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f50d 611f 	add.w	r1, sp, #2544	; 0x9f0
 8001716:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 800171a:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	43d1      	mvns	r1, r2
 8001724:	9160      	str	r1, [sp, #384]	; 0x180
 8001726:	43db      	mvns	r3, r3
 8001728:	9361      	str	r3, [sp, #388]	; 0x184
 800172a:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	e9dd 0160 	ldrd	r0, r1, [sp, #384]	; 0x180
 8001736:	4684      	mov	ip, r0
 8001738:	ea0c 0c02 	and.w	ip, ip, r2
 800173c:	f8cd c188 	str.w	ip, [sp, #392]	; 0x188
 8001740:	400b      	ands	r3, r1
 8001742:	9363      	str	r3, [sp, #396]	; 0x18c
 8001744:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	e9dd 0162 	ldrd	r0, r1, [sp, #392]	; 0x188
 8001750:	4684      	mov	ip, r0
 8001752:	ea82 0c0c 	eor.w	ip, r2, ip
 8001756:	f8cd c5f0 	str.w	ip, [sp, #1520]	; 0x5f0
 800175a:	404b      	eors	r3, r1
 800175c:	f8cd 35f4 	str.w	r3, [sp, #1524]	; 0x5f4
 8001760:	f50d 63be 	add.w	r3, sp, #1520	; 0x5f0
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f60d 11e8 	addw	r1, sp, #2536	; 0x9e8
 800176c:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 8001770:	f50d 6335 	add.w	r3, sp, #2896	; 0xb50
 8001774:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001778:	f50d 6326 	add.w	r3, sp, #2656	; 0xa60
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	ea80 0c02 	eor.w	ip, r0, r2
 8001784:	f8cd c5f8 	str.w	ip, [sp, #1528]	; 0x5f8
 8001788:	404b      	eors	r3, r1
 800178a:	f8cd 35fc 	str.w	r3, [sp, #1532]	; 0x5fc
 800178e:	f50d 63bf 	add.w	r3, sp, #1528	; 0x5f8
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f50d 6135 	add.w	r1, sp, #2896	; 0xb50
 800179a:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 800179e:	f8dd 3b50 	ldr.w	r3, [sp, #2896]	; 0xb50
 80017a2:	095a      	lsrs	r2, r3, #5
 80017a4:	f8dd 3b54 	ldr.w	r3, [sp, #2900]	; 0xb54
 80017a8:	06db      	lsls	r3, r3, #27
 80017aa:	4313      	orrs	r3, r2
 80017ac:	f8cd 3604 	str.w	r3, [sp, #1540]	; 0x604
 80017b0:	f8dd 3b54 	ldr.w	r3, [sp, #2900]	; 0xb54
 80017b4:	095a      	lsrs	r2, r3, #5
 80017b6:	f8dd 3b50 	ldr.w	r3, [sp, #2896]	; 0xb50
 80017ba:	06db      	lsls	r3, r3, #27
 80017bc:	4313      	orrs	r3, r2
 80017be:	f8cd 3600 	str.w	r3, [sp, #1536]	; 0x600
 80017c2:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f60d 21a8 	addw	r1, sp, #2728	; 0xaa8
 80017ce:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 80017d2:	f60d 3348 	addw	r3, sp, #2888	; 0xb48
 80017d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017da:	f50d 6328 	add.w	r3, sp, #2688	; 0xa80
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	ea80 0c02 	eor.w	ip, r0, r2
 80017e6:	f8cd c608 	str.w	ip, [sp, #1544]	; 0x608
 80017ea:	404b      	eors	r3, r1
 80017ec:	f8cd 360c 	str.w	r3, [sp, #1548]	; 0x60c
 80017f0:	f50d 63c1 	add.w	r3, sp, #1544	; 0x608
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f60d 3148 	addw	r1, sp, #2888	; 0xb48
 80017fc:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 8001800:	f8dd 3b4c 	ldr.w	r3, [sp, #2892]	; 0xb4c
 8001804:	011a      	lsls	r2, r3, #4
 8001806:	f8dd 3b48 	ldr.w	r3, [sp, #2888]	; 0xb48
 800180a:	0f1b      	lsrs	r3, r3, #28
 800180c:	4313      	orrs	r3, r2
 800180e:	f8cd 3610 	str.w	r3, [sp, #1552]	; 0x610
 8001812:	f8dd 3b48 	ldr.w	r3, [sp, #2888]	; 0xb48
 8001816:	011a      	lsls	r2, r3, #4
 8001818:	f8dd 3b4c 	ldr.w	r3, [sp, #2892]	; 0xb4c
 800181c:	0f1b      	lsrs	r3, r3, #28
 800181e:	4313      	orrs	r3, r2
 8001820:	f8cd 3614 	str.w	r3, [sp, #1556]	; 0x614
 8001824:	f50d 63c2 	add.w	r3, sp, #1552	; 0x610
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f50d 612a 	add.w	r1, sp, #2720	; 0xaa0
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 8001834:	f60d 3318 	addw	r3, sp, #2840	; 0xb18
 8001838:	e9d3 0100 	ldrd	r0, r1, [r3]
 800183c:	f60d 2378 	addw	r3, sp, #2680	; 0xa78
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	ea80 0c02 	eor.w	ip, r0, r2
 8001848:	f8cd c618 	str.w	ip, [sp, #1560]	; 0x618
 800184c:	404b      	eors	r3, r1
 800184e:	f8cd 361c 	str.w	r3, [sp, #1564]	; 0x61c
 8001852:	f50d 63c3 	add.w	r3, sp, #1560	; 0x618
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f60d 3118 	addw	r1, sp, #2840	; 0xb18
 800185e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 8001862:	f8dd 3b18 	ldr.w	r3, [sp, #2840]	; 0xb18
 8001866:	0d9a      	lsrs	r2, r3, #22
 8001868:	f8dd 3b1c 	ldr.w	r3, [sp, #2844]	; 0xb1c
 800186c:	029b      	lsls	r3, r3, #10
 800186e:	4313      	orrs	r3, r2
 8001870:	f8cd 3624 	str.w	r3, [sp, #1572]	; 0x624
 8001874:	f8dd 3b1c 	ldr.w	r3, [sp, #2844]	; 0xb1c
 8001878:	0d9a      	lsrs	r2, r3, #22
 800187a:	f8dd 3b18 	ldr.w	r3, [sp, #2840]	; 0xb18
 800187e:	029b      	lsls	r3, r3, #10
 8001880:	4313      	orrs	r3, r2
 8001882:	f8cd 3620 	str.w	r3, [sp, #1568]	; 0x620
 8001886:	f50d 63c4 	add.w	r3, sp, #1568	; 0x620
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
 8001892:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 8001896:	f60d 23e8 	addw	r3, sp, #2792	; 0xae8
 800189a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800189e:	f50d 6327 	add.w	r3, sp, #2672	; 0xa70
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	ea80 0c02 	eor.w	ip, r0, r2
 80018aa:	f8cd c628 	str.w	ip, [sp, #1576]	; 0x628
 80018ae:	404b      	eors	r3, r1
 80018b0:	f8cd 362c 	str.w	r3, [sp, #1580]	; 0x62c
 80018b4:	f50d 63c5 	add.w	r3, sp, #1576	; 0x628
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f60d 21e8 	addw	r1, sp, #2792	; 0xae8
 80018c0:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 80018c4:	f8dd 3ae8 	ldr.w	r3, [sp, #2792]	; 0xae8
 80018c8:	0c5a      	lsrs	r2, r3, #17
 80018ca:	f8dd 3aec 	ldr.w	r3, [sp, #2796]	; 0xaec
 80018ce:	03db      	lsls	r3, r3, #15
 80018d0:	4313      	orrs	r3, r2
 80018d2:	f8cd 3634 	str.w	r3, [sp, #1588]	; 0x634
 80018d6:	f8dd 3aec 	ldr.w	r3, [sp, #2796]	; 0xaec
 80018da:	0c5a      	lsrs	r2, r3, #17
 80018dc:	f8dd 3ae8 	ldr.w	r3, [sp, #2792]	; 0xae8
 80018e0:	03db      	lsls	r3, r3, #15
 80018e2:	4313      	orrs	r3, r2
 80018e4:	f8cd 3630 	str.w	r3, [sp, #1584]	; 0x630
 80018e8:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f50d 6129 	add.w	r1, sp, #2704	; 0xa90
 80018f4:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 80018f8:	f60d 23b8 	addw	r3, sp, #2744	; 0xab8
 80018fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001900:	f60d 2368 	addw	r3, sp, #2664	; 0xa68
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	ea80 0c02 	eor.w	ip, r0, r2
 800190c:	f8cd c638 	str.w	ip, [sp, #1592]	; 0x638
 8001910:	404b      	eors	r3, r1
 8001912:	f8cd 363c 	str.w	r3, [sp, #1596]	; 0x63c
 8001916:	f50d 63c7 	add.w	r3, sp, #1592	; 0x638
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f60d 21b8 	addw	r1, sp, #2744	; 0xab8
 8001922:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 8001926:	f8dd 3abc 	ldr.w	r3, [sp, #2748]	; 0xabc
 800192a:	061a      	lsls	r2, r3, #24
 800192c:	f8dd 3ab8 	ldr.w	r3, [sp, #2744]	; 0xab8
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	4313      	orrs	r3, r2
 8001934:	f8cd 3640 	str.w	r3, [sp, #1600]	; 0x640
 8001938:	f8dd 3ab8 	ldr.w	r3, [sp, #2744]	; 0xab8
 800193c:	061a      	lsls	r2, r3, #24
 800193e:	f8dd 3abc 	ldr.w	r3, [sp, #2748]	; 0xabc
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	4313      	orrs	r3, r2
 8001946:	f8cd 3644 	str.w	r3, [sp, #1604]	; 0x644
 800194a:	f50d 63c8 	add.w	r3, sp, #1600	; 0x640
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f60d 2188 	addw	r1, sp, #2696	; 0xa88
 8001956:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 800195a:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	43d1      	mvns	r1, r2
 8001964:	9164      	str	r1, [sp, #400]	; 0x190
 8001966:	43db      	mvns	r3, r3
 8001968:	9365      	str	r3, [sp, #404]	; 0x194
 800196a:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	e9dd 0164 	ldrd	r0, r1, [sp, #400]	; 0x190
 8001976:	4684      	mov	ip, r0
 8001978:	ea0c 0c02 	and.w	ip, ip, r2
 800197c:	f8cd c198 	str.w	ip, [sp, #408]	; 0x198
 8001980:	400b      	ands	r3, r1
 8001982:	9367      	str	r3, [sp, #412]	; 0x19c
 8001984:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8001988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198c:	e9dd 0166 	ldrd	r0, r1, [sp, #408]	; 0x198
 8001990:	4684      	mov	ip, r0
 8001992:	ea82 0c0c 	eor.w	ip, r2, ip
 8001996:	f8cd c648 	str.w	ip, [sp, #1608]	; 0x648
 800199a:	404b      	eors	r3, r1
 800199c:	f8cd 364c 	str.w	r3, [sp, #1612]	; 0x64c
 80019a0:	f50d 63c9 	add.w	r3, sp, #1608	; 0x648
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f50d 611e 	add.w	r1, sp, #2528	; 0x9e0
 80019ac:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 80019b0:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	43d1      	mvns	r1, r2
 80019ba:	9168      	str	r1, [sp, #416]	; 0x1a0
 80019bc:	43db      	mvns	r3, r3
 80019be:	9369      	str	r3, [sp, #420]	; 0x1a4
 80019c0:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	e9dd 0168 	ldrd	r0, r1, [sp, #416]	; 0x1a0
 80019cc:	4684      	mov	ip, r0
 80019ce:	ea0c 0c02 	and.w	ip, ip, r2
 80019d2:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
 80019d6:	400b      	ands	r3, r1
 80019d8:	936b      	str	r3, [sp, #428]	; 0x1ac
 80019da:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	e9dd 016a 	ldrd	r0, r1, [sp, #424]	; 0x1a8
 80019e6:	4684      	mov	ip, r0
 80019e8:	ea82 0c0c 	eor.w	ip, r2, ip
 80019ec:	f8cd c650 	str.w	ip, [sp, #1616]	; 0x650
 80019f0:	404b      	eors	r3, r1
 80019f2:	f8cd 3654 	str.w	r3, [sp, #1620]	; 0x654
 80019f6:	f50d 63ca 	add.w	r3, sp, #1616	; 0x650
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f60d 11d8 	addw	r1, sp, #2520	; 0x9d8
 8001a02:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 8001a06:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	43d1      	mvns	r1, r2
 8001a10:	916c      	str	r1, [sp, #432]	; 0x1b0
 8001a12:	43db      	mvns	r3, r3
 8001a14:	936d      	str	r3, [sp, #436]	; 0x1b4
 8001a16:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	e9dd 016c 	ldrd	r0, r1, [sp, #432]	; 0x1b0
 8001a22:	4684      	mov	ip, r0
 8001a24:	ea0c 0c02 	and.w	ip, ip, r2
 8001a28:	f8cd c1b8 	str.w	ip, [sp, #440]	; 0x1b8
 8001a2c:	400b      	ands	r3, r1
 8001a2e:	936f      	str	r3, [sp, #444]	; 0x1bc
 8001a30:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	e9dd 016e 	ldrd	r0, r1, [sp, #440]	; 0x1b8
 8001a3c:	4684      	mov	ip, r0
 8001a3e:	ea82 0c0c 	eor.w	ip, r2, ip
 8001a42:	f8cd c658 	str.w	ip, [sp, #1624]	; 0x658
 8001a46:	404b      	eors	r3, r1
 8001a48:	f8cd 365c 	str.w	r3, [sp, #1628]	; 0x65c
 8001a4c:	f50d 63cb 	add.w	r3, sp, #1624	; 0x658
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f50d 611d 	add.w	r1, sp, #2512	; 0x9d0
 8001a58:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 8001a5c:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8001a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a64:	43d1      	mvns	r1, r2
 8001a66:	9170      	str	r1, [sp, #448]	; 0x1c0
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	9371      	str	r3, [sp, #452]	; 0x1c4
 8001a6c:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	e9dd 0170 	ldrd	r0, r1, [sp, #448]	; 0x1c0
 8001a78:	4684      	mov	ip, r0
 8001a7a:	ea0c 0c02 	and.w	ip, ip, r2
 8001a7e:	f8cd c1c8 	str.w	ip, [sp, #456]	; 0x1c8
 8001a82:	400b      	ands	r3, r1
 8001a84:	9373      	str	r3, [sp, #460]	; 0x1cc
 8001a86:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	e9dd 0172 	ldrd	r0, r1, [sp, #456]	; 0x1c8
 8001a92:	4684      	mov	ip, r0
 8001a94:	ea82 0c0c 	eor.w	ip, r2, ip
 8001a98:	f8cd c660 	str.w	ip, [sp, #1632]	; 0x660
 8001a9c:	404b      	eors	r3, r1
 8001a9e:	f8cd 3664 	str.w	r3, [sp, #1636]	; 0x664
 8001aa2:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f60d 11c8 	addw	r1, sp, #2504	; 0x9c8
 8001aae:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 8001ab2:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	43d1      	mvns	r1, r2
 8001abc:	9174      	str	r1, [sp, #464]	; 0x1d0
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	9375      	str	r3, [sp, #468]	; 0x1d4
 8001ac2:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	e9dd 0174 	ldrd	r0, r1, [sp, #464]	; 0x1d0
 8001ace:	4684      	mov	ip, r0
 8001ad0:	ea0c 0c02 	and.w	ip, ip, r2
 8001ad4:	f8cd c1d8 	str.w	ip, [sp, #472]	; 0x1d8
 8001ad8:	400b      	ands	r3, r1
 8001ada:	9377      	str	r3, [sp, #476]	; 0x1dc
 8001adc:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	e9dd 0176 	ldrd	r0, r1, [sp, #472]	; 0x1d8
 8001ae8:	4684      	mov	ip, r0
 8001aea:	ea82 0c0c 	eor.w	ip, r2, ip
 8001aee:	f8cd c668 	str.w	ip, [sp, #1640]	; 0x668
 8001af2:	404b      	eors	r3, r1
 8001af4:	f8cd 366c 	str.w	r3, [sp, #1644]	; 0x66c
 8001af8:	f50d 63cd 	add.w	r3, sp, #1640	; 0x668
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	f50d 611c 	add.w	r1, sp, #2496	; 0x9c0
 8001b04:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 8001b08:	f50d 6336 	add.w	r3, sp, #2912	; 0xb60
 8001b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b10:	f50d 6327 	add.w	r3, sp, #2672	; 0xa70
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	ea80 0c02 	eor.w	ip, r0, r2
 8001b1c:	f8cd c670 	str.w	ip, [sp, #1648]	; 0x670
 8001b20:	404b      	eors	r3, r1
 8001b22:	f8cd 3674 	str.w	r3, [sp, #1652]	; 0x674
 8001b26:	f50d 63ce 	add.w	r3, sp, #1648	; 0x670
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f50d 6136 	add.w	r1, sp, #2912	; 0xb60
 8001b32:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 8001b36:	f8dd 3b64 	ldr.w	r3, [sp, #2916]	; 0xb64
 8001b3a:	079a      	lsls	r2, r3, #30
 8001b3c:	f8dd 3b60 	ldr.w	r3, [sp, #2912]	; 0xb60
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	4313      	orrs	r3, r2
 8001b44:	f8cd 3678 	str.w	r3, [sp, #1656]	; 0x678
 8001b48:	f8dd 3b60 	ldr.w	r3, [sp, #2912]	; 0xb60
 8001b4c:	079a      	lsls	r2, r3, #30
 8001b4e:	f8dd 3b64 	ldr.w	r3, [sp, #2916]	; 0xb64
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	4313      	orrs	r3, r2
 8001b56:	f8cd 367c 	str.w	r3, [sp, #1660]	; 0x67c
 8001b5a:	f50d 63cf 	add.w	r3, sp, #1656	; 0x678
 8001b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b62:	f60d 21a8 	addw	r1, sp, #2728	; 0xaa8
 8001b66:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 8001b6a:	f50d 6333 	add.w	r3, sp, #2864	; 0xb30
 8001b6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b72:	f60d 2368 	addw	r3, sp, #2664	; 0xa68
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	ea80 0c02 	eor.w	ip, r0, r2
 8001b7e:	f8cd c680 	str.w	ip, [sp, #1664]	; 0x680
 8001b82:	404b      	eors	r3, r1
 8001b84:	f8cd 3684 	str.w	r3, [sp, #1668]	; 0x684
 8001b88:	f50d 63d0 	add.w	r3, sp, #1664	; 0x680
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f50d 6133 	add.w	r1, sp, #2864	; 0xb30
 8001b94:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 8001b98:	f8dd 3b34 	ldr.w	r3, [sp, #2868]	; 0xb34
 8001b9c:	05da      	lsls	r2, r3, #23
 8001b9e:	f8dd 3b30 	ldr.w	r3, [sp, #2864]	; 0xb30
 8001ba2:	0a5b      	lsrs	r3, r3, #9
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	f8cd 3688 	str.w	r3, [sp, #1672]	; 0x688
 8001baa:	f8dd 3b30 	ldr.w	r3, [sp, #2864]	; 0xb30
 8001bae:	05da      	lsls	r2, r3, #23
 8001bb0:	f8dd 3b34 	ldr.w	r3, [sp, #2868]	; 0xb34
 8001bb4:	0a5b      	lsrs	r3, r3, #9
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	f8cd 368c 	str.w	r3, [sp, #1676]	; 0x68c
 8001bbc:	f50d 63d1 	add.w	r3, sp, #1672	; 0x688
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f50d 612a 	add.w	r1, sp, #2720	; 0xaa0
 8001bc8:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 8001bcc:	f50d 6330 	add.w	r3, sp, #2816	; 0xb00
 8001bd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd4:	f50d 6326 	add.w	r3, sp, #2656	; 0xa60
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	ea80 0c02 	eor.w	ip, r0, r2
 8001be0:	f8cd c690 	str.w	ip, [sp, #1680]	; 0x690
 8001be4:	404b      	eors	r3, r1
 8001be6:	f8cd 3694 	str.w	r3, [sp, #1684]	; 0x694
 8001bea:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	f50d 6130 	add.w	r1, sp, #2816	; 0xb00
 8001bf6:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 8001bfa:	f8dd 3b04 	ldr.w	r3, [sp, #2820]	; 0xb04
 8001bfe:	01da      	lsls	r2, r3, #7
 8001c00:	f8dd 3b00 	ldr.w	r3, [sp, #2816]	; 0xb00
 8001c04:	0e5b      	lsrs	r3, r3, #25
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8cd 3698 	str.w	r3, [sp, #1688]	; 0x698
 8001c0c:	f8dd 3b00 	ldr.w	r3, [sp, #2816]	; 0xb00
 8001c10:	01da      	lsls	r2, r3, #7
 8001c12:	f8dd 3b04 	ldr.w	r3, [sp, #2820]	; 0xb04
 8001c16:	0e5b      	lsrs	r3, r3, #25
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	f8cd 369c 	str.w	r3, [sp, #1692]	; 0x69c
 8001c1e:	f50d 63d3 	add.w	r3, sp, #1688	; 0x698
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
 8001c2a:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 8001c2e:	f60d 23f8 	addw	r3, sp, #2808	; 0xaf8
 8001c32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c36:	f50d 6328 	add.w	r3, sp, #2688	; 0xa80
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	ea80 0c02 	eor.w	ip, r0, r2
 8001c42:	f8cd c6a0 	str.w	ip, [sp, #1696]	; 0x6a0
 8001c46:	404b      	eors	r3, r1
 8001c48:	f8cd 36a4 	str.w	r3, [sp, #1700]	; 0x6a4
 8001c4c:	f50d 63d4 	add.w	r3, sp, #1696	; 0x6a0
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
 8001c58:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 8001c5c:	f8dd 3afc 	ldr.w	r3, [sp, #2812]	; 0xafc
 8001c60:	025a      	lsls	r2, r3, #9
 8001c62:	f8dd 3af8 	ldr.w	r3, [sp, #2808]	; 0xaf8
 8001c66:	0ddb      	lsrs	r3, r3, #23
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	f8cd 36a8 	str.w	r3, [sp, #1704]	; 0x6a8
 8001c6e:	f8dd 3af8 	ldr.w	r3, [sp, #2808]	; 0xaf8
 8001c72:	025a      	lsls	r2, r3, #9
 8001c74:	f8dd 3afc 	ldr.w	r3, [sp, #2812]	; 0xafc
 8001c78:	0ddb      	lsrs	r3, r3, #23
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f8cd 36ac 	str.w	r3, [sp, #1708]	; 0x6ac
 8001c80:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f50d 6129 	add.w	r1, sp, #2704	; 0xa90
 8001c8c:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 8001c90:	f60d 23c8 	addw	r3, sp, #2760	; 0xac8
 8001c94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c98:	f60d 2378 	addw	r3, sp, #2680	; 0xa78
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	ea80 0c02 	eor.w	ip, r0, r2
 8001ca4:	f8cd c6b0 	str.w	ip, [sp, #1712]	; 0x6b0
 8001ca8:	404b      	eors	r3, r1
 8001caa:	f8cd 36b4 	str.w	r3, [sp, #1716]	; 0x6b4
 8001cae:	f50d 63d6 	add.w	r3, sp, #1712	; 0x6b0
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
 8001cba:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 8001cbe:	f8dd 3ac8 	ldr.w	r3, [sp, #2760]	; 0xac8
 8001cc2:	0f9a      	lsrs	r2, r3, #30
 8001cc4:	f8dd 3acc 	ldr.w	r3, [sp, #2764]	; 0xacc
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f8cd 36bc 	str.w	r3, [sp, #1724]	; 0x6bc
 8001cd0:	f8dd 3acc 	ldr.w	r3, [sp, #2764]	; 0xacc
 8001cd4:	0f9a      	lsrs	r2, r3, #30
 8001cd6:	f8dd 3ac8 	ldr.w	r3, [sp, #2760]	; 0xac8
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	f8cd 36b8 	str.w	r3, [sp, #1720]	; 0x6b8
 8001ce2:	f50d 63d7 	add.w	r3, sp, #1720	; 0x6b8
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	f60d 2188 	addw	r1, sp, #2696	; 0xa88
 8001cee:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 8001cf2:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	43d1      	mvns	r1, r2
 8001cfc:	9178      	str	r1, [sp, #480]	; 0x1e0
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	9379      	str	r3, [sp, #484]	; 0x1e4
 8001d02:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8001d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0a:	e9dd 0178 	ldrd	r0, r1, [sp, #480]	; 0x1e0
 8001d0e:	4684      	mov	ip, r0
 8001d10:	ea0c 0c02 	and.w	ip, ip, r2
 8001d14:	f8cd c1e8 	str.w	ip, [sp, #488]	; 0x1e8
 8001d18:	400b      	ands	r3, r1
 8001d1a:	937b      	str	r3, [sp, #492]	; 0x1ec
 8001d1c:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	e9dd 017a 	ldrd	r0, r1, [sp, #488]	; 0x1e8
 8001d28:	4684      	mov	ip, r0
 8001d2a:	ea82 0c0c 	eor.w	ip, r2, ip
 8001d2e:	f8cd c6c0 	str.w	ip, [sp, #1728]	; 0x6c0
 8001d32:	404b      	eors	r3, r1
 8001d34:	f8cd 36c4 	str.w	r3, [sp, #1732]	; 0x6c4
 8001d38:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	f60d 11b8 	addw	r1, sp, #2488	; 0x9b8
 8001d44:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 8001d48:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	43d1      	mvns	r1, r2
 8001d52:	917c      	str	r1, [sp, #496]	; 0x1f0
 8001d54:	43db      	mvns	r3, r3
 8001d56:	937d      	str	r3, [sp, #500]	; 0x1f4
 8001d58:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	e9dd 017c 	ldrd	r0, r1, [sp, #496]	; 0x1f0
 8001d64:	4684      	mov	ip, r0
 8001d66:	ea0c 0c02 	and.w	ip, ip, r2
 8001d6a:	f8cd c1f8 	str.w	ip, [sp, #504]	; 0x1f8
 8001d6e:	400b      	ands	r3, r1
 8001d70:	937f      	str	r3, [sp, #508]	; 0x1fc
 8001d72:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	e9dd 017e 	ldrd	r0, r1, [sp, #504]	; 0x1f8
 8001d7e:	4684      	mov	ip, r0
 8001d80:	ea82 0c0c 	eor.w	ip, r2, ip
 8001d84:	f8cd c6c8 	str.w	ip, [sp, #1736]	; 0x6c8
 8001d88:	404b      	eors	r3, r1
 8001d8a:	f8cd 36cc 	str.w	r3, [sp, #1740]	; 0x6cc
 8001d8e:	f50d 63d9 	add.w	r3, sp, #1736	; 0x6c8
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	f50d 611b 	add.w	r1, sp, #2480	; 0x9b0
 8001d9a:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 8001d9e:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	43d1      	mvns	r1, r2
 8001da8:	9180      	str	r1, [sp, #512]	; 0x200
 8001daa:	43db      	mvns	r3, r3
 8001dac:	9381      	str	r3, [sp, #516]	; 0x204
 8001dae:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	e9dd 0180 	ldrd	r0, r1, [sp, #512]	; 0x200
 8001dba:	4684      	mov	ip, r0
 8001dbc:	ea0c 0c02 	and.w	ip, ip, r2
 8001dc0:	f8cd c208 	str.w	ip, [sp, #520]	; 0x208
 8001dc4:	400b      	ands	r3, r1
 8001dc6:	9383      	str	r3, [sp, #524]	; 0x20c
 8001dc8:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	e9dd 0182 	ldrd	r0, r1, [sp, #520]	; 0x208
 8001dd4:	4684      	mov	ip, r0
 8001dd6:	ea82 0c0c 	eor.w	ip, r2, ip
 8001dda:	f8cd c6d0 	str.w	ip, [sp, #1744]	; 0x6d0
 8001dde:	404b      	eors	r3, r1
 8001de0:	f8cd 36d4 	str.w	r3, [sp, #1748]	; 0x6d4
 8001de4:	f50d 63da 	add.w	r3, sp, #1744	; 0x6d0
 8001de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dec:	f60d 11a8 	addw	r1, sp, #2472	; 0x9a8
 8001df0:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 8001df4:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	43d1      	mvns	r1, r2
 8001dfe:	9184      	str	r1, [sp, #528]	; 0x210
 8001e00:	43db      	mvns	r3, r3
 8001e02:	9385      	str	r3, [sp, #532]	; 0x214
 8001e04:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8001e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0c:	e9dd 0184 	ldrd	r0, r1, [sp, #528]	; 0x210
 8001e10:	4684      	mov	ip, r0
 8001e12:	ea0c 0c02 	and.w	ip, ip, r2
 8001e16:	f8cd c218 	str.w	ip, [sp, #536]	; 0x218
 8001e1a:	400b      	ands	r3, r1
 8001e1c:	9387      	str	r3, [sp, #540]	; 0x21c
 8001e1e:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8001e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e26:	e9dd 0186 	ldrd	r0, r1, [sp, #536]	; 0x218
 8001e2a:	4684      	mov	ip, r0
 8001e2c:	ea82 0c0c 	eor.w	ip, r2, ip
 8001e30:	f8cd c6d8 	str.w	ip, [sp, #1752]	; 0x6d8
 8001e34:	404b      	eors	r3, r1
 8001e36:	f8cd 36dc 	str.w	r3, [sp, #1756]	; 0x6dc
 8001e3a:	f50d 63db 	add.w	r3, sp, #1752	; 0x6d8
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	f50d 611a 	add.w	r1, sp, #2464	; 0x9a0
 8001e46:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 8001e4a:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	43d1      	mvns	r1, r2
 8001e54:	9188      	str	r1, [sp, #544]	; 0x220
 8001e56:	43db      	mvns	r3, r3
 8001e58:	9389      	str	r3, [sp, #548]	; 0x224
 8001e5a:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	e9dd 0188 	ldrd	r0, r1, [sp, #544]	; 0x220
 8001e66:	4684      	mov	ip, r0
 8001e68:	ea0c 0c02 	and.w	ip, ip, r2
 8001e6c:	f8cd c228 	str.w	ip, [sp, #552]	; 0x228
 8001e70:	400b      	ands	r3, r1
 8001e72:	938b      	str	r3, [sp, #556]	; 0x22c
 8001e74:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8001e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7c:	e9dd 018a 	ldrd	r0, r1, [sp, #552]	; 0x228
 8001e80:	4684      	mov	ip, r0
 8001e82:	ea82 0c0c 	eor.w	ip, r2, ip
 8001e86:	f8cd c6e0 	str.w	ip, [sp, #1760]	; 0x6e0
 8001e8a:	404b      	eors	r3, r1
 8001e8c:	f8cd 36e4 	str.w	r3, [sp, #1764]	; 0x6e4
 8001e90:	f50d 63dc 	add.w	r3, sp, #1760	; 0x6e0
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	f60d 1198 	addw	r1, sp, #2456	; 0x998
 8001e9c:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 8001ea0:	f60d 2358 	addw	r3, sp, #2648	; 0xa58
 8001ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ea8:	f50d 6323 	add.w	r3, sp, #2608	; 0xa30
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	ea80 0c02 	eor.w	ip, r0, r2
 8001eb4:	f8cd c230 	str.w	ip, [sp, #560]	; 0x230
 8001eb8:	404b      	eors	r3, r1
 8001eba:	938d      	str	r3, [sp, #564]	; 0x234
 8001ebc:	f60d 2308 	addw	r3, sp, #2568	; 0xa08
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	e9dd 018c 	ldrd	r0, r1, [sp, #560]	; 0x230
 8001ec8:	4684      	mov	ip, r0
 8001eca:	ea8c 0c02 	eor.w	ip, ip, r2
 8001ece:	f8cd c238 	str.w	ip, [sp, #568]	; 0x238
 8001ed2:	404b      	eors	r3, r1
 8001ed4:	938f      	str	r3, [sp, #572]	; 0x23c
 8001ed6:	f50d 631e 	add.w	r3, sp, #2528	; 0x9e0
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	e9dd 018e 	ldrd	r0, r1, [sp, #568]	; 0x238
 8001ee2:	4684      	mov	ip, r0
 8001ee4:	ea8c 0c02 	eor.w	ip, ip, r2
 8001ee8:	f8cd c240 	str.w	ip, [sp, #576]	; 0x240
 8001eec:	404b      	eors	r3, r1
 8001eee:	9391      	str	r3, [sp, #580]	; 0x244
 8001ef0:	f60d 13b8 	addw	r3, sp, #2488	; 0x9b8
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	e9dd 0190 	ldrd	r0, r1, [sp, #576]	; 0x240
 8001efc:	4684      	mov	ip, r0
 8001efe:	ea82 0c0c 	eor.w	ip, r2, ip
 8001f02:	f8cd c6e8 	str.w	ip, [sp, #1768]	; 0x6e8
 8001f06:	404b      	eors	r3, r1
 8001f08:	f8cd 36ec 	str.w	r3, [sp, #1772]	; 0x6ec
 8001f0c:	f50d 63dd 	add.w	r3, sp, #1768	; 0x6e8
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	f60d 21a8 	addw	r1, sp, #2728	; 0xaa8
 8001f18:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001f1c:	f50d 6325 	add.w	r3, sp, #2640	; 0xa50
 8001f20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f24:	f60d 2328 	addw	r3, sp, #2600	; 0xa28
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	ea80 0c02 	eor.w	ip, r0, r2
 8001f30:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
 8001f34:	404b      	eors	r3, r1
 8001f36:	9393      	str	r3, [sp, #588]	; 0x24c
 8001f38:	f50d 6320 	add.w	r3, sp, #2560	; 0xa00
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	e9dd 0192 	ldrd	r0, r1, [sp, #584]	; 0x248
 8001f44:	4684      	mov	ip, r0
 8001f46:	ea8c 0c02 	eor.w	ip, ip, r2
 8001f4a:	f8cd c250 	str.w	ip, [sp, #592]	; 0x250
 8001f4e:	404b      	eors	r3, r1
 8001f50:	9395      	str	r3, [sp, #596]	; 0x254
 8001f52:	f60d 13d8 	addw	r3, sp, #2520	; 0x9d8
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	e9dd 0194 	ldrd	r0, r1, [sp, #592]	; 0x250
 8001f5e:	4684      	mov	ip, r0
 8001f60:	ea8c 0c02 	eor.w	ip, ip, r2
 8001f64:	f8cd c258 	str.w	ip, [sp, #600]	; 0x258
 8001f68:	404b      	eors	r3, r1
 8001f6a:	9397      	str	r3, [sp, #604]	; 0x25c
 8001f6c:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 8001f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f74:	e9dd 0196 	ldrd	r0, r1, [sp, #600]	; 0x258
 8001f78:	4684      	mov	ip, r0
 8001f7a:	ea82 0c0c 	eor.w	ip, r2, ip
 8001f7e:	f8cd c6f0 	str.w	ip, [sp, #1776]	; 0x6f0
 8001f82:	404b      	eors	r3, r1
 8001f84:	f8cd 36f4 	str.w	r3, [sp, #1780]	; 0x6f4
 8001f88:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f50d 612a 	add.w	r1, sp, #2720	; 0xaa0
 8001f94:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8001f98:	f60d 2348 	addw	r3, sp, #2632	; 0xa48
 8001f9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa0:	f50d 6322 	add.w	r3, sp, #2592	; 0xa20
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	ea80 0c02 	eor.w	ip, r0, r2
 8001fac:	f8cd c260 	str.w	ip, [sp, #608]	; 0x260
 8001fb0:	404b      	eors	r3, r1
 8001fb2:	9399      	str	r3, [sp, #612]	; 0x264
 8001fb4:	f60d 13f8 	addw	r3, sp, #2552	; 0x9f8
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	e9dd 0198 	ldrd	r0, r1, [sp, #608]	; 0x260
 8001fc0:	4684      	mov	ip, r0
 8001fc2:	ea8c 0c02 	eor.w	ip, ip, r2
 8001fc6:	f8cd c268 	str.w	ip, [sp, #616]	; 0x268
 8001fca:	404b      	eors	r3, r1
 8001fcc:	939b      	str	r3, [sp, #620]	; 0x26c
 8001fce:	f50d 631d 	add.w	r3, sp, #2512	; 0x9d0
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	e9dd 019a 	ldrd	r0, r1, [sp, #616]	; 0x268
 8001fda:	4684      	mov	ip, r0
 8001fdc:	ea8c 0c02 	eor.w	ip, ip, r2
 8001fe0:	f8cd c270 	str.w	ip, [sp, #624]	; 0x270
 8001fe4:	404b      	eors	r3, r1
 8001fe6:	939d      	str	r3, [sp, #628]	; 0x274
 8001fe8:	f60d 13a8 	addw	r3, sp, #2472	; 0x9a8
 8001fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff0:	e9dd 019c 	ldrd	r0, r1, [sp, #624]	; 0x270
 8001ff4:	4684      	mov	ip, r0
 8001ff6:	ea82 0c0c 	eor.w	ip, r2, ip
 8001ffa:	f8cd c6f8 	str.w	ip, [sp, #1784]	; 0x6f8
 8001ffe:	404b      	eors	r3, r1
 8002000:	f8cd 36fc 	str.w	r3, [sp, #1788]	; 0x6fc
 8002004:	f50d 63df 	add.w	r3, sp, #1784	; 0x6f8
 8002008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200c:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
 8002010:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8002014:	f50d 6324 	add.w	r3, sp, #2624	; 0xa40
 8002018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800201c:	f60d 2318 	addw	r3, sp, #2584	; 0xa18
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	ea80 0c02 	eor.w	ip, r0, r2
 8002028:	f8cd c278 	str.w	ip, [sp, #632]	; 0x278
 800202c:	404b      	eors	r3, r1
 800202e:	939f      	str	r3, [sp, #636]	; 0x27c
 8002030:	f50d 631f 	add.w	r3, sp, #2544	; 0x9f0
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	e9dd 019e 	ldrd	r0, r1, [sp, #632]	; 0x278
 800203c:	4684      	mov	ip, r0
 800203e:	ea8c 0c02 	eor.w	ip, ip, r2
 8002042:	f8cd c280 	str.w	ip, [sp, #640]	; 0x280
 8002046:	404b      	eors	r3, r1
 8002048:	93a1      	str	r3, [sp, #644]	; 0x284
 800204a:	f60d 13c8 	addw	r3, sp, #2504	; 0x9c8
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	e9dd 01a0 	ldrd	r0, r1, [sp, #640]	; 0x280
 8002056:	4684      	mov	ip, r0
 8002058:	ea8c 0c02 	eor.w	ip, ip, r2
 800205c:	f8cd c288 	str.w	ip, [sp, #648]	; 0x288
 8002060:	404b      	eors	r3, r1
 8002062:	93a3      	str	r3, [sp, #652]	; 0x28c
 8002064:	f50d 631a 	add.w	r3, sp, #2464	; 0x9a0
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	e9dd 01a2 	ldrd	r0, r1, [sp, #648]	; 0x288
 8002070:	4684      	mov	ip, r0
 8002072:	ea82 0c0c 	eor.w	ip, r2, ip
 8002076:	f8cd c700 	str.w	ip, [sp, #1792]	; 0x700
 800207a:	404b      	eors	r3, r1
 800207c:	f8cd 3704 	str.w	r3, [sp, #1796]	; 0x704
 8002080:	f50d 63e0 	add.w	r3, sp, #1792	; 0x700
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f50d 6129 	add.w	r1, sp, #2704	; 0xa90
 800208c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8002090:	f60d 2338 	addw	r3, sp, #2616	; 0xa38
 8002094:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002098:	f50d 6321 	add.w	r3, sp, #2576	; 0xa10
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	ea80 0c02 	eor.w	ip, r0, r2
 80020a4:	f8cd c290 	str.w	ip, [sp, #656]	; 0x290
 80020a8:	404b      	eors	r3, r1
 80020aa:	93a5      	str	r3, [sp, #660]	; 0x294
 80020ac:	f60d 13e8 	addw	r3, sp, #2536	; 0x9e8
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	e9dd 01a4 	ldrd	r0, r1, [sp, #656]	; 0x290
 80020b8:	4684      	mov	ip, r0
 80020ba:	ea8c 0c02 	eor.w	ip, ip, r2
 80020be:	f8cd c298 	str.w	ip, [sp, #664]	; 0x298
 80020c2:	404b      	eors	r3, r1
 80020c4:	93a7      	str	r3, [sp, #668]	; 0x29c
 80020c6:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	e9dd 01a6 	ldrd	r0, r1, [sp, #664]	; 0x298
 80020d2:	4684      	mov	ip, r0
 80020d4:	ea8c 0c02 	eor.w	ip, ip, r2
 80020d8:	f8cd c2a0 	str.w	ip, [sp, #672]	; 0x2a0
 80020dc:	404b      	eors	r3, r1
 80020de:	93a9      	str	r3, [sp, #676]	; 0x2a4
 80020e0:	f60d 1398 	addw	r3, sp, #2456	; 0x998
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	e9dd 01a8 	ldrd	r0, r1, [sp, #672]	; 0x2a0
 80020ec:	4684      	mov	ip, r0
 80020ee:	ea82 0c0c 	eor.w	ip, r2, ip
 80020f2:	f8cd c708 	str.w	ip, [sp, #1800]	; 0x708
 80020f6:	404b      	eors	r3, r1
 80020f8:	f8cd 370c 	str.w	r3, [sp, #1804]	; 0x70c
 80020fc:	f50d 63e1 	add.w	r3, sp, #1800	; 0x708
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f60d 2188 	addw	r1, sp, #2696	; 0xa88
 8002108:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 800210c:	f8dd 3aa0 	ldr.w	r3, [sp, #2720]	; 0xaa0
 8002110:	0fda      	lsrs	r2, r3, #31
 8002112:	f8dd 3aa4 	ldr.w	r3, [sp, #2724]	; 0xaa4
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4313      	orrs	r3, r2
 800211a:	93ab      	str	r3, [sp, #684]	; 0x2ac
 800211c:	f8dd 3aa4 	ldr.w	r3, [sp, #2724]	; 0xaa4
 8002120:	0fda      	lsrs	r2, r3, #31
 8002122:	f8dd 3aa0 	ldr.w	r3, [sp, #2720]	; 0xaa0
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4313      	orrs	r3, r2
 800212a:	93aa      	str	r3, [sp, #680]	; 0x2a8
 800212c:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	e9dd 01aa 	ldrd	r0, r1, [sp, #680]	; 0x2a8
 8002138:	4684      	mov	ip, r0
 800213a:	ea82 0c0c 	eor.w	ip, r2, ip
 800213e:	f8cd c710 	str.w	ip, [sp, #1808]	; 0x710
 8002142:	404b      	eors	r3, r1
 8002144:	f8cd 3714 	str.w	r3, [sp, #1812]	; 0x714
 8002148:	f50d 63e2 	add.w	r3, sp, #1808	; 0x710
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	f50d 6128 	add.w	r1, sp, #2688	; 0xa80
 8002154:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8002158:	f8dd 3a98 	ldr.w	r3, [sp, #2712]	; 0xa98
 800215c:	0fda      	lsrs	r2, r3, #31
 800215e:	f8dd 3a9c 	ldr.w	r3, [sp, #2716]	; 0xa9c
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4313      	orrs	r3, r2
 8002166:	93ad      	str	r3, [sp, #692]	; 0x2b4
 8002168:	f8dd 3a9c 	ldr.w	r3, [sp, #2716]	; 0xa9c
 800216c:	0fda      	lsrs	r2, r3, #31
 800216e:	f8dd 3a98 	ldr.w	r3, [sp, #2712]	; 0xa98
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4313      	orrs	r3, r2
 8002176:	93ac      	str	r3, [sp, #688]	; 0x2b0
 8002178:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 800217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002180:	e9dd 01ac 	ldrd	r0, r1, [sp, #688]	; 0x2b0
 8002184:	4684      	mov	ip, r0
 8002186:	ea82 0c0c 	eor.w	ip, r2, ip
 800218a:	f8cd c718 	str.w	ip, [sp, #1816]	; 0x718
 800218e:	404b      	eors	r3, r1
 8002190:	f8cd 371c 	str.w	r3, [sp, #1820]	; 0x71c
 8002194:	f50d 63e3 	add.w	r3, sp, #1816	; 0x718
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f60d 2178 	addw	r1, sp, #2680	; 0xa78
 80021a0:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 80021a4:	f8dd 3a90 	ldr.w	r3, [sp, #2704]	; 0xa90
 80021a8:	0fda      	lsrs	r2, r3, #31
 80021aa:	f8dd 3a94 	ldr.w	r3, [sp, #2708]	; 0xa94
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4313      	orrs	r3, r2
 80021b2:	93af      	str	r3, [sp, #700]	; 0x2bc
 80021b4:	f8dd 3a94 	ldr.w	r3, [sp, #2708]	; 0xa94
 80021b8:	0fda      	lsrs	r2, r3, #31
 80021ba:	f8dd 3a90 	ldr.w	r3, [sp, #2704]	; 0xa90
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4313      	orrs	r3, r2
 80021c2:	93ae      	str	r3, [sp, #696]	; 0x2b8
 80021c4:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 80021c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021cc:	e9dd 01ae 	ldrd	r0, r1, [sp, #696]	; 0x2b8
 80021d0:	4684      	mov	ip, r0
 80021d2:	ea82 0c0c 	eor.w	ip, r2, ip
 80021d6:	f8cd c720 	str.w	ip, [sp, #1824]	; 0x720
 80021da:	404b      	eors	r3, r1
 80021dc:	f8cd 3724 	str.w	r3, [sp, #1828]	; 0x724
 80021e0:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f50d 6127 	add.w	r1, sp, #2672	; 0xa70
 80021ec:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 80021f0:	f8dd 3a88 	ldr.w	r3, [sp, #2696]	; 0xa88
 80021f4:	0fda      	lsrs	r2, r3, #31
 80021f6:	f8dd 3a8c 	ldr.w	r3, [sp, #2700]	; 0xa8c
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4313      	orrs	r3, r2
 80021fe:	93b1      	str	r3, [sp, #708]	; 0x2c4
 8002200:	f8dd 3a8c 	ldr.w	r3, [sp, #2700]	; 0xa8c
 8002204:	0fda      	lsrs	r2, r3, #31
 8002206:	f8dd 3a88 	ldr.w	r3, [sp, #2696]	; 0xa88
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4313      	orrs	r3, r2
 800220e:	93b0      	str	r3, [sp, #704]	; 0x2c0
 8002210:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8002214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002218:	e9dd 01b0 	ldrd	r0, r1, [sp, #704]	; 0x2c0
 800221c:	4684      	mov	ip, r0
 800221e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002222:	f8cd c728 	str.w	ip, [sp, #1832]	; 0x728
 8002226:	404b      	eors	r3, r1
 8002228:	f8cd 372c 	str.w	r3, [sp, #1836]	; 0x72c
 800222c:	f50d 63e5 	add.w	r3, sp, #1832	; 0x728
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
 8002238:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 800223c:	f8dd 3aa8 	ldr.w	r3, [sp, #2728]	; 0xaa8
 8002240:	0fda      	lsrs	r2, r3, #31
 8002242:	f8dd 3aac 	ldr.w	r3, [sp, #2732]	; 0xaac
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4313      	orrs	r3, r2
 800224a:	93b3      	str	r3, [sp, #716]	; 0x2cc
 800224c:	f8dd 3aac 	ldr.w	r3, [sp, #2732]	; 0xaac
 8002250:	0fda      	lsrs	r2, r3, #31
 8002252:	f8dd 3aa8 	ldr.w	r3, [sp, #2728]	; 0xaa8
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4313      	orrs	r3, r2
 800225a:	93b2      	str	r3, [sp, #712]	; 0x2c8
 800225c:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	e9dd 01b2 	ldrd	r0, r1, [sp, #712]	; 0x2c8
 8002268:	4684      	mov	ip, r0
 800226a:	ea82 0c0c 	eor.w	ip, r2, ip
 800226e:	f8cd c730 	str.w	ip, [sp, #1840]	; 0x730
 8002272:	404b      	eors	r3, r1
 8002274:	f8cd 3734 	str.w	r3, [sp, #1844]	; 0x734
 8002278:	f50d 63e6 	add.w	r3, sp, #1840	; 0x730
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	f50d 6126 	add.w	r1, sp, #2656	; 0xa60
 8002284:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 8002288:	f60d 2358 	addw	r3, sp, #2648	; 0xa58
 800228c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002290:	f50d 6328 	add.w	r3, sp, #2688	; 0xa80
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	ea80 0c02 	eor.w	ip, r0, r2
 800229c:	f8cd c738 	str.w	ip, [sp, #1848]	; 0x738
 80022a0:	404b      	eors	r3, r1
 80022a2:	f8cd 373c 	str.w	r3, [sp, #1852]	; 0x73c
 80022a6:	f50d 63e7 	add.w	r3, sp, #1848	; 0x738
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	f60d 2158 	addw	r1, sp, #2648	; 0xa58
 80022b2:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 80022b6:	f60d 2358 	addw	r3, sp, #2648	; 0xa58
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f60d 21a8 	addw	r1, sp, #2728	; 0xaa8
 80022c2:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 80022c6:	f60d 2328 	addw	r3, sp, #2600	; 0xa28
 80022ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ce:	f60d 2378 	addw	r3, sp, #2680	; 0xa78
 80022d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d6:	ea80 0c02 	eor.w	ip, r0, r2
 80022da:	f8cd c740 	str.w	ip, [sp, #1856]	; 0x740
 80022de:	404b      	eors	r3, r1
 80022e0:	f8cd 3744 	str.w	r3, [sp, #1860]	; 0x744
 80022e4:	f50d 63e8 	add.w	r3, sp, #1856	; 0x740
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f60d 2128 	addw	r1, sp, #2600	; 0xa28
 80022f0:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 80022f4:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80022f8:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
 80022fc:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002300:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 8002304:	6803      	ldr	r3, [r0, #0]
 8002306:	031a      	lsls	r2, r3, #12
 8002308:	680b      	ldr	r3, [r1, #0]
 800230a:	0d1b      	lsrs	r3, r3, #20
 800230c:	4313      	orrs	r3, r2
 800230e:	f8cd 3748 	str.w	r3, [sp, #1864]	; 0x748
 8002312:	680b      	ldr	r3, [r1, #0]
 8002314:	031a      	lsls	r2, r3, #12
 8002316:	6803      	ldr	r3, [r0, #0]
 8002318:	0d1b      	lsrs	r3, r3, #20
 800231a:	4313      	orrs	r3, r2
 800231c:	f8cd 374c 	str.w	r3, [sp, #1868]	; 0x74c
 8002320:	f50d 63e9 	add.w	r3, sp, #1864	; 0x748
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f50d 612a 	add.w	r1, sp, #2720	; 0xaa0
 800232c:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 8002330:	f60d 13f8 	addw	r3, sp, #2552	; 0x9f8
 8002334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002338:	f50d 6327 	add.w	r3, sp, #2672	; 0xa70
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	ea80 0c02 	eor.w	ip, r0, r2
 8002344:	f8cd c750 	str.w	ip, [sp, #1872]	; 0x750
 8002348:	404b      	eors	r3, r1
 800234a:	f8cd 3754 	str.w	r3, [sp, #1876]	; 0x754
 800234e:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	f60d 11f8 	addw	r1, sp, #2552	; 0x9f8
 800235a:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 800235e:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002362:	f5a3 70c2 	sub.w	r0, r3, #388	; 0x184
 8002366:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800236a:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 800236e:	6803      	ldr	r3, [r0, #0]
 8002370:	02da      	lsls	r2, r3, #11
 8002372:	680b      	ldr	r3, [r1, #0]
 8002374:	0d5b      	lsrs	r3, r3, #21
 8002376:	4313      	orrs	r3, r2
 8002378:	f8cd 3758 	str.w	r3, [sp, #1880]	; 0x758
 800237c:	680b      	ldr	r3, [r1, #0]
 800237e:	02da      	lsls	r2, r3, #11
 8002380:	6803      	ldr	r3, [r0, #0]
 8002382:	0d5b      	lsrs	r3, r3, #21
 8002384:	4313      	orrs	r3, r2
 8002386:	f8cd 375c 	str.w	r3, [sp, #1884]	; 0x75c
 800238a:	f50d 63eb 	add.w	r3, sp, #1880	; 0x758
 800238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002392:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
 8002396:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 800239a:	f60d 13c8 	addw	r3, sp, #2504	; 0x9c8
 800239e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023a2:	f60d 2368 	addw	r3, sp, #2664	; 0xa68
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	ea80 0c02 	eor.w	ip, r0, r2
 80023ae:	f8cd c760 	str.w	ip, [sp, #1888]	; 0x760
 80023b2:	404b      	eors	r3, r1
 80023b4:	f8cd 3764 	str.w	r3, [sp, #1892]	; 0x764
 80023b8:	f50d 63ec 	add.w	r3, sp, #1888	; 0x760
 80023bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c0:	f60d 11c8 	addw	r1, sp, #2504	; 0x9c8
 80023c4:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 80023c8:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80023cc:	f5a3 70dc 	sub.w	r0, r3, #440	; 0x1b8
 80023d0:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80023d4:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 80023d8:	6803      	ldr	r3, [r0, #0]
 80023da:	0ada      	lsrs	r2, r3, #11
 80023dc:	680b      	ldr	r3, [r1, #0]
 80023de:	055b      	lsls	r3, r3, #21
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8cd 376c 	str.w	r3, [sp, #1900]	; 0x76c
 80023e6:	680b      	ldr	r3, [r1, #0]
 80023e8:	0ada      	lsrs	r2, r3, #11
 80023ea:	6803      	ldr	r3, [r0, #0]
 80023ec:	055b      	lsls	r3, r3, #21
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8cd 3768 	str.w	r3, [sp, #1896]	; 0x768
 80023f4:	f50d 63ed 	add.w	r3, sp, #1896	; 0x768
 80023f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fc:	f50d 6129 	add.w	r1, sp, #2704	; 0xa90
 8002400:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 8002404:	f60d 1398 	addw	r3, sp, #2456	; 0x998
 8002408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240c:	f50d 6326 	add.w	r3, sp, #2656	; 0xa60
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	ea80 0c02 	eor.w	ip, r0, r2
 8002418:	f8cd c770 	str.w	ip, [sp, #1904]	; 0x770
 800241c:	404b      	eors	r3, r1
 800241e:	f8cd 3774 	str.w	r3, [sp, #1908]	; 0x774
 8002422:	f50d 63ee 	add.w	r3, sp, #1904	; 0x770
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	f60d 1198 	addw	r1, sp, #2456	; 0x998
 800242e:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 8002432:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002436:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 800243a:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800243e:	f5a3 71f2 	sub.w	r1, r3, #484	; 0x1e4
 8002442:	6803      	ldr	r3, [r0, #0]
 8002444:	0c9a      	lsrs	r2, r3, #18
 8002446:	680b      	ldr	r3, [r1, #0]
 8002448:	039b      	lsls	r3, r3, #14
 800244a:	4313      	orrs	r3, r2
 800244c:	f8cd 377c 	str.w	r3, [sp, #1916]	; 0x77c
 8002450:	680b      	ldr	r3, [r1, #0]
 8002452:	0c9a      	lsrs	r2, r3, #18
 8002454:	6803      	ldr	r3, [r0, #0]
 8002456:	039b      	lsls	r3, r3, #14
 8002458:	4313      	orrs	r3, r2
 800245a:	f8cd 3778 	str.w	r3, [sp, #1912]	; 0x778
 800245e:	f50d 63ef 	add.w	r3, sp, #1912	; 0x778
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f60d 2188 	addw	r1, sp, #2696	; 0xa88
 800246a:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 800246e:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	43d1      	mvns	r1, r2
 8002478:	91b4      	str	r1, [sp, #720]	; 0x2d0
 800247a:	43db      	mvns	r3, r3
 800247c:	93b5      	str	r3, [sp, #724]	; 0x2d4
 800247e:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	e9dd 01b4 	ldrd	r0, r1, [sp, #720]	; 0x2d0
 800248a:	4684      	mov	ip, r0
 800248c:	ea0c 0c02 	and.w	ip, ip, r2
 8002490:	f8cd c2d8 	str.w	ip, [sp, #728]	; 0x2d8
 8002494:	400b      	ands	r3, r1
 8002496:	93b7      	str	r3, [sp, #732]	; 0x2dc
 8002498:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	e9dd 01b6 	ldrd	r0, r1, [sp, #728]	; 0x2d8
 80024a4:	4684      	mov	ip, r0
 80024a6:	ea82 0c0c 	eor.w	ip, r2, ip
 80024aa:	f8cd c780 	str.w	ip, [sp, #1920]	; 0x780
 80024ae:	404b      	eors	r3, r1
 80024b0:	f8cd 3784 	str.w	r3, [sp, #1924]	; 0x784
 80024b4:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f50d 6137 	add.w	r1, sp, #2928	; 0xb70
 80024c0:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80024c4:	f8dd 3b7c 	ldr.w	r3, [sp, #2940]	; 0xb7c
 80024c8:	3301      	adds	r3, #1
 80024ca:	4abc      	ldr	r2, [pc, #752]	; (80027bc <KeccakF1600_StatePermute+0x2154>)
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d4:	f50d 6337 	add.w	r3, sp, #2928	; 0xb70
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	ea82 0c00 	eor.w	ip, r2, r0
 80024e0:	f8cd c788 	str.w	ip, [sp, #1928]	; 0x788
 80024e4:	404b      	eors	r3, r1
 80024e6:	f8cd 378c 	str.w	r3, [sp, #1932]	; 0x78c
 80024ea:	f50d 63f1 	add.w	r3, sp, #1928	; 0x788
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	f50d 6137 	add.w	r1, sp, #2928	; 0xb70
 80024f6:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 80024fa:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	43d1      	mvns	r1, r2
 8002504:	91b8      	str	r1, [sp, #736]	; 0x2e0
 8002506:	43db      	mvns	r3, r3
 8002508:	93b9      	str	r3, [sp, #740]	; 0x2e4
 800250a:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	e9dd 01b8 	ldrd	r0, r1, [sp, #736]	; 0x2e0
 8002516:	4684      	mov	ip, r0
 8002518:	ea0c 0c02 	and.w	ip, ip, r2
 800251c:	f8cd c2e8 	str.w	ip, [sp, #744]	; 0x2e8
 8002520:	400b      	ands	r3, r1
 8002522:	93bb      	str	r3, [sp, #748]	; 0x2ec
 8002524:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	e9dd 01ba 	ldrd	r0, r1, [sp, #744]	; 0x2e8
 8002530:	4684      	mov	ip, r0
 8002532:	ea82 0c0c 	eor.w	ip, r2, ip
 8002536:	f8cd c790 	str.w	ip, [sp, #1936]	; 0x790
 800253a:	404b      	eors	r3, r1
 800253c:	f8cd 3794 	str.w	r3, [sp, #1940]	; 0x794
 8002540:	f50d 63f2 	add.w	r3, sp, #1936	; 0x790
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	f60d 3168 	addw	r1, sp, #2920	; 0xb68
 800254c:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 8002550:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8002554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002558:	43d1      	mvns	r1, r2
 800255a:	91bc      	str	r1, [sp, #752]	; 0x2f0
 800255c:	43db      	mvns	r3, r3
 800255e:	93bd      	str	r3, [sp, #756]	; 0x2f4
 8002560:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8002564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002568:	e9dd 01bc 	ldrd	r0, r1, [sp, #752]	; 0x2f0
 800256c:	4684      	mov	ip, r0
 800256e:	ea0c 0c02 	and.w	ip, ip, r2
 8002572:	f8cd c2f8 	str.w	ip, [sp, #760]	; 0x2f8
 8002576:	400b      	ands	r3, r1
 8002578:	93bf      	str	r3, [sp, #764]	; 0x2fc
 800257a:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	e9dd 01be 	ldrd	r0, r1, [sp, #760]	; 0x2f8
 8002586:	4684      	mov	ip, r0
 8002588:	ea82 0c0c 	eor.w	ip, r2, ip
 800258c:	f8cd c798 	str.w	ip, [sp, #1944]	; 0x798
 8002590:	404b      	eors	r3, r1
 8002592:	f8cd 379c 	str.w	r3, [sp, #1948]	; 0x79c
 8002596:	f50d 63f3 	add.w	r3, sp, #1944	; 0x798
 800259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259e:	f50d 6136 	add.w	r1, sp, #2912	; 0xb60
 80025a2:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 80025a6:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	43d1      	mvns	r1, r2
 80025b0:	91c0      	str	r1, [sp, #768]	; 0x300
 80025b2:	43db      	mvns	r3, r3
 80025b4:	93c1      	str	r3, [sp, #772]	; 0x304
 80025b6:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	e9dd 01c0 	ldrd	r0, r1, [sp, #768]	; 0x300
 80025c2:	4684      	mov	ip, r0
 80025c4:	ea0c 0c02 	and.w	ip, ip, r2
 80025c8:	f8cd c308 	str.w	ip, [sp, #776]	; 0x308
 80025cc:	400b      	ands	r3, r1
 80025ce:	93c3      	str	r3, [sp, #780]	; 0x30c
 80025d0:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	e9dd 01c2 	ldrd	r0, r1, [sp, #776]	; 0x308
 80025dc:	4684      	mov	ip, r0
 80025de:	ea82 0c0c 	eor.w	ip, r2, ip
 80025e2:	f8cd c7a0 	str.w	ip, [sp, #1952]	; 0x7a0
 80025e6:	404b      	eors	r3, r1
 80025e8:	f8cd 37a4 	str.w	r3, [sp, #1956]	; 0x7a4
 80025ec:	f50d 63f4 	add.w	r3, sp, #1952	; 0x7a0
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
 80025f8:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 80025fc:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	43d1      	mvns	r1, r2
 8002606:	91c4      	str	r1, [sp, #784]	; 0x310
 8002608:	43db      	mvns	r3, r3
 800260a:	93c5      	str	r3, [sp, #788]	; 0x314
 800260c:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	e9dd 01c4 	ldrd	r0, r1, [sp, #784]	; 0x310
 8002618:	4684      	mov	ip, r0
 800261a:	ea0c 0c02 	and.w	ip, ip, r2
 800261e:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
 8002622:	400b      	ands	r3, r1
 8002624:	93c7      	str	r3, [sp, #796]	; 0x31c
 8002626:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 800262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262e:	e9dd 01c6 	ldrd	r0, r1, [sp, #792]	; 0x318
 8002632:	4684      	mov	ip, r0
 8002634:	ea82 0c0c 	eor.w	ip, r2, ip
 8002638:	f8cd c7a8 	str.w	ip, [sp, #1960]	; 0x7a8
 800263c:	404b      	eors	r3, r1
 800263e:	f8cd 37ac 	str.w	r3, [sp, #1964]	; 0x7ac
 8002642:	f50d 63f5 	add.w	r3, sp, #1960	; 0x7a8
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f50d 6135 	add.w	r1, sp, #2896	; 0xb50
 800264e:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 8002652:	f50d 6324 	add.w	r3, sp, #2624	; 0xa40
 8002656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800265a:	f60d 2368 	addw	r3, sp, #2664	; 0xa68
 800265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002662:	ea80 0c02 	eor.w	ip, r0, r2
 8002666:	f8cd c7b0 	str.w	ip, [sp, #1968]	; 0x7b0
 800266a:	404b      	eors	r3, r1
 800266c:	f8cd 37b4 	str.w	r3, [sp, #1972]	; 0x7b4
 8002670:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
 8002674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002678:	f50d 6124 	add.w	r1, sp, #2624	; 0xa40
 800267c:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 8002680:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002684:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 8002688:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800268c:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 8002690:	6803      	ldr	r3, [r0, #0]
 8002692:	091a      	lsrs	r2, r3, #4
 8002694:	680b      	ldr	r3, [r1, #0]
 8002696:	071b      	lsls	r3, r3, #28
 8002698:	4313      	orrs	r3, r2
 800269a:	f8cd 37bc 	str.w	r3, [sp, #1980]	; 0x7bc
 800269e:	680b      	ldr	r3, [r1, #0]
 80026a0:	091a      	lsrs	r2, r3, #4
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	071b      	lsls	r3, r3, #28
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8cd 37b8 	str.w	r3, [sp, #1976]	; 0x7b8
 80026ac:	f50d 63f7 	add.w	r3, sp, #1976	; 0x7b8
 80026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b4:	f60d 21a8 	addw	r1, sp, #2728	; 0xaa8
 80026b8:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 80026bc:	f50d 6321 	add.w	r3, sp, #2576	; 0xa10
 80026c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026c4:	f50d 6326 	add.w	r3, sp, #2656	; 0xa60
 80026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026cc:	ea80 0c02 	eor.w	ip, r0, r2
 80026d0:	f8cd c7c0 	str.w	ip, [sp, #1984]	; 0x7c0
 80026d4:	404b      	eors	r3, r1
 80026d6:	f8cd 37c4 	str.w	r3, [sp, #1988]	; 0x7c4
 80026da:	f50d 63f8 	add.w	r3, sp, #1984	; 0x7c0
 80026de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e2:	f50d 6121 	add.w	r1, sp, #2576	; 0xa10
 80026e6:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 80026ea:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80026ee:	f5a3 70b8 	sub.w	r0, r3, #368	; 0x170
 80026f2:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80026f6:	f5a3 71b6 	sub.w	r1, r3, #364	; 0x16c
 80026fa:	6803      	ldr	r3, [r0, #0]
 80026fc:	0b1a      	lsrs	r2, r3, #12
 80026fe:	680b      	ldr	r3, [r1, #0]
 8002700:	051b      	lsls	r3, r3, #20
 8002702:	4313      	orrs	r3, r2
 8002704:	f8cd 37cc 	str.w	r3, [sp, #1996]	; 0x7cc
 8002708:	680b      	ldr	r3, [r1, #0]
 800270a:	0b1a      	lsrs	r2, r3, #12
 800270c:	6803      	ldr	r3, [r0, #0]
 800270e:	051b      	lsls	r3, r3, #20
 8002710:	4313      	orrs	r3, r2
 8002712:	f8cd 37c8 	str.w	r3, [sp, #1992]	; 0x7c8
 8002716:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	f50d 612a 	add.w	r1, sp, #2720	; 0xaa0
 8002722:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 8002726:	f60d 2308 	addw	r3, sp, #2568	; 0xa08
 800272a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800272e:	f50d 6328 	add.w	r3, sp, #2688	; 0xa80
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	ea80 0c02 	eor.w	ip, r0, r2
 800273a:	f8cd c7d0 	str.w	ip, [sp, #2000]	; 0x7d0
 800273e:	404b      	eors	r3, r1
 8002740:	f8cd 37d4 	str.w	r3, [sp, #2004]	; 0x7d4
 8002744:	f50d 63fa 	add.w	r3, sp, #2000	; 0x7d0
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
 8002750:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 8002754:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002758:	f5a3 70bc 	sub.w	r0, r3, #376	; 0x178
 800275c:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002760:	f5a3 71ba 	sub.w	r1, r3, #372	; 0x174
 8002764:	6803      	ldr	r3, [r0, #0]
 8002766:	0f5a      	lsrs	r2, r3, #29
 8002768:	680b      	ldr	r3, [r1, #0]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4313      	orrs	r3, r2
 800276e:	f8cd 37dc 	str.w	r3, [sp, #2012]	; 0x7dc
 8002772:	680b      	ldr	r3, [r1, #0]
 8002774:	0f5a      	lsrs	r2, r3, #29
 8002776:	6803      	ldr	r3, [r0, #0]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4313      	orrs	r3, r2
 800277c:	f8cd 37d8 	str.w	r3, [sp, #2008]	; 0x7d8
 8002780:	f50d 63fb 	add.w	r3, sp, #2008	; 0x7d8
 8002784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002788:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
 800278c:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 8002790:	f60d 13d8 	addw	r3, sp, #2520	; 0x9d8
 8002794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002798:	f60d 2378 	addw	r3, sp, #2680	; 0xa78
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	ea80 0c02 	eor.w	ip, r0, r2
 80027a4:	f8cd c7e0 	str.w	ip, [sp, #2016]	; 0x7e0
 80027a8:	404b      	eors	r3, r1
 80027aa:	f8cd 37e4 	str.w	r3, [sp, #2020]	; 0x7e4
 80027ae:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
 80027b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b6:	f60d 11d8 	addw	r1, sp, #2520	; 0x9d8
 80027ba:	e001      	b.n	80027c0 <KeccakF1600_StatePermute+0x2158>
 80027bc:	08007590 	.word	0x08007590
 80027c0:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 80027c4:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80027c8:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 80027cc:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80027d0:	f5a3 71d4 	sub.w	r1, r3, #424	; 0x1a8
 80027d4:	6803      	ldr	r3, [r0, #0]
 80027d6:	035a      	lsls	r2, r3, #13
 80027d8:	680b      	ldr	r3, [r1, #0]
 80027da:	0cdb      	lsrs	r3, r3, #19
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8cd 37e8 	str.w	r3, [sp, #2024]	; 0x7e8
 80027e2:	680b      	ldr	r3, [r1, #0]
 80027e4:	035a      	lsls	r2, r3, #13
 80027e6:	6803      	ldr	r3, [r0, #0]
 80027e8:	0cdb      	lsrs	r3, r3, #19
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8cd 37ec 	str.w	r3, [sp, #2028]	; 0x7ec
 80027f0:	f50d 63fd 	add.w	r3, sp, #2024	; 0x7e8
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	f50d 6129 	add.w	r1, sp, #2704	; 0xa90
 80027fc:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 8002800:	f60d 13a8 	addw	r3, sp, #2472	; 0x9a8
 8002804:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002808:	f50d 6327 	add.w	r3, sp, #2672	; 0xa70
 800280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002810:	ea80 0c02 	eor.w	ip, r0, r2
 8002814:	f8cd c7f0 	str.w	ip, [sp, #2032]	; 0x7f0
 8002818:	404b      	eors	r3, r1
 800281a:	f8cd 37f4 	str.w	r3, [sp, #2036]	; 0x7f4
 800281e:	f50d 63fe 	add.w	r3, sp, #2032	; 0x7f0
 8002822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002826:	f60d 11a8 	addw	r1, sp, #2472	; 0x9a8
 800282a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 800282e:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002832:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8002836:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800283a:	f5a3 71ec 	sub.w	r1, r3, #472	; 0x1d8
 800283e:	6803      	ldr	r3, [r0, #0]
 8002840:	075a      	lsls	r2, r3, #29
 8002842:	680b      	ldr	r3, [r1, #0]
 8002844:	08db      	lsrs	r3, r3, #3
 8002846:	4313      	orrs	r3, r2
 8002848:	f8cd 37f8 	str.w	r3, [sp, #2040]	; 0x7f8
 800284c:	680b      	ldr	r3, [r1, #0]
 800284e:	075a      	lsls	r2, r3, #29
 8002850:	6803      	ldr	r3, [r0, #0]
 8002852:	08db      	lsrs	r3, r3, #3
 8002854:	4313      	orrs	r3, r2
 8002856:	f8cd 37fc 	str.w	r3, [sp, #2044]	; 0x7fc
 800285a:	f50d 63ff 	add.w	r3, sp, #2040	; 0x7f8
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	f60d 2188 	addw	r1, sp, #2696	; 0xa88
 8002866:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 800286a:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 800286e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002872:	43d1      	mvns	r1, r2
 8002874:	91c8      	str	r1, [sp, #800]	; 0x320
 8002876:	43db      	mvns	r3, r3
 8002878:	93c9      	str	r3, [sp, #804]	; 0x324
 800287a:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	e9dd 01c8 	ldrd	r0, r1, [sp, #800]	; 0x320
 8002886:	4684      	mov	ip, r0
 8002888:	ea0c 0c02 	and.w	ip, ip, r2
 800288c:	f8cd c328 	str.w	ip, [sp, #808]	; 0x328
 8002890:	400b      	ands	r3, r1
 8002892:	93cb      	str	r3, [sp, #812]	; 0x32c
 8002894:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	e9dd 01ca 	ldrd	r0, r1, [sp, #808]	; 0x328
 80028a0:	4684      	mov	ip, r0
 80028a2:	ea82 0c0c 	eor.w	ip, r2, ip
 80028a6:	f8cd c800 	str.w	ip, [sp, #2048]	; 0x800
 80028aa:	404b      	eors	r3, r1
 80028ac:	f8cd 3804 	str.w	r3, [sp, #2052]	; 0x804
 80028b0:	f50d 6300 	add.w	r3, sp, #2048	; 0x800
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	f60d 3148 	addw	r1, sp, #2888	; 0xb48
 80028bc:	e9c1 2300 	strd	r2, r3, [r1]
            Age =   BCe ^((~BCi)&  BCo );
 80028c0:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 80028c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c8:	43d1      	mvns	r1, r2
 80028ca:	91cc      	str	r1, [sp, #816]	; 0x330
 80028cc:	43db      	mvns	r3, r3
 80028ce:	93cd      	str	r3, [sp, #820]	; 0x334
 80028d0:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	e9dd 01cc 	ldrd	r0, r1, [sp, #816]	; 0x330
 80028dc:	4684      	mov	ip, r0
 80028de:	ea0c 0c02 	and.w	ip, ip, r2
 80028e2:	f8cd c338 	str.w	ip, [sp, #824]	; 0x338
 80028e6:	400b      	ands	r3, r1
 80028e8:	93cf      	str	r3, [sp, #828]	; 0x33c
 80028ea:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 80028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f2:	e9dd 01ce 	ldrd	r0, r1, [sp, #824]	; 0x338
 80028f6:	4684      	mov	ip, r0
 80028f8:	ea82 0c0c 	eor.w	ip, r2, ip
 80028fc:	f8cd c808 	str.w	ip, [sp, #2056]	; 0x808
 8002900:	404b      	eors	r3, r1
 8002902:	f8cd 380c 	str.w	r3, [sp, #2060]	; 0x80c
 8002906:	f60d 0308 	addw	r3, sp, #2056	; 0x808
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	f50d 6134 	add.w	r1, sp, #2880	; 0xb40
 8002912:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 8002916:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	43d1      	mvns	r1, r2
 8002920:	91d0      	str	r1, [sp, #832]	; 0x340
 8002922:	43db      	mvns	r3, r3
 8002924:	93d1      	str	r3, [sp, #836]	; 0x344
 8002926:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 800292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292e:	e9dd 01d0 	ldrd	r0, r1, [sp, #832]	; 0x340
 8002932:	4684      	mov	ip, r0
 8002934:	ea0c 0c02 	and.w	ip, ip, r2
 8002938:	f8cd c348 	str.w	ip, [sp, #840]	; 0x348
 800293c:	400b      	ands	r3, r1
 800293e:	93d3      	str	r3, [sp, #844]	; 0x34c
 8002940:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8002944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002948:	e9dd 01d2 	ldrd	r0, r1, [sp, #840]	; 0x348
 800294c:	4684      	mov	ip, r0
 800294e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002952:	f8cd c810 	str.w	ip, [sp, #2064]	; 0x810
 8002956:	404b      	eors	r3, r1
 8002958:	f8cd 3814 	str.w	r3, [sp, #2068]	; 0x814
 800295c:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f60d 3138 	addw	r1, sp, #2872	; 0xb38
 8002968:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 800296c:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	43d1      	mvns	r1, r2
 8002976:	91d4      	str	r1, [sp, #848]	; 0x350
 8002978:	43db      	mvns	r3, r3
 800297a:	93d5      	str	r3, [sp, #852]	; 0x354
 800297c:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	e9dd 01d4 	ldrd	r0, r1, [sp, #848]	; 0x350
 8002988:	4684      	mov	ip, r0
 800298a:	ea0c 0c02 	and.w	ip, ip, r2
 800298e:	f8cd c358 	str.w	ip, [sp, #856]	; 0x358
 8002992:	400b      	ands	r3, r1
 8002994:	93d7      	str	r3, [sp, #860]	; 0x35c
 8002996:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	e9dd 01d6 	ldrd	r0, r1, [sp, #856]	; 0x358
 80029a2:	4684      	mov	ip, r0
 80029a4:	ea82 0c0c 	eor.w	ip, r2, ip
 80029a8:	f8cd c818 	str.w	ip, [sp, #2072]	; 0x818
 80029ac:	404b      	eors	r3, r1
 80029ae:	f8cd 381c 	str.w	r3, [sp, #2076]	; 0x81c
 80029b2:	f60d 0318 	addw	r3, sp, #2072	; 0x818
 80029b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ba:	f50d 6133 	add.w	r1, sp, #2864	; 0xb30
 80029be:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 80029c2:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	43d1      	mvns	r1, r2
 80029cc:	91d8      	str	r1, [sp, #864]	; 0x360
 80029ce:	43db      	mvns	r3, r3
 80029d0:	93d9      	str	r3, [sp, #868]	; 0x364
 80029d2:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	e9dd 01d8 	ldrd	r0, r1, [sp, #864]	; 0x360
 80029de:	4684      	mov	ip, r0
 80029e0:	ea0c 0c02 	and.w	ip, ip, r2
 80029e4:	f8cd c368 	str.w	ip, [sp, #872]	; 0x368
 80029e8:	400b      	ands	r3, r1
 80029ea:	93db      	str	r3, [sp, #876]	; 0x36c
 80029ec:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	e9dd 01da 	ldrd	r0, r1, [sp, #872]	; 0x368
 80029f8:	4684      	mov	ip, r0
 80029fa:	ea82 0c0c 	eor.w	ip, r2, ip
 80029fe:	f8cd c820 	str.w	ip, [sp, #2080]	; 0x820
 8002a02:	404b      	eors	r3, r1
 8002a04:	f8cd 3824 	str.w	r3, [sp, #2084]	; 0x824
 8002a08:	f50d 6302 	add.w	r3, sp, #2080	; 0x820
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
 8002a14:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 8002a18:	f50d 6325 	add.w	r3, sp, #2640	; 0xa50
 8002a1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a20:	f60d 2378 	addw	r3, sp, #2680	; 0xa78
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	ea80 0c02 	eor.w	ip, r0, r2
 8002a2c:	f8cd c828 	str.w	ip, [sp, #2088]	; 0x828
 8002a30:	404b      	eors	r3, r1
 8002a32:	f8cd 382c 	str.w	r3, [sp, #2092]	; 0x82c
 8002a36:	f60d 0328 	addw	r3, sp, #2088	; 0x828
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	f50d 6125 	add.w	r1, sp, #2640	; 0xa50
 8002a42:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8002a46:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002a4a:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8002a4e:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002a52:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8002a56:	6803      	ldr	r3, [r0, #0]
 8002a58:	0fda      	lsrs	r2, r3, #31
 8002a5a:	680b      	ldr	r3, [r1, #0]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8cd 3834 	str.w	r3, [sp, #2100]	; 0x834
 8002a64:	680b      	ldr	r3, [r1, #0]
 8002a66:	0fda      	lsrs	r2, r3, #31
 8002a68:	6803      	ldr	r3, [r0, #0]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8cd 3830 	str.w	r3, [sp, #2096]	; 0x830
 8002a72:	f50d 6303 	add.w	r3, sp, #2096	; 0x830
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f60d 21a8 	addw	r1, sp, #2728	; 0xaa8
 8002a7e:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 8002a82:	f50d 6322 	add.w	r3, sp, #2592	; 0xa20
 8002a86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a8a:	f50d 6327 	add.w	r3, sp, #2672	; 0xa70
 8002a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a92:	ea80 0c02 	eor.w	ip, r0, r2
 8002a96:	f8cd c838 	str.w	ip, [sp, #2104]	; 0x838
 8002a9a:	404b      	eors	r3, r1
 8002a9c:	f8cd 383c 	str.w	r3, [sp, #2108]	; 0x83c
 8002aa0:	f60d 0338 	addw	r3, sp, #2104	; 0x838
 8002aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa8:	f50d 6122 	add.w	r1, sp, #2592	; 0xa20
 8002aac:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8002ab0:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002ab4:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8002ab8:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002abc:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 8002ac0:	6803      	ldr	r3, [r0, #0]
 8002ac2:	0e9a      	lsrs	r2, r3, #26
 8002ac4:	680b      	ldr	r3, [r1, #0]
 8002ac6:	019b      	lsls	r3, r3, #6
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8cd 3844 	str.w	r3, [sp, #2116]	; 0x844
 8002ace:	680b      	ldr	r3, [r1, #0]
 8002ad0:	0e9a      	lsrs	r2, r3, #26
 8002ad2:	6803      	ldr	r3, [r0, #0]
 8002ad4:	019b      	lsls	r3, r3, #6
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8cd 3840 	str.w	r3, [sp, #2112]	; 0x840
 8002adc:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
 8002ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae4:	f50d 612a 	add.w	r1, sp, #2720	; 0xaa0
 8002ae8:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 8002aec:	f50d 631f 	add.w	r3, sp, #2544	; 0x9f0
 8002af0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002af4:	f60d 2368 	addw	r3, sp, #2664	; 0xa68
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	ea80 0c02 	eor.w	ip, r0, r2
 8002b00:	f8cd c848 	str.w	ip, [sp, #2120]	; 0x848
 8002b04:	404b      	eors	r3, r1
 8002b06:	f8cd 384c 	str.w	r3, [sp, #2124]	; 0x84c
 8002b0a:	f60d 0348 	addw	r3, sp, #2120	; 0x848
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	f50d 611f 	add.w	r1, sp, #2544	; 0x9f0
 8002b16:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 8002b1a:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002b1e:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8002b22:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002b26:	f5a3 71c6 	sub.w	r1, r3, #396	; 0x18c
 8002b2a:	6803      	ldr	r3, [r0, #0]
 8002b2c:	09da      	lsrs	r2, r3, #7
 8002b2e:	680b      	ldr	r3, [r1, #0]
 8002b30:	065b      	lsls	r3, r3, #25
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8cd 3854 	str.w	r3, [sp, #2132]	; 0x854
 8002b38:	680b      	ldr	r3, [r1, #0]
 8002b3a:	09da      	lsrs	r2, r3, #7
 8002b3c:	6803      	ldr	r3, [r0, #0]
 8002b3e:	065b      	lsls	r3, r3, #25
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8cd 3850 	str.w	r3, [sp, #2128]	; 0x850
 8002b46:	f50d 6305 	add.w	r3, sp, #2128	; 0x850
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
 8002b52:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 8002b56:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
 8002b5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b5e:	f50d 6326 	add.w	r3, sp, #2656	; 0xa60
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	ea80 0c02 	eor.w	ip, r0, r2
 8002b6a:	f8cd c858 	str.w	ip, [sp, #2136]	; 0x858
 8002b6e:	404b      	eors	r3, r1
 8002b70:	f8cd 385c 	str.w	r3, [sp, #2140]	; 0x85c
 8002b74:	f60d 0358 	addw	r3, sp, #2136	; 0x858
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f50d 611c 	add.w	r1, sp, #2496	; 0x9c0
 8002b80:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 8002b84:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002b88:	f5a3 70e0 	sub.w	r0, r3, #448	; 0x1c0
 8002b8c:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002b90:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 8002b94:	6803      	ldr	r3, [r0, #0]
 8002b96:	0e1a      	lsrs	r2, r3, #24
 8002b98:	680b      	ldr	r3, [r1, #0]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8cd 3864 	str.w	r3, [sp, #2148]	; 0x864
 8002ba2:	680b      	ldr	r3, [r1, #0]
 8002ba4:	0e1a      	lsrs	r2, r3, #24
 8002ba6:	6803      	ldr	r3, [r0, #0]
 8002ba8:	021b      	lsls	r3, r3, #8
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8cd 3860 	str.w	r3, [sp, #2144]	; 0x860
 8002bb0:	f50d 6306 	add.w	r3, sp, #2144	; 0x860
 8002bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb8:	f50d 6129 	add.w	r1, sp, #2704	; 0xa90
 8002bbc:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 8002bc0:	f60d 13b8 	addw	r3, sp, #2488	; 0x9b8
 8002bc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bc8:	f50d 6328 	add.w	r3, sp, #2688	; 0xa80
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	ea80 0c02 	eor.w	ip, r0, r2
 8002bd4:	f8cd c868 	str.w	ip, [sp, #2152]	; 0x868
 8002bd8:	404b      	eors	r3, r1
 8002bda:	f8cd 386c 	str.w	r3, [sp, #2156]	; 0x86c
 8002bde:	f60d 0368 	addw	r3, sp, #2152	; 0x868
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	f60d 11b8 	addw	r1, sp, #2488	; 0x9b8
 8002bea:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 8002bee:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002bf2:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8002bf6:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002bfa:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 8002bfe:	6803      	ldr	r3, [r0, #0]
 8002c00:	0b9a      	lsrs	r2, r3, #14
 8002c02:	680b      	ldr	r3, [r1, #0]
 8002c04:	049b      	lsls	r3, r3, #18
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8cd 3874 	str.w	r3, [sp, #2164]	; 0x874
 8002c0c:	680b      	ldr	r3, [r1, #0]
 8002c0e:	0b9a      	lsrs	r2, r3, #14
 8002c10:	6803      	ldr	r3, [r0, #0]
 8002c12:	049b      	lsls	r3, r3, #18
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8cd 3870 	str.w	r3, [sp, #2160]	; 0x870
 8002c1a:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
 8002c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c22:	f60d 2188 	addw	r1, sp, #2696	; 0xa88
 8002c26:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 8002c2a:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	43d1      	mvns	r1, r2
 8002c34:	91dc      	str	r1, [sp, #880]	; 0x370
 8002c36:	43db      	mvns	r3, r3
 8002c38:	93dd      	str	r3, [sp, #884]	; 0x374
 8002c3a:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8002c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c42:	e9dd 01dc 	ldrd	r0, r1, [sp, #880]	; 0x370
 8002c46:	4684      	mov	ip, r0
 8002c48:	ea0c 0c02 	and.w	ip, ip, r2
 8002c4c:	f8cd c378 	str.w	ip, [sp, #888]	; 0x378
 8002c50:	400b      	ands	r3, r1
 8002c52:	93df      	str	r3, [sp, #892]	; 0x37c
 8002c54:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	e9dd 01de 	ldrd	r0, r1, [sp, #888]	; 0x378
 8002c60:	4684      	mov	ip, r0
 8002c62:	ea82 0c0c 	eor.w	ip, r2, ip
 8002c66:	f8cd c878 	str.w	ip, [sp, #2168]	; 0x878
 8002c6a:	404b      	eors	r3, r1
 8002c6c:	f8cd 387c 	str.w	r3, [sp, #2172]	; 0x87c
 8002c70:	f60d 0378 	addw	r3, sp, #2168	; 0x878
 8002c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c78:	f50d 6132 	add.w	r1, sp, #2848	; 0xb20
 8002c7c:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 8002c80:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	43d1      	mvns	r1, r2
 8002c8a:	91e0      	str	r1, [sp, #896]	; 0x380
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	93e1      	str	r3, [sp, #900]	; 0x384
 8002c90:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8002c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c98:	e9dd 01e0 	ldrd	r0, r1, [sp, #896]	; 0x380
 8002c9c:	4684      	mov	ip, r0
 8002c9e:	ea0c 0c02 	and.w	ip, ip, r2
 8002ca2:	f8cd c388 	str.w	ip, [sp, #904]	; 0x388
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	93e3      	str	r3, [sp, #908]	; 0x38c
 8002caa:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	e9dd 01e2 	ldrd	r0, r1, [sp, #904]	; 0x388
 8002cb6:	4684      	mov	ip, r0
 8002cb8:	ea82 0c0c 	eor.w	ip, r2, ip
 8002cbc:	f8cd c880 	str.w	ip, [sp, #2176]	; 0x880
 8002cc0:	404b      	eors	r3, r1
 8002cc2:	f8cd 3884 	str.w	r3, [sp, #2180]	; 0x884
 8002cc6:	f50d 6308 	add.w	r3, sp, #2176	; 0x880
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f60d 3118 	addw	r1, sp, #2840	; 0xb18
 8002cd2:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 8002cd6:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8002cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cde:	43d1      	mvns	r1, r2
 8002ce0:	91e4      	str	r1, [sp, #912]	; 0x390
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	93e5      	str	r3, [sp, #916]	; 0x394
 8002ce6:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	e9dd 01e4 	ldrd	r0, r1, [sp, #912]	; 0x390
 8002cf2:	4684      	mov	ip, r0
 8002cf4:	ea0c 0c02 	and.w	ip, ip, r2
 8002cf8:	f8cd c398 	str.w	ip, [sp, #920]	; 0x398
 8002cfc:	400b      	ands	r3, r1
 8002cfe:	93e7      	str	r3, [sp, #924]	; 0x39c
 8002d00:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8002d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d08:	e9dd 01e6 	ldrd	r0, r1, [sp, #920]	; 0x398
 8002d0c:	4684      	mov	ip, r0
 8002d0e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002d12:	f8cd c888 	str.w	ip, [sp, #2184]	; 0x888
 8002d16:	404b      	eors	r3, r1
 8002d18:	f8cd 388c 	str.w	r3, [sp, #2188]	; 0x88c
 8002d1c:	f60d 0388 	addw	r3, sp, #2184	; 0x888
 8002d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d24:	f50d 6131 	add.w	r1, sp, #2832	; 0xb10
 8002d28:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 8002d2c:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	43d1      	mvns	r1, r2
 8002d36:	91e8      	str	r1, [sp, #928]	; 0x3a0
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	93e9      	str	r3, [sp, #932]	; 0x3a4
 8002d3c:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8002d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d44:	e9dd 01e8 	ldrd	r0, r1, [sp, #928]	; 0x3a0
 8002d48:	4684      	mov	ip, r0
 8002d4a:	ea0c 0c02 	and.w	ip, ip, r2
 8002d4e:	f8cd c3a8 	str.w	ip, [sp, #936]	; 0x3a8
 8002d52:	400b      	ands	r3, r1
 8002d54:	93eb      	str	r3, [sp, #940]	; 0x3ac
 8002d56:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	e9dd 01ea 	ldrd	r0, r1, [sp, #936]	; 0x3a8
 8002d62:	4684      	mov	ip, r0
 8002d64:	ea82 0c0c 	eor.w	ip, r2, ip
 8002d68:	f8cd c890 	str.w	ip, [sp, #2192]	; 0x890
 8002d6c:	404b      	eors	r3, r1
 8002d6e:	f8cd 3894 	str.w	r3, [sp, #2196]	; 0x894
 8002d72:	f50d 6309 	add.w	r3, sp, #2192	; 0x890
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f60d 3108 	addw	r1, sp, #2824	; 0xb08
 8002d7e:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 8002d82:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8002d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8a:	43d1      	mvns	r1, r2
 8002d8c:	91ec      	str	r1, [sp, #944]	; 0x3b0
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	93ed      	str	r3, [sp, #948]	; 0x3b4
 8002d92:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8002d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9a:	e9dd 01ec 	ldrd	r0, r1, [sp, #944]	; 0x3b0
 8002d9e:	4684      	mov	ip, r0
 8002da0:	ea0c 0c02 	and.w	ip, ip, r2
 8002da4:	f8cd c3b8 	str.w	ip, [sp, #952]	; 0x3b8
 8002da8:	400b      	ands	r3, r1
 8002daa:	93ef      	str	r3, [sp, #956]	; 0x3bc
 8002dac:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	e9dd 01ee 	ldrd	r0, r1, [sp, #952]	; 0x3b8
 8002db8:	4684      	mov	ip, r0
 8002dba:	ea82 0c0c 	eor.w	ip, r2, ip
 8002dbe:	f8cd c898 	str.w	ip, [sp, #2200]	; 0x898
 8002dc2:	404b      	eors	r3, r1
 8002dc4:	f8cd 389c 	str.w	r3, [sp, #2204]	; 0x89c
 8002dc8:	f60d 0398 	addw	r3, sp, #2200	; 0x898
 8002dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd0:	f50d 6130 	add.w	r1, sp, #2816	; 0xb00
 8002dd4:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 8002dd8:	f60d 2338 	addw	r3, sp, #2616	; 0xa38
 8002ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002de0:	f50d 6326 	add.w	r3, sp, #2656	; 0xa60
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	ea80 0c02 	eor.w	ip, r0, r2
 8002dec:	f8cd c8a0 	str.w	ip, [sp, #2208]	; 0x8a0
 8002df0:	404b      	eors	r3, r1
 8002df2:	f8cd 38a4 	str.w	r3, [sp, #2212]	; 0x8a4
 8002df6:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
 8002e02:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 8002e06:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002e0a:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 8002e0e:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002e12:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 8002e16:	6803      	ldr	r3, [r0, #0]
 8002e18:	095a      	lsrs	r2, r3, #5
 8002e1a:	680b      	ldr	r3, [r1, #0]
 8002e1c:	06db      	lsls	r3, r3, #27
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8cd 38ac 	str.w	r3, [sp, #2220]	; 0x8ac
 8002e24:	680b      	ldr	r3, [r1, #0]
 8002e26:	095a      	lsrs	r2, r3, #5
 8002e28:	6803      	ldr	r3, [r0, #0]
 8002e2a:	06db      	lsls	r3, r3, #27
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8cd 38a8 	str.w	r3, [sp, #2216]	; 0x8a8
 8002e32:	f60d 03a8 	addw	r3, sp, #2216	; 0x8a8
 8002e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3a:	f60d 21a8 	addw	r1, sp, #2728	; 0xaa8
 8002e3e:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 8002e42:	f50d 6323 	add.w	r3, sp, #2608	; 0xa30
 8002e46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e4a:	f50d 6328 	add.w	r3, sp, #2688	; 0xa80
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	ea80 0c02 	eor.w	ip, r0, r2
 8002e56:	f8cd c8b0 	str.w	ip, [sp, #2224]	; 0x8b0
 8002e5a:	404b      	eors	r3, r1
 8002e5c:	f8cd 38b4 	str.w	r3, [sp, #2228]	; 0x8b4
 8002e60:	f50d 630b 	add.w	r3, sp, #2224	; 0x8b0
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	f50d 6123 	add.w	r1, sp, #2608	; 0xa30
 8002e6c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 8002e70:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002e74:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8002e78:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002e7c:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8002e80:	6803      	ldr	r3, [r0, #0]
 8002e82:	011a      	lsls	r2, r3, #4
 8002e84:	680b      	ldr	r3, [r1, #0]
 8002e86:	0f1b      	lsrs	r3, r3, #28
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8cd 38b8 	str.w	r3, [sp, #2232]	; 0x8b8
 8002e8e:	680b      	ldr	r3, [r1, #0]
 8002e90:	011a      	lsls	r2, r3, #4
 8002e92:	6803      	ldr	r3, [r0, #0]
 8002e94:	0f1b      	lsrs	r3, r3, #28
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8cd 38bc 	str.w	r3, [sp, #2236]	; 0x8bc
 8002e9c:	f60d 03b8 	addw	r3, sp, #2232	; 0x8b8
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f50d 612a 	add.w	r1, sp, #2720	; 0xaa0
 8002ea8:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 8002eac:	f50d 6320 	add.w	r3, sp, #2560	; 0xa00
 8002eb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eb4:	f60d 2378 	addw	r3, sp, #2680	; 0xa78
 8002eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebc:	ea80 0c02 	eor.w	ip, r0, r2
 8002ec0:	f8cd c8c0 	str.w	ip, [sp, #2240]	; 0x8c0
 8002ec4:	404b      	eors	r3, r1
 8002ec6:	f8cd 38c4 	str.w	r3, [sp, #2244]	; 0x8c4
 8002eca:	f50d 630c 	add.w	r3, sp, #2240	; 0x8c0
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f50d 6120 	add.w	r1, sp, #2560	; 0xa00
 8002ed6:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 8002eda:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002ede:	f5a3 70c0 	sub.w	r0, r3, #384	; 0x180
 8002ee2:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002ee6:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 8002eea:	6803      	ldr	r3, [r0, #0]
 8002eec:	0d9a      	lsrs	r2, r3, #22
 8002eee:	680b      	ldr	r3, [r1, #0]
 8002ef0:	029b      	lsls	r3, r3, #10
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8cd 38cc 	str.w	r3, [sp, #2252]	; 0x8cc
 8002ef8:	680b      	ldr	r3, [r1, #0]
 8002efa:	0d9a      	lsrs	r2, r3, #22
 8002efc:	6803      	ldr	r3, [r0, #0]
 8002efe:	029b      	lsls	r3, r3, #10
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8cd 38c8 	str.w	r3, [sp, #2248]	; 0x8c8
 8002f06:	f60d 03c8 	addw	r3, sp, #2248	; 0x8c8
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
 8002f12:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 8002f16:	f50d 631d 	add.w	r3, sp, #2512	; 0x9d0
 8002f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f1e:	f50d 6327 	add.w	r3, sp, #2672	; 0xa70
 8002f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f26:	ea80 0c02 	eor.w	ip, r0, r2
 8002f2a:	f8cd c8d0 	str.w	ip, [sp, #2256]	; 0x8d0
 8002f2e:	404b      	eors	r3, r1
 8002f30:	f8cd 38d4 	str.w	r3, [sp, #2260]	; 0x8d4
 8002f34:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f50d 611d 	add.w	r1, sp, #2512	; 0x9d0
 8002f40:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 8002f44:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002f48:	f5a3 70d8 	sub.w	r0, r3, #432	; 0x1b0
 8002f4c:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002f50:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 8002f54:	6803      	ldr	r3, [r0, #0]
 8002f56:	0c5a      	lsrs	r2, r3, #17
 8002f58:	680b      	ldr	r3, [r1, #0]
 8002f5a:	03db      	lsls	r3, r3, #15
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8cd 38dc 	str.w	r3, [sp, #2268]	; 0x8dc
 8002f62:	680b      	ldr	r3, [r1, #0]
 8002f64:	0c5a      	lsrs	r2, r3, #17
 8002f66:	6803      	ldr	r3, [r0, #0]
 8002f68:	03db      	lsls	r3, r3, #15
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8cd 38d8 	str.w	r3, [sp, #2264]	; 0x8d8
 8002f70:	f60d 03d8 	addw	r3, sp, #2264	; 0x8d8
 8002f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f78:	f50d 6129 	add.w	r1, sp, #2704	; 0xa90
 8002f7c:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 8002f80:	f50d 631a 	add.w	r3, sp, #2464	; 0x9a0
 8002f84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f88:	f60d 2368 	addw	r3, sp, #2664	; 0xa68
 8002f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f90:	ea80 0c02 	eor.w	ip, r0, r2
 8002f94:	f8cd c8e0 	str.w	ip, [sp, #2272]	; 0x8e0
 8002f98:	404b      	eors	r3, r1
 8002f9a:	f8cd 38e4 	str.w	r3, [sp, #2276]	; 0x8e4
 8002f9e:	f50d 630e 	add.w	r3, sp, #2272	; 0x8e0
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	f50d 611a 	add.w	r1, sp, #2464	; 0x9a0
 8002faa:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 8002fae:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002fb2:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 8002fb6:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8002fba:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 8002fbe:	6803      	ldr	r3, [r0, #0]
 8002fc0:	061a      	lsls	r2, r3, #24
 8002fc2:	680b      	ldr	r3, [r1, #0]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8cd 38e8 	str.w	r3, [sp, #2280]	; 0x8e8
 8002fcc:	680b      	ldr	r3, [r1, #0]
 8002fce:	061a      	lsls	r2, r3, #24
 8002fd0:	6803      	ldr	r3, [r0, #0]
 8002fd2:	0a1b      	lsrs	r3, r3, #8
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8cd 38ec 	str.w	r3, [sp, #2284]	; 0x8ec
 8002fda:	f60d 03e8 	addw	r3, sp, #2280	; 0x8e8
 8002fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe2:	f60d 2188 	addw	r1, sp, #2696	; 0xa88
 8002fe6:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 8002fea:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	43d1      	mvns	r1, r2
 8002ff4:	91f0      	str	r1, [sp, #960]	; 0x3c0
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	93f1      	str	r3, [sp, #964]	; 0x3c4
 8002ffa:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	e9dd 01f0 	ldrd	r0, r1, [sp, #960]	; 0x3c0
 8003006:	4684      	mov	ip, r0
 8003008:	ea0c 0c02 	and.w	ip, ip, r2
 800300c:	f8cd c3c8 	str.w	ip, [sp, #968]	; 0x3c8
 8003010:	400b      	ands	r3, r1
 8003012:	93f3      	str	r3, [sp, #972]	; 0x3cc
 8003014:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8003018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301c:	e9dd 01f2 	ldrd	r0, r1, [sp, #968]	; 0x3c8
 8003020:	4684      	mov	ip, r0
 8003022:	ea82 0c0c 	eor.w	ip, r2, ip
 8003026:	f8cd c8f0 	str.w	ip, [sp, #2288]	; 0x8f0
 800302a:	404b      	eors	r3, r1
 800302c:	f8cd 38f4 	str.w	r3, [sp, #2292]	; 0x8f4
 8003030:	f50d 630f 	add.w	r3, sp, #2288	; 0x8f0
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
 800303c:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 8003040:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	43d1      	mvns	r1, r2
 800304a:	91f4      	str	r1, [sp, #976]	; 0x3d0
 800304c:	43db      	mvns	r3, r3
 800304e:	93f5      	str	r3, [sp, #980]	; 0x3d4
 8003050:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	e9dd 01f4 	ldrd	r0, r1, [sp, #976]	; 0x3d0
 800305c:	4684      	mov	ip, r0
 800305e:	ea0c 0c02 	and.w	ip, ip, r2
 8003062:	f8cd c3d8 	str.w	ip, [sp, #984]	; 0x3d8
 8003066:	400b      	ands	r3, r1
 8003068:	93f7      	str	r3, [sp, #988]	; 0x3dc
 800306a:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	e9dd 01f6 	ldrd	r0, r1, [sp, #984]	; 0x3d8
 8003076:	4684      	mov	ip, r0
 8003078:	ea82 0c0c 	eor.w	ip, r2, ip
 800307c:	f8cd c8f8 	str.w	ip, [sp, #2296]	; 0x8f8
 8003080:	404b      	eors	r3, r1
 8003082:	f8cd 38fc 	str.w	r3, [sp, #2300]	; 0x8fc
 8003086:	f60d 03f8 	addw	r3, sp, #2296	; 0x8f8
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	f50d 612f 	add.w	r1, sp, #2800	; 0xaf0
 8003092:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 8003096:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	43d1      	mvns	r1, r2
 80030a0:	91f8      	str	r1, [sp, #992]	; 0x3e0
 80030a2:	43db      	mvns	r3, r3
 80030a4:	93f9      	str	r3, [sp, #996]	; 0x3e4
 80030a6:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	e9dd 01f8 	ldrd	r0, r1, [sp, #992]	; 0x3e0
 80030b2:	4684      	mov	ip, r0
 80030b4:	ea0c 0c02 	and.w	ip, ip, r2
 80030b8:	f8cd c3e8 	str.w	ip, [sp, #1000]	; 0x3e8
 80030bc:	400b      	ands	r3, r1
 80030be:	93fb      	str	r3, [sp, #1004]	; 0x3ec
 80030c0:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	e9dd 01fa 	ldrd	r0, r1, [sp, #1000]	; 0x3e8
 80030cc:	4684      	mov	ip, r0
 80030ce:	ea82 0c0c 	eor.w	ip, r2, ip
 80030d2:	f8cd c900 	str.w	ip, [sp, #2304]	; 0x900
 80030d6:	404b      	eors	r3, r1
 80030d8:	f8cd 3904 	str.w	r3, [sp, #2308]	; 0x904
 80030dc:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	f60d 21e8 	addw	r1, sp, #2792	; 0xae8
 80030e8:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 80030ec:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	43d1      	mvns	r1, r2
 80030f6:	91fc      	str	r1, [sp, #1008]	; 0x3f0
 80030f8:	43db      	mvns	r3, r3
 80030fa:	93fd      	str	r3, [sp, #1012]	; 0x3f4
 80030fc:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8003100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003104:	e9dd 01fc 	ldrd	r0, r1, [sp, #1008]	; 0x3f0
 8003108:	4684      	mov	ip, r0
 800310a:	ea0c 0c02 	and.w	ip, ip, r2
 800310e:	f8cd c3f8 	str.w	ip, [sp, #1016]	; 0x3f8
 8003112:	400b      	ands	r3, r1
 8003114:	93ff      	str	r3, [sp, #1020]	; 0x3fc
 8003116:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	e9dd 01fe 	ldrd	r0, r1, [sp, #1016]	; 0x3f8
 8003122:	4684      	mov	ip, r0
 8003124:	ea82 0c0c 	eor.w	ip, r2, ip
 8003128:	f8cd c908 	str.w	ip, [sp, #2312]	; 0x908
 800312c:	404b      	eors	r3, r1
 800312e:	f8cd 390c 	str.w	r3, [sp, #2316]	; 0x90c
 8003132:	f60d 1308 	addw	r3, sp, #2312	; 0x908
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f50d 612e 	add.w	r1, sp, #2784	; 0xae0
 800313e:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 8003142:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8003146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314a:	43d1      	mvns	r1, r2
 800314c:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
 8003150:	43db      	mvns	r3, r3
 8003152:	f8cd 3404 	str.w	r3, [sp, #1028]	; 0x404
 8003156:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	f50d 6180 	add.w	r1, sp, #1024	; 0x400
 8003162:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003166:	4684      	mov	ip, r0
 8003168:	ea0c 0c02 	and.w	ip, ip, r2
 800316c:	f8cd c408 	str.w	ip, [sp, #1032]	; 0x408
 8003170:	400b      	ands	r3, r1
 8003172:	f8cd 340c 	str.w	r3, [sp, #1036]	; 0x40c
 8003176:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 800317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317e:	f50d 6181 	add.w	r1, sp, #1032	; 0x408
 8003182:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003186:	4684      	mov	ip, r0
 8003188:	ea82 0c0c 	eor.w	ip, r2, ip
 800318c:	f8cd c910 	str.w	ip, [sp, #2320]	; 0x910
 8003190:	404b      	eors	r3, r1
 8003192:	f8cd 3914 	str.w	r3, [sp, #2324]	; 0x914
 8003196:	f50d 6311 	add.w	r3, sp, #2320	; 0x910
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	f60d 21d8 	addw	r1, sp, #2776	; 0xad8
 80031a2:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 80031a6:	f60d 2348 	addw	r3, sp, #2632	; 0xa48
 80031aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ae:	f50d 6327 	add.w	r3, sp, #2672	; 0xa70
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	ea80 0c02 	eor.w	ip, r0, r2
 80031ba:	f8cd c918 	str.w	ip, [sp, #2328]	; 0x918
 80031be:	404b      	eors	r3, r1
 80031c0:	f8cd 391c 	str.w	r3, [sp, #2332]	; 0x91c
 80031c4:	f60d 1318 	addw	r3, sp, #2328	; 0x918
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f60d 2148 	addw	r1, sp, #2632	; 0xa48
 80031d0:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 80031d4:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80031d8:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 80031dc:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80031e0:	f5a3 719c 	sub.w	r1, r3, #312	; 0x138
 80031e4:	6803      	ldr	r3, [r0, #0]
 80031e6:	079a      	lsls	r2, r3, #30
 80031e8:	680b      	ldr	r3, [r1, #0]
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8cd 3920 	str.w	r3, [sp, #2336]	; 0x920
 80031f2:	680b      	ldr	r3, [r1, #0]
 80031f4:	079a      	lsls	r2, r3, #30
 80031f6:	6803      	ldr	r3, [r0, #0]
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8cd 3924 	str.w	r3, [sp, #2340]	; 0x924
 8003200:	f50d 6312 	add.w	r3, sp, #2336	; 0x920
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	f60d 21a8 	addw	r1, sp, #2728	; 0xaa8
 800320c:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 8003210:	f60d 2318 	addw	r3, sp, #2584	; 0xa18
 8003214:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003218:	f60d 2368 	addw	r3, sp, #2664	; 0xa68
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	ea80 0c02 	eor.w	ip, r0, r2
 8003224:	f8cd c928 	str.w	ip, [sp, #2344]	; 0x928
 8003228:	404b      	eors	r3, r1
 800322a:	f8cd 392c 	str.w	r3, [sp, #2348]	; 0x92c
 800322e:	f60d 1328 	addw	r3, sp, #2344	; 0x928
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	f60d 2118 	addw	r1, sp, #2584	; 0xa18
 800323a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 800323e:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8003242:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 8003246:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800324a:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 800324e:	6803      	ldr	r3, [r0, #0]
 8003250:	05da      	lsls	r2, r3, #23
 8003252:	680b      	ldr	r3, [r1, #0]
 8003254:	0a5b      	lsrs	r3, r3, #9
 8003256:	4313      	orrs	r3, r2
 8003258:	f8cd 3930 	str.w	r3, [sp, #2352]	; 0x930
 800325c:	680b      	ldr	r3, [r1, #0]
 800325e:	05da      	lsls	r2, r3, #23
 8003260:	6803      	ldr	r3, [r0, #0]
 8003262:	0a5b      	lsrs	r3, r3, #9
 8003264:	4313      	orrs	r3, r2
 8003266:	f8cd 3934 	str.w	r3, [sp, #2356]	; 0x934
 800326a:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
 800326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003272:	f50d 612a 	add.w	r1, sp, #2720	; 0xaa0
 8003276:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 800327a:	f60d 13e8 	addw	r3, sp, #2536	; 0x9e8
 800327e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003282:	f50d 6326 	add.w	r3, sp, #2656	; 0xa60
 8003286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328a:	ea80 0c02 	eor.w	ip, r0, r2
 800328e:	f8cd c938 	str.w	ip, [sp, #2360]	; 0x938
 8003292:	404b      	eors	r3, r1
 8003294:	f8cd 393c 	str.w	r3, [sp, #2364]	; 0x93c
 8003298:	f60d 1338 	addw	r3, sp, #2360	; 0x938
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	f60d 11e8 	addw	r1, sp, #2536	; 0x9e8
 80032a4:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 80032a8:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80032ac:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 80032b0:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80032b4:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 80032b8:	6803      	ldr	r3, [r0, #0]
 80032ba:	01da      	lsls	r2, r3, #7
 80032bc:	680b      	ldr	r3, [r1, #0]
 80032be:	0e5b      	lsrs	r3, r3, #25
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8cd 3940 	str.w	r3, [sp, #2368]	; 0x940
 80032c6:	680b      	ldr	r3, [r1, #0]
 80032c8:	01da      	lsls	r2, r3, #7
 80032ca:	6803      	ldr	r3, [r0, #0]
 80032cc:	0e5b      	lsrs	r3, r3, #25
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8cd 3944 	str.w	r3, [sp, #2372]	; 0x944
 80032d4:	f50d 6314 	add.w	r3, sp, #2368	; 0x940
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
 80032e0:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 80032e4:	f50d 631e 	add.w	r3, sp, #2528	; 0x9e0
 80032e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ec:	f50d 6328 	add.w	r3, sp, #2688	; 0xa80
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	ea80 0c02 	eor.w	ip, r0, r2
 80032f8:	f8cd c948 	str.w	ip, [sp, #2376]	; 0x948
 80032fc:	404b      	eors	r3, r1
 80032fe:	f8cd 394c 	str.w	r3, [sp, #2380]	; 0x94c
 8003302:	f60d 1348 	addw	r3, sp, #2376	; 0x948
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f50d 611e 	add.w	r1, sp, #2528	; 0x9e0
 800330e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 8003312:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8003316:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 800331a:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800331e:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 8003322:	6803      	ldr	r3, [r0, #0]
 8003324:	025a      	lsls	r2, r3, #9
 8003326:	680b      	ldr	r3, [r1, #0]
 8003328:	0ddb      	lsrs	r3, r3, #23
 800332a:	4313      	orrs	r3, r2
 800332c:	f8cd 3950 	str.w	r3, [sp, #2384]	; 0x950
 8003330:	680b      	ldr	r3, [r1, #0]
 8003332:	025a      	lsls	r2, r3, #9
 8003334:	6803      	ldr	r3, [r0, #0]
 8003336:	0ddb      	lsrs	r3, r3, #23
 8003338:	4313      	orrs	r3, r2
 800333a:	f8cd 3954 	str.w	r3, [sp, #2388]	; 0x954
 800333e:	f50d 6315 	add.w	r3, sp, #2384	; 0x950
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	f50d 6129 	add.w	r1, sp, #2704	; 0xa90
 800334a:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 800334e:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 8003352:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003356:	f60d 2378 	addw	r3, sp, #2680	; 0xa78
 800335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335e:	ea80 0c02 	eor.w	ip, r0, r2
 8003362:	f8cd c958 	str.w	ip, [sp, #2392]	; 0x958
 8003366:	404b      	eors	r3, r1
 8003368:	f8cd 395c 	str.w	r3, [sp, #2396]	; 0x95c
 800336c:	f60d 1358 	addw	r3, sp, #2392	; 0x958
 8003370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003374:	f50d 611b 	add.w	r1, sp, #2480	; 0x9b0
 8003378:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 800337c:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8003380:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 8003384:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8003388:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 800338c:	6803      	ldr	r3, [r0, #0]
 800338e:	0f9a      	lsrs	r2, r3, #30
 8003390:	680b      	ldr	r3, [r1, #0]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4313      	orrs	r3, r2
 8003396:	f8cd 3964 	str.w	r3, [sp, #2404]	; 0x964
 800339a:	680b      	ldr	r3, [r1, #0]
 800339c:	0f9a      	lsrs	r2, r3, #30
 800339e:	6803      	ldr	r3, [r0, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8cd 3960 	str.w	r3, [sp, #2400]	; 0x960
 80033a8:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f60d 2188 	addw	r1, sp, #2696	; 0xa88
 80033b4:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 80033b8:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	43d1      	mvns	r1, r2
 80033c2:	f8cd 1410 	str.w	r1, [sp, #1040]	; 0x410
 80033c6:	43db      	mvns	r3, r3
 80033c8:	f8cd 3414 	str.w	r3, [sp, #1044]	; 0x414
 80033cc:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f50d 6182 	add.w	r1, sp, #1040	; 0x410
 80033d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033dc:	4684      	mov	ip, r0
 80033de:	ea0c 0c02 	and.w	ip, ip, r2
 80033e2:	f8cd c418 	str.w	ip, [sp, #1048]	; 0x418
 80033e6:	400b      	ands	r3, r1
 80033e8:	f8cd 341c 	str.w	r3, [sp, #1052]	; 0x41c
 80033ec:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
 80033f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033fc:	4684      	mov	ip, r0
 80033fe:	ea82 0c0c 	eor.w	ip, r2, ip
 8003402:	f8cd c968 	str.w	ip, [sp, #2408]	; 0x968
 8003406:	404b      	eors	r3, r1
 8003408:	f8cd 396c 	str.w	r3, [sp, #2412]	; 0x96c
 800340c:	f60d 1368 	addw	r3, sp, #2408	; 0x968
 8003410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003414:	f50d 612d 	add.w	r1, sp, #2768	; 0xad0
 8003418:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 800341c:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	43d1      	mvns	r1, r2
 8003426:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
 800342a:	43db      	mvns	r3, r3
 800342c:	f8cd 3424 	str.w	r3, [sp, #1060]	; 0x424
 8003430:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
 800343c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003440:	4684      	mov	ip, r0
 8003442:	ea0c 0c02 	and.w	ip, ip, r2
 8003446:	f8cd c428 	str.w	ip, [sp, #1064]	; 0x428
 800344a:	400b      	ands	r3, r1
 800344c:	f8cd 342c 	str.w	r3, [sp, #1068]	; 0x42c
 8003450:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 8003454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003458:	f50d 6185 	add.w	r1, sp, #1064	; 0x428
 800345c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003460:	4684      	mov	ip, r0
 8003462:	ea82 0c0c 	eor.w	ip, r2, ip
 8003466:	f8cd c970 	str.w	ip, [sp, #2416]	; 0x970
 800346a:	404b      	eors	r3, r1
 800346c:	f8cd 3974 	str.w	r3, [sp, #2420]	; 0x974
 8003470:	f50d 6317 	add.w	r3, sp, #2416	; 0x970
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
 800347c:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 8003480:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	43d1      	mvns	r1, r2
 800348a:	f8cd 1430 	str.w	r1, [sp, #1072]	; 0x430
 800348e:	43db      	mvns	r3, r3
 8003490:	f8cd 3434 	str.w	r3, [sp, #1076]	; 0x434
 8003494:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f50d 6186 	add.w	r1, sp, #1072	; 0x430
 80034a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034a4:	4684      	mov	ip, r0
 80034a6:	ea0c 0c02 	and.w	ip, ip, r2
 80034aa:	f8cd c438 	str.w	ip, [sp, #1080]	; 0x438
 80034ae:	400b      	ands	r3, r1
 80034b0:	f8cd 343c 	str.w	r3, [sp, #1084]	; 0x43c
 80034b4:	f60d 2398 	addw	r3, sp, #2712	; 0xa98
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f50d 6187 	add.w	r1, sp, #1080	; 0x438
 80034c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034c4:	4684      	mov	ip, r0
 80034c6:	ea82 0c0c 	eor.w	ip, r2, ip
 80034ca:	f8cd c978 	str.w	ip, [sp, #2424]	; 0x978
 80034ce:	404b      	eors	r3, r1
 80034d0:	f8cd 397c 	str.w	r3, [sp, #2428]	; 0x97c
 80034d4:	f60d 1378 	addw	r3, sp, #2424	; 0x978
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f50d 612c 	add.w	r1, sp, #2752	; 0xac0
 80034e0:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 80034e4:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	ea6f 0a02 	mvn.w	sl, r2
 80034f0:	ea6f 0b03 	mvn.w	fp, r3
 80034f4:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	ea0a 0802 	and.w	r8, sl, r2
 8003500:	ea0b 0903 	and.w	r9, fp, r3
 8003504:	f50d 6329 	add.w	r3, sp, #2704	; 0xa90
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	ea82 0108 	eor.w	r1, r2, r8
 8003510:	f8cd 1980 	str.w	r1, [sp, #2432]	; 0x980
 8003514:	ea83 0309 	eor.w	r3, r3, r9
 8003518:	f8cd 3984 	str.w	r3, [sp, #2436]	; 0x984
 800351c:	f50d 6318 	add.w	r3, sp, #2432	; 0x980
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f60d 21b8 	addw	r1, sp, #2744	; 0xab8
 8003528:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 800352c:	f60d 23a8 	addw	r3, sp, #2728	; 0xaa8
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	43d6      	mvns	r6, r2
 8003536:	43df      	mvns	r7, r3
 8003538:	f50d 632a 	add.w	r3, sp, #2720	; 0xaa0
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	ea06 0402 	and.w	r4, r6, r2
 8003544:	ea07 0503 	and.w	r5, r7, r3
 8003548:	f60d 2388 	addw	r3, sp, #2696	; 0xa88
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	ea82 0104 	eor.w	r1, r2, r4
 8003554:	f8cd 1988 	str.w	r1, [sp, #2440]	; 0x988
 8003558:	406b      	eors	r3, r5
 800355a:	f8cd 398c 	str.w	r3, [sp, #2444]	; 0x98c
 800355e:	f60d 1388 	addw	r3, sp, #2440	; 0x988
 8003562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003566:	f50d 612b 	add.w	r1, sp, #2736	; 0xab0
 800356a:	e9c1 2300 	strd	r2, r3, [r1]
        for(round = 0; round < NROUNDS; round += 2) {
 800356e:	f8dd 3b7c 	ldr.w	r3, [sp, #2940]	; 0xb7c
 8003572:	3302      	adds	r3, #2
 8003574:	f8cd 3b7c 	str.w	r3, [sp, #2940]	; 0xb7c
 8003578:	f8dd 3b7c 	ldr.w	r3, [sp, #2940]	; 0xb7c
 800357c:	2b17      	cmp	r3, #23
 800357e:	f77d a994 	ble.w	80008aa <KeccakF1600_StatePermute+0x242>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 8003582:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8003586:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800358a:	6819      	ldr	r1, [r3, #0]
 800358c:	f50d 6337 	add.w	r3, sp, #2928	; 0xb70
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 8003598:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800359c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f103 0108 	add.w	r1, r3, #8
 80035a6:	f60d 3368 	addw	r3, sp, #2920	; 0xb68
 80035aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ae:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 80035b2:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80035b6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f103 0110 	add.w	r1, r3, #16
 80035c0:	f50d 6336 	add.w	r3, sp, #2912	; 0xb60
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 80035cc:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80035d0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f103 0118 	add.w	r1, r3, #24
 80035da:	f60d 3358 	addw	r3, sp, #2904	; 0xb58
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 80035e6:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80035ea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f103 0120 	add.w	r1, r3, #32
 80035f4:	f50d 6335 	add.w	r3, sp, #2896	; 0xb50
 80035f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fc:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 8003600:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8003604:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800360e:	f60d 3348 	addw	r3, sp, #2888	; 0xb48
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 800361a:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800361e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003628:	f50d 6334 	add.w	r3, sp, #2880	; 0xb40
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 8003634:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8003638:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003642:	f60d 3338 	addw	r3, sp, #2872	; 0xb38
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 800364e:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8003652:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800365c:	f50d 6333 	add.w	r3, sp, #2864	; 0xb30
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 8003668:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800366c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003676:	f60d 3328 	addw	r3, sp, #2856	; 0xb28
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 8003682:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8003686:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8003690:	f50d 6332 	add.w	r3, sp, #2848	; 0xb20
 8003694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003698:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 800369c:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80036a0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f103 0158 	add.w	r1, r3, #88	; 0x58
 80036aa:	f60d 3318 	addw	r3, sp, #2840	; 0xb18
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 80036b6:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80036ba:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f103 0160 	add.w	r1, r3, #96	; 0x60
 80036c4:	f50d 6331 	add.w	r3, sp, #2832	; 0xb10
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 80036d0:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80036d4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80036de:	f60d 3308 	addw	r3, sp, #2824	; 0xb08
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 80036ea:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80036ee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80036f8:	f50d 6330 	add.w	r3, sp, #2816	; 0xb00
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 8003704:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8003708:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8003712:	f60d 23f8 	addw	r3, sp, #2808	; 0xaf8
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 800371e:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8003722:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f103 0180 	add.w	r1, r3, #128	; 0x80
 800372c:	f50d 632f 	add.w	r3, sp, #2800	; 0xaf0
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 8003738:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800373c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8003746:	f60d 23e8 	addw	r3, sp, #2792	; 0xae8
 800374a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374e:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 8003752:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8003756:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8003760:	f50d 632e 	add.w	r3, sp, #2784	; 0xae0
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 800376c:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 8003770:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800377a:	f60d 23d8 	addw	r3, sp, #2776	; 0xad8
 800377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003782:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 8003786:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 800378a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8003794:	f50d 632d 	add.w	r3, sp, #2768	; 0xad0
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 80037a0:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80037a4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 80037ae:	f60d 23c8 	addw	r3, sp, #2760	; 0xac8
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 80037ba:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80037be:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 80037c8:	f50d 632c 	add.w	r3, sp, #2752	; 0xac0
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 80037d4:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80037d8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 80037e2:	f60d 23b8 	addw	r3, sp, #2744	; 0xab8
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 80037ee:	f50d 6338 	add.w	r3, sp, #2944	; 0xb80
 80037f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 80037fc:	f50d 632b 	add.w	r3, sp, #2736	; 0xab0
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003808:	bf00      	nop
 800380a:	f50d 6d38 	add.w	sp, sp, #2944	; 0xb80
 800380e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003812:	4770      	bx	lr

08003814 <keccak_squeeze>:
static unsigned int keccak_squeeze(uint8_t *out,
                                   size_t outlen,
                                   uint64_t s[25],
                                   unsigned int pos,
                                   unsigned int r)
{
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	9003      	str	r0, [sp, #12]
 800381a:	9102      	str	r1, [sp, #8]
 800381c:	9201      	str	r2, [sp, #4]
 800381e:	9300      	str	r3, [sp, #0]
  unsigned int i;

  while(outlen) {
 8003820:	e03e      	b.n	80038a0 <keccak_squeeze+0x8c>
    if(pos == r) {
 8003822:	9a00      	ldr	r2, [sp, #0]
 8003824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003826:	429a      	cmp	r2, r3
 8003828:	d104      	bne.n	8003834 <keccak_squeeze+0x20>
      KeccakF1600_StatePermute(s);
 800382a:	9801      	ldr	r0, [sp, #4]
 800382c:	f7fc ff1c 	bl	8000668 <KeccakF1600_StatePermute>
      pos = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	9300      	str	r3, [sp, #0]
    }
    for(i=pos;i < r && i < pos+outlen; i++)
 8003834:	9b00      	ldr	r3, [sp, #0]
 8003836:	9305      	str	r3, [sp, #20]
 8003838:	e020      	b.n	800387c <keccak_squeeze+0x68>
      *out++ = s[i/8] >> 8*(i%8);
 800383a:	9b05      	ldr	r3, [sp, #20]
 800383c:	f023 0307 	bic.w	r3, r3, #7
 8003840:	9a01      	ldr	r2, [sp, #4]
 8003842:	4413      	add	r3, r2
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	9905      	ldr	r1, [sp, #20]
 800384a:	f001 0107 	and.w	r1, r1, #7
 800384e:	00c9      	lsls	r1, r1, #3
 8003850:	f1c1 0620 	rsb	r6, r1, #32
 8003854:	f1a1 0020 	sub.w	r0, r1, #32
 8003858:	fa22 f401 	lsr.w	r4, r2, r1
 800385c:	fa03 f606 	lsl.w	r6, r3, r6
 8003860:	4334      	orrs	r4, r6
 8003862:	fa23 f000 	lsr.w	r0, r3, r0
 8003866:	4304      	orrs	r4, r0
 8003868:	fa23 f501 	lsr.w	r5, r3, r1
 800386c:	9b03      	ldr	r3, [sp, #12]
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	9203      	str	r2, [sp, #12]
 8003872:	b2e2      	uxtb	r2, r4
 8003874:	701a      	strb	r2, [r3, #0]
    for(i=pos;i < r && i < pos+outlen; i++)
 8003876:	9b05      	ldr	r3, [sp, #20]
 8003878:	3301      	adds	r3, #1
 800387a:	9305      	str	r3, [sp, #20]
 800387c:	9a05      	ldr	r2, [sp, #20]
 800387e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003880:	429a      	cmp	r2, r3
 8003882:	d205      	bcs.n	8003890 <keccak_squeeze+0x7c>
 8003884:	9a00      	ldr	r2, [sp, #0]
 8003886:	9b02      	ldr	r3, [sp, #8]
 8003888:	4413      	add	r3, r2
 800388a:	9a05      	ldr	r2, [sp, #20]
 800388c:	429a      	cmp	r2, r3
 800388e:	d3d4      	bcc.n	800383a <keccak_squeeze+0x26>
    outlen -= i-pos;
 8003890:	9a00      	ldr	r2, [sp, #0]
 8003892:	9b05      	ldr	r3, [sp, #20]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	9a02      	ldr	r2, [sp, #8]
 8003898:	4413      	add	r3, r2
 800389a:	9302      	str	r3, [sp, #8]
    pos = i;
 800389c:	9b05      	ldr	r3, [sp, #20]
 800389e:	9300      	str	r3, [sp, #0]
  while(outlen) {
 80038a0:	9b02      	ldr	r3, [sp, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1bd      	bne.n	8003822 <keccak_squeeze+0xe>
  }

  return pos;
 80038a6:	9b00      	ldr	r3, [sp, #0]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	b006      	add	sp, #24
 80038ac:	bd70      	pop	{r4, r5, r6, pc}

080038ae <keccak_absorb_once>:
static void keccak_absorb_once(uint64_t s[25],
                               unsigned int r,
                               const uint8_t *in,
                               size_t inlen,
                               uint8_t p)
{
 80038ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b2:	b091      	sub	sp, #68	; 0x44
 80038b4:	900d      	str	r0, [sp, #52]	; 0x34
 80038b6:	910c      	str	r1, [sp, #48]	; 0x30
 80038b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80038ba:	930a      	str	r3, [sp, #40]	; 0x28
  unsigned int i;

  for(i=0;i<25;i++)
 80038bc:	2300      	movs	r3, #0
 80038be:	930f      	str	r3, [sp, #60]	; 0x3c
 80038c0:	e00c      	b.n	80038dc <keccak_absorb_once+0x2e>
    s[i] = 0;
 80038c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038c4:	00da      	lsls	r2, r3, #3
 80038c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038c8:	1899      	adds	r1, r3, r2
 80038ca:	f04f 0200 	mov.w	r2, #0
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 80038d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038d8:	3301      	adds	r3, #1
 80038da:	930f      	str	r3, [sp, #60]	; 0x3c
 80038dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038de:	2b18      	cmp	r3, #24
 80038e0:	d9ef      	bls.n	80038c2 <keccak_absorb_once+0x14>

  while(inlen >= r) {
 80038e2:	e032      	b.n	800394a <keccak_absorb_once+0x9c>
    for(i=0;i<r/8;i++)
 80038e4:	2300      	movs	r3, #0
 80038e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80038e8:	e01f      	b.n	800392a <keccak_absorb_once+0x7c>
      s[i] ^= load64(in+8*i);
 80038ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038ec:	00da      	lsls	r2, r3, #3
 80038ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038f0:	4413      	add	r3, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fc fe54 	bl	80005a0 <load64>
 80038f8:	4604      	mov	r4, r0
 80038fa:	460d      	mov	r5, r1
 80038fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80038fe:	00da      	lsls	r2, r3, #3
 8003900:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003902:	4413      	add	r3, r2
 8003904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800390a:	00da      	lsls	r2, r3, #3
 800390c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800390e:	4413      	add	r3, r2
 8003910:	ea84 0200 	eor.w	r2, r4, r0
 8003914:	9202      	str	r2, [sp, #8]
 8003916:	ea85 0201 	eor.w	r2, r5, r1
 800391a:	9203      	str	r2, [sp, #12]
 800391c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003920:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<r/8;i++)
 8003924:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003926:	3301      	adds	r3, #1
 8003928:	930f      	str	r3, [sp, #60]	; 0x3c
 800392a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800392c:	08da      	lsrs	r2, r3, #3
 800392e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003930:	4293      	cmp	r3, r2
 8003932:	d3da      	bcc.n	80038ea <keccak_absorb_once+0x3c>
    in += r;
 8003934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003938:	4413      	add	r3, r2
 800393a:	930b      	str	r3, [sp, #44]	; 0x2c
    inlen -= r;
 800393c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800393e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	930a      	str	r3, [sp, #40]	; 0x28
    KeccakF1600_StatePermute(s);
 8003944:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003946:	f7fc fe8f 	bl	8000668 <KeccakF1600_StatePermute>
  while(inlen >= r) {
 800394a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800394c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800394e:	429a      	cmp	r2, r3
 8003950:	d2c8      	bcs.n	80038e4 <keccak_absorb_once+0x36>
  }

  for(i=0;i<inlen;i++)
 8003952:	2300      	movs	r3, #0
 8003954:	930f      	str	r3, [sp, #60]	; 0x3c
 8003956:	e038      	b.n	80039ca <keccak_absorb_once+0x11c>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
 8003958:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800395a:	f023 0207 	bic.w	r2, r3, #7
 800395e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003960:	4413      	add	r3, r2
 8003962:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003966:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800396a:	4413      	add	r3, r2
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2200      	movs	r2, #0
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	9201      	str	r2, [sp, #4]
 8003976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	00d9      	lsls	r1, r3, #3
 800397e:	f1a1 0320 	sub.w	r3, r1, #32
 8003982:	f1c1 0220 	rsb	r2, r1, #32
 8003986:	9801      	ldr	r0, [sp, #4]
 8003988:	fa00 f901 	lsl.w	r9, r0, r1
 800398c:	9800      	ldr	r0, [sp, #0]
 800398e:	fa00 f303 	lsl.w	r3, r0, r3
 8003992:	ea49 0903 	orr.w	r9, r9, r3
 8003996:	9b00      	ldr	r3, [sp, #0]
 8003998:	fa23 f202 	lsr.w	r2, r3, r2
 800399c:	ea49 0902 	orr.w	r9, r9, r2
 80039a0:	9b00      	ldr	r3, [sp, #0]
 80039a2:	fa03 f801 	lsl.w	r8, r3, r1
 80039a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80039a8:	f023 0207 	bic.w	r2, r3, #7
 80039ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039ae:	4413      	add	r3, r2
 80039b0:	ea84 0208 	eor.w	r2, r4, r8
 80039b4:	9204      	str	r2, [sp, #16]
 80039b6:	ea85 0209 	eor.w	r2, r5, r9
 80039ba:	9205      	str	r2, [sp, #20]
 80039bc:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80039c0:	e9c3 1200 	strd	r1, r2, [r3]
  for(i=0;i<inlen;i++)
 80039c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80039c6:	3301      	adds	r3, #1
 80039c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80039ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80039cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d3c2      	bcc.n	8003958 <keccak_absorb_once+0xaa>

  s[i/8] ^= (uint64_t)p << 8*(i%8);
 80039d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80039d4:	f023 0307 	bic.w	r3, r3, #7
 80039d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80039da:	4413      	add	r3, r2
 80039dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039e0:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 80039e4:	2200      	movs	r2, #0
 80039e6:	469a      	mov	sl, r3
 80039e8:	4693      	mov	fp, r2
 80039ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	f1a3 0420 	sub.w	r4, r3, #32
 80039f6:	f1c3 0220 	rsb	r2, r3, #32
 80039fa:	fa0b f703 	lsl.w	r7, fp, r3
 80039fe:	fa0a f404 	lsl.w	r4, sl, r4
 8003a02:	4327      	orrs	r7, r4
 8003a04:	fa2a f202 	lsr.w	r2, sl, r2
 8003a08:	4317      	orrs	r7, r2
 8003a0a:	fa0a f603 	lsl.w	r6, sl, r3
 8003a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a10:	f023 0307 	bic.w	r3, r3, #7
 8003a14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a16:	4413      	add	r3, r2
 8003a18:	ea80 0206 	eor.w	r2, r0, r6
 8003a1c:	9206      	str	r2, [sp, #24]
 8003a1e:	ea81 0207 	eor.w	r2, r1, r7
 8003a22:	9207      	str	r2, [sp, #28]
 8003a24:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8003a28:	e9c3 1200 	strd	r1, r2, [r3]
  s[(r-1)/8] ^= 1ULL << 63;
 8003a2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f023 0307 	bic.w	r3, r3, #7
 8003a34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003a36:	4413      	add	r3, r2
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003a3e:	3901      	subs	r1, #1
 8003a40:	f021 0107 	bic.w	r1, r1, #7
 8003a44:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a46:	4401      	add	r1, r0
 8003a48:	9208      	str	r2, [sp, #32]
 8003a4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a50:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8003a54:	e9c1 3400 	strd	r3, r4, [r1]
}
 8003a58:	bf00      	nop
 8003a5a:	b011      	add	sp, #68	; 0x44
 8003a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003a60 <keccak_squeezeblocks>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
 8003a60:	b500      	push	{lr}
 8003a62:	b087      	sub	sp, #28
 8003a64:	9003      	str	r0, [sp, #12]
 8003a66:	9102      	str	r1, [sp, #8]
 8003a68:	9201      	str	r2, [sp, #4]
 8003a6a:	9300      	str	r3, [sp, #0]
  unsigned int i;

  while(nblocks) {
 8003a6c:	e021      	b.n	8003ab2 <keccak_squeezeblocks+0x52>
    KeccakF1600_StatePermute(s);
 8003a6e:	9801      	ldr	r0, [sp, #4]
 8003a70:	f7fc fdfa 	bl	8000668 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 8003a74:	2300      	movs	r3, #0
 8003a76:	9305      	str	r3, [sp, #20]
 8003a78:	e00f      	b.n	8003a9a <keccak_squeezeblocks+0x3a>
      store64(out+8*i, s[i]);
 8003a7a:	9b05      	ldr	r3, [sp, #20]
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	9a03      	ldr	r2, [sp, #12]
 8003a80:	18d1      	adds	r1, r2, r3
 8003a82:	9b05      	ldr	r3, [sp, #20]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	9a01      	ldr	r2, [sp, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	4608      	mov	r0, r1
 8003a90:	f7fc fdc0 	bl	8000614 <store64>
    for(i=0;i<r/8;i++)
 8003a94:	9b05      	ldr	r3, [sp, #20]
 8003a96:	3301      	adds	r3, #1
 8003a98:	9305      	str	r3, [sp, #20]
 8003a9a:	9b00      	ldr	r3, [sp, #0]
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	9a05      	ldr	r2, [sp, #20]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3ea      	bcc.n	8003a7a <keccak_squeezeblocks+0x1a>
    out += r;
 8003aa4:	9a03      	ldr	r2, [sp, #12]
 8003aa6:	9b00      	ldr	r3, [sp, #0]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	9303      	str	r3, [sp, #12]
    nblocks -= 1;
 8003aac:	9b02      	ldr	r3, [sp, #8]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	9302      	str	r3, [sp, #8]
  while(nblocks) {
 8003ab2:	9b02      	ldr	r3, [sp, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1da      	bne.n	8003a6e <keccak_squeezeblocks+0xe>
  }
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	b007      	add	sp, #28
 8003abe:	f85d fb04 	ldr.w	pc, [sp], #4

08003ac2 <pqcrystals_kyber_fips202_ref_shake128_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake128_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
 8003ac2:	b500      	push	{lr}
 8003ac4:	b087      	sub	sp, #28
 8003ac6:	9005      	str	r0, [sp, #20]
 8003ac8:	9104      	str	r1, [sp, #16]
 8003aca:	9203      	str	r2, [sp, #12]
  keccak_absorb_once(state->s, SHAKE128_RATE, in, inlen, 0x1F);
 8003acc:	9805      	ldr	r0, [sp, #20]
 8003ace:	231f      	movs	r3, #31
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	9b03      	ldr	r3, [sp, #12]
 8003ad4:	9a04      	ldr	r2, [sp, #16]
 8003ad6:	21a8      	movs	r1, #168	; 0xa8
 8003ad8:	f7ff fee9 	bl	80038ae <keccak_absorb_once>
  state->pos = SHAKE128_RATE;
 8003adc:	9b05      	ldr	r3, [sp, #20]
 8003ade:	22a8      	movs	r2, #168	; 0xa8
 8003ae0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003ae4:	bf00      	nop
 8003ae6:	b007      	add	sp, #28
 8003ae8:	f85d fb04 	ldr.w	pc, [sp], #4

08003aec <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake128_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 8003aec:	b500      	push	{lr}
 8003aee:	b085      	sub	sp, #20
 8003af0:	9003      	str	r0, [sp, #12]
 8003af2:	9102      	str	r1, [sp, #8]
 8003af4:	9201      	str	r2, [sp, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE128_RATE);
 8003af6:	9a01      	ldr	r2, [sp, #4]
 8003af8:	23a8      	movs	r3, #168	; 0xa8
 8003afa:	9902      	ldr	r1, [sp, #8]
 8003afc:	9803      	ldr	r0, [sp, #12]
 8003afe:	f7ff ffaf 	bl	8003a60 <keccak_squeezeblocks>
}
 8003b02:	bf00      	nop
 8003b04:	b005      	add	sp, #20
 8003b06:	f85d fb04 	ldr.w	pc, [sp], #4

08003b0a <pqcrystals_kyber_fips202_ref_shake256_squeeze>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t outlen : number of bytes to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeeze(uint8_t *out, size_t outlen, keccak_state *state)
{
 8003b0a:	b500      	push	{lr}
 8003b0c:	b087      	sub	sp, #28
 8003b0e:	9005      	str	r0, [sp, #20]
 8003b10:	9104      	str	r1, [sp, #16]
 8003b12:	9203      	str	r2, [sp, #12]
  state->pos = keccak_squeeze(out, outlen, state->s, state->pos, SHAKE256_RATE);
 8003b14:	9a03      	ldr	r2, [sp, #12]
 8003b16:	9b03      	ldr	r3, [sp, #12]
 8003b18:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003b1c:	2188      	movs	r1, #136	; 0x88
 8003b1e:	9100      	str	r1, [sp, #0]
 8003b20:	9904      	ldr	r1, [sp, #16]
 8003b22:	9805      	ldr	r0, [sp, #20]
 8003b24:	f7ff fe76 	bl	8003814 <keccak_squeeze>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	9b03      	ldr	r3, [sp, #12]
 8003b2c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003b30:	bf00      	nop
 8003b32:	b007      	add	sp, #28
 8003b34:	f85d fb04 	ldr.w	pc, [sp], #4

08003b38 <pqcrystals_kyber_fips202_ref_shake256_absorb_once>:
* Arguments:   - keccak_state *state: pointer to (uninitialized) output Keccak state
*              - const uint8_t *in: pointer to input to be absorbed into s
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256_absorb_once(keccak_state *state, const uint8_t *in, size_t inlen)
{
 8003b38:	b500      	push	{lr}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	9005      	str	r0, [sp, #20]
 8003b3e:	9104      	str	r1, [sp, #16]
 8003b40:	9203      	str	r2, [sp, #12]
  keccak_absorb_once(state->s, SHAKE256_RATE, in, inlen, 0x1F);
 8003b42:	9805      	ldr	r0, [sp, #20]
 8003b44:	231f      	movs	r3, #31
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	9b03      	ldr	r3, [sp, #12]
 8003b4a:	9a04      	ldr	r2, [sp, #16]
 8003b4c:	2188      	movs	r1, #136	; 0x88
 8003b4e:	f7ff feae 	bl	80038ae <keccak_absorb_once>
  state->pos = SHAKE256_RATE;
 8003b52:	9b05      	ldr	r3, [sp, #20]
 8003b54:	2288      	movs	r2, #136	; 0x88
 8003b56:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003b5a:	bf00      	nop
 8003b5c:	b007      	add	sp, #28
 8003b5e:	f85d fb04 	ldr.w	pc, [sp], #4

08003b62 <pqcrystals_kyber_fips202_ref_shake256_squeezeblocks>:
* Arguments:   - uint8_t *out: pointer to output blocks
*              - size_t nblocks: number of blocks to be squeezed (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 8003b62:	b500      	push	{lr}
 8003b64:	b085      	sub	sp, #20
 8003b66:	9003      	str	r0, [sp, #12]
 8003b68:	9102      	str	r1, [sp, #8]
 8003b6a:	9201      	str	r2, [sp, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
 8003b6c:	9a01      	ldr	r2, [sp, #4]
 8003b6e:	2388      	movs	r3, #136	; 0x88
 8003b70:	9902      	ldr	r1, [sp, #8]
 8003b72:	9803      	ldr	r0, [sp, #12]
 8003b74:	f7ff ff74 	bl	8003a60 <keccak_squeezeblocks>
}
 8003b78:	bf00      	nop
 8003b7a:	b005      	add	sp, #20
 8003b7c:	f85d fb04 	ldr.w	pc, [sp], #4

08003b80 <pqcrystals_kyber_fips202_ref_shake256>:
*              - size_t outlen: requested output length in bytes
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void shake256(uint8_t *out, size_t outlen, const uint8_t *in, size_t inlen)
{
 8003b80:	b500      	push	{lr}
 8003b82:	b0bb      	sub	sp, #236	; 0xec
 8003b84:	9003      	str	r0, [sp, #12]
 8003b86:	9102      	str	r1, [sp, #8]
 8003b88:	9201      	str	r2, [sp, #4]
 8003b8a:	9300      	str	r3, [sp, #0]
  size_t nblocks;
  keccak_state state;

  shake256_absorb_once(&state, in, inlen);
 8003b8c:	ab04      	add	r3, sp, #16
 8003b8e:	9a00      	ldr	r2, [sp, #0]
 8003b90:	9901      	ldr	r1, [sp, #4]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff ffd0 	bl	8003b38 <pqcrystals_kyber_fips202_ref_shake256_absorb_once>
  nblocks = outlen/SHAKE256_RATE;
 8003b98:	9b02      	ldr	r3, [sp, #8]
 8003b9a:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <pqcrystals_kyber_fips202_ref_shake256+0x68>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	09db      	lsrs	r3, r3, #7
 8003ba2:	9339      	str	r3, [sp, #228]	; 0xe4
  shake256_squeezeblocks(out, nblocks, &state);
 8003ba4:	ab04      	add	r3, sp, #16
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	9939      	ldr	r1, [sp, #228]	; 0xe4
 8003baa:	9803      	ldr	r0, [sp, #12]
 8003bac:	f7ff ffd9 	bl	8003b62 <pqcrystals_kyber_fips202_ref_shake256_squeezeblocks>
  outlen -= nblocks*SHAKE256_RATE;
 8003bb0:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	4413      	add	r3, r2
 8003bb8:	00db      	lsls	r3, r3, #3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	9b02      	ldr	r3, [sp, #8]
 8003bbe:	1a9b      	subs	r3, r3, r2
 8003bc0:	9302      	str	r3, [sp, #8]
  out += nblocks*SHAKE256_RATE;
 8003bc2:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	4413      	add	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	9b03      	ldr	r3, [sp, #12]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	9303      	str	r3, [sp, #12]
  shake256_squeeze(out, outlen, &state);
 8003bd4:	ab04      	add	r3, sp, #16
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	9902      	ldr	r1, [sp, #8]
 8003bda:	9803      	ldr	r0, [sp, #12]
 8003bdc:	f7ff ff95 	bl	8003b0a <pqcrystals_kyber_fips202_ref_shake256_squeeze>
}
 8003be0:	bf00      	nop
 8003be2:	b03b      	add	sp, #236	; 0xec
 8003be4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003be8:	f0f0f0f1 	.word	0xf0f0f0f1

08003bec <pqcrystals_kyber_fips202_ref_sha3_256>:
* Arguments:   - uint8_t *h: pointer to output (32 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_256(uint8_t h[32], const uint8_t *in, size_t inlen)
{
 8003bec:	b500      	push	{lr}
 8003bee:	b0bb      	sub	sp, #236	; 0xec
 8003bf0:	9005      	str	r0, [sp, #20]
 8003bf2:	9104      	str	r1, [sp, #16]
 8003bf4:	9203      	str	r2, [sp, #12]
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_256_RATE, in, inlen, 0x06);
 8003bf6:	a806      	add	r0, sp, #24
 8003bf8:	2306      	movs	r3, #6
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	9b03      	ldr	r3, [sp, #12]
 8003bfe:	9a04      	ldr	r2, [sp, #16]
 8003c00:	2188      	movs	r1, #136	; 0x88
 8003c02:	f7ff fe54 	bl	80038ae <keccak_absorb_once>
  KeccakF1600_StatePermute(s);
 8003c06:	ab06      	add	r3, sp, #24
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fc fd2d 	bl	8000668 <KeccakF1600_StatePermute>
  for(i=0;i<4;i++)
 8003c0e:	2300      	movs	r3, #0
 8003c10:	9339      	str	r3, [sp, #228]	; 0xe4
 8003c12:	e010      	b.n	8003c36 <pqcrystals_kyber_fips202_ref_sha3_256+0x4a>
    store64(h+8*i,s[i]);
 8003c14:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	9a05      	ldr	r2, [sp, #20]
 8003c1a:	18d1      	adds	r1, r2, r3
 8003c1c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	33e8      	adds	r3, #232	; 0xe8
 8003c22:	446b      	add	r3, sp
 8003c24:	3bd0      	subs	r3, #208	; 0xd0
 8003c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2a:	4608      	mov	r0, r1
 8003c2c:	f7fc fcf2 	bl	8000614 <store64>
  for(i=0;i<4;i++)
 8003c30:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8003c32:	3301      	adds	r3, #1
 8003c34:	9339      	str	r3, [sp, #228]	; 0xe4
 8003c36:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d9eb      	bls.n	8003c14 <pqcrystals_kyber_fips202_ref_sha3_256+0x28>
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	b03b      	add	sp, #236	; 0xec
 8003c42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003c48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003c48:	b500      	push	{lr}
 8003c4a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	ab04      	add	r3, sp, #16
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	609a      	str	r2, [r3, #8]
 8003c56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c58:	4b23      	ldr	r3, [pc, #140]	; (8003ce8 <MX_GPIO_Init+0xa0>)
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	4a22      	ldr	r2, [pc, #136]	; (8003ce8 <MX_GPIO_Init+0xa0>)
 8003c5e:	f043 0310 	orr.w	r3, r3, #16
 8003c62:	6193      	str	r3, [r2, #24]
 8003c64:	4b20      	ldr	r3, [pc, #128]	; (8003ce8 <MX_GPIO_Init+0xa0>)
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	9303      	str	r3, [sp, #12]
 8003c6e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c70:	4b1d      	ldr	r3, [pc, #116]	; (8003ce8 <MX_GPIO_Init+0xa0>)
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <MX_GPIO_Init+0xa0>)
 8003c76:	f043 0320 	orr.w	r3, r3, #32
 8003c7a:	6193      	str	r3, [r2, #24]
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <MX_GPIO_Init+0xa0>)
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	9302      	str	r3, [sp, #8]
 8003c86:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c88:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <MX_GPIO_Init+0xa0>)
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <MX_GPIO_Init+0xa0>)
 8003c8e:	f043 0308 	orr.w	r3, r3, #8
 8003c92:	6193      	str	r3, [r2, #24]
 8003c94:	4b14      	ldr	r3, [pc, #80]	; (8003ce8 <MX_GPIO_Init+0xa0>)
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	9301      	str	r3, [sp, #4]
 8003c9e:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca0:	4b11      	ldr	r3, [pc, #68]	; (8003ce8 <MX_GPIO_Init+0xa0>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	4a10      	ldr	r2, [pc, #64]	; (8003ce8 <MX_GPIO_Init+0xa0>)
 8003ca6:	f043 0304 	orr.w	r3, r3, #4
 8003caa:	6193      	str	r3, [r2, #24]
 8003cac:	4b0e      	ldr	r3, [pc, #56]	; (8003ce8 <MX_GPIO_Init+0xa0>)
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	9b00      	ldr	r3, [sp, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003cbe:	480b      	ldr	r0, [pc, #44]	; (8003cec <MX_GPIO_Init+0xa4>)
 8003cc0:	f001 fdd2 	bl	8005868 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003cc4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003cc8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd6:	ab04      	add	r3, sp, #16
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4804      	ldr	r0, [pc, #16]	; (8003cec <MX_GPIO_Init+0xa4>)
 8003cdc:	f001 fc44 	bl	8005568 <HAL_GPIO_Init>

}
 8003ce0:	bf00      	nop
 8003ce2:	b009      	add	sp, #36	; 0x24
 8003ce4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40010c00 	.word	0x40010c00

08003cf0 <pack_pk>:
*              const uint8_t *seed: pointer to the input public seed
**************************************************/
static void pack_pk(uint8_t r[KYBER_INDCPA_PUBLICKEYBYTES],
                    polyvec *pk,
                    const uint8_t seed[KYBER_SYMBYTES])
{
 8003cf0:	b500      	push	{lr}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	9003      	str	r0, [sp, #12]
 8003cf6:	9102      	str	r1, [sp, #8]
 8003cf8:	9201      	str	r2, [sp, #4]
  size_t i;
  polyvec_tobytes(r, pk);
 8003cfa:	9902      	ldr	r1, [sp, #8]
 8003cfc:	9803      	ldr	r0, [sp, #12]
 8003cfe:	f000 fe24 	bl	800494a <pqcrystals_kyber512_ref_polyvec_tobytes>
  for(i=0;i<KYBER_SYMBYTES;i++)
 8003d02:	2300      	movs	r3, #0
 8003d04:	9305      	str	r3, [sp, #20]
 8003d06:	e00c      	b.n	8003d22 <pack_pk+0x32>
    r[i+KYBER_POLYVECBYTES] = seed[i];
 8003d08:	9a01      	ldr	r2, [sp, #4]
 8003d0a:	9b05      	ldr	r3, [sp, #20]
 8003d0c:	441a      	add	r2, r3
 8003d0e:	9b05      	ldr	r3, [sp, #20]
 8003d10:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003d14:	9903      	ldr	r1, [sp, #12]
 8003d16:	440b      	add	r3, r1
 8003d18:	7812      	ldrb	r2, [r2, #0]
 8003d1a:	701a      	strb	r2, [r3, #0]
  for(i=0;i<KYBER_SYMBYTES;i++)
 8003d1c:	9b05      	ldr	r3, [sp, #20]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	9305      	str	r3, [sp, #20]
 8003d22:	9b05      	ldr	r3, [sp, #20]
 8003d24:	2b1f      	cmp	r3, #31
 8003d26:	d9ef      	bls.n	8003d08 <pack_pk+0x18>
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	b007      	add	sp, #28
 8003d2e:	f85d fb04 	ldr.w	pc, [sp], #4

08003d32 <pack_sk>:
*
* Arguments:   - uint8_t *r: pointer to output serialized secret key
*              - polyvec *sk: pointer to input vector of polynomials (secret key)
**************************************************/
static void pack_sk(uint8_t r[KYBER_INDCPA_SECRETKEYBYTES], polyvec *sk)
{
 8003d32:	b500      	push	{lr}
 8003d34:	b083      	sub	sp, #12
 8003d36:	9001      	str	r0, [sp, #4]
 8003d38:	9100      	str	r1, [sp, #0]
  polyvec_tobytes(r, sk);
 8003d3a:	9900      	ldr	r1, [sp, #0]
 8003d3c:	9801      	ldr	r0, [sp, #4]
 8003d3e:	f000 fe04 	bl	800494a <pqcrystals_kyber512_ref_polyvec_tobytes>
}
 8003d42:	bf00      	nop
 8003d44:	b003      	add	sp, #12
 8003d46:	f85d fb04 	ldr.w	pc, [sp], #4

08003d4a <rej_uniform>:
**************************************************/
static unsigned int rej_uniform(int16_t *r,
                                unsigned int len,
                                const uint8_t *buf,
                                unsigned int buflen)
{
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	9003      	str	r0, [sp, #12]
 8003d4e:	9102      	str	r1, [sp, #8]
 8003d50:	9201      	str	r2, [sp, #4]
 8003d52:	9300      	str	r3, [sp, #0]
  unsigned int ctr, pos;
  uint16_t val0, val1;

  ctr = pos = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	9306      	str	r3, [sp, #24]
 8003d58:	9b06      	ldr	r3, [sp, #24]
 8003d5a:	9307      	str	r3, [sp, #28]
  while(ctr < len && pos + 3 <= buflen) {
 8003d5c:	e04b      	b.n	8003df6 <rej_uniform+0xac>
    val0 = ((buf[pos+0] >> 0) | ((uint16_t)buf[pos+1] << 8)) & 0xFFF;
 8003d5e:	9a01      	ldr	r2, [sp, #4]
 8003d60:	9b06      	ldr	r3, [sp, #24]
 8003d62:	4413      	add	r3, r2
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	b21a      	sxth	r2, r3
 8003d68:	9b06      	ldr	r3, [sp, #24]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	9901      	ldr	r1, [sp, #4]
 8003d6e:	440b      	add	r3, r1
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	b21b      	sxth	r3, r3
 8003d76:	4313      	orrs	r3, r2
 8003d78:	b21b      	sxth	r3, r3
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d80:	f8ad 3016 	strh.w	r3, [sp, #22]
    val1 = ((buf[pos+1] >> 4) | ((uint16_t)buf[pos+2] << 4)) & 0xFFF;
 8003d84:	9b06      	ldr	r3, [sp, #24]
 8003d86:	3301      	adds	r3, #1
 8003d88:	9a01      	ldr	r2, [sp, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	091b      	lsrs	r3, r3, #4
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	b21a      	sxth	r2, r3
 8003d94:	9b06      	ldr	r3, [sp, #24]
 8003d96:	3302      	adds	r3, #2
 8003d98:	9901      	ldr	r1, [sp, #4]
 8003d9a:	440b      	add	r3, r1
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	b21b      	sxth	r3, r3
 8003da2:	4313      	orrs	r3, r2
 8003da4:	b21b      	sxth	r3, r3
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dac:	f8ad 3014 	strh.w	r3, [sp, #20]
    pos += 3;
 8003db0:	9b06      	ldr	r3, [sp, #24]
 8003db2:	3303      	adds	r3, #3
 8003db4:	9306      	str	r3, [sp, #24]

    if(val0 < KYBER_Q)
 8003db6:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8003dba:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8003dbe:	d808      	bhi.n	8003dd2 <rej_uniform+0x88>
      r[ctr++] = val0;
 8003dc0:	9b07      	ldr	r3, [sp, #28]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	9207      	str	r2, [sp, #28]
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	9a03      	ldr	r2, [sp, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
 8003dd0:	801a      	strh	r2, [r3, #0]
    if(ctr < len && val1 < KYBER_Q)
 8003dd2:	9a07      	ldr	r2, [sp, #28]
 8003dd4:	9b02      	ldr	r3, [sp, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d20d      	bcs.n	8003df6 <rej_uniform+0xac>
 8003dda:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8003dde:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8003de2:	d808      	bhi.n	8003df6 <rej_uniform+0xac>
      r[ctr++] = val1;
 8003de4:	9b07      	ldr	r3, [sp, #28]
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	9207      	str	r2, [sp, #28]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	9a03      	ldr	r2, [sp, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8003df4:	801a      	strh	r2, [r3, #0]
  while(ctr < len && pos + 3 <= buflen) {
 8003df6:	9a07      	ldr	r2, [sp, #28]
 8003df8:	9b02      	ldr	r3, [sp, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d204      	bcs.n	8003e08 <rej_uniform+0xbe>
 8003dfe:	9b06      	ldr	r3, [sp, #24]
 8003e00:	3303      	adds	r3, #3
 8003e02:	9a00      	ldr	r2, [sp, #0]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d2aa      	bcs.n	8003d5e <rej_uniform+0x14>
  }

  return ctr;
 8003e08:	9b07      	ldr	r3, [sp, #28]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	b008      	add	sp, #32
 8003e0e:	4770      	bx	lr

08003e10 <pqcrystals_kyber512_ref_gen_matrix>:
*              - int transposed: boolean deciding whether A or A^T is generated
**************************************************/
#define GEN_MATRIX_NBLOCKS ((12*KYBER_N/8*(1 << 12)/KYBER_Q + XOF_BLOCKBYTES)/XOF_BLOCKBYTES)
// Not static for benchmarking
void gen_matrix(polyvec *a, const uint8_t seed[KYBER_SYMBYTES], int transposed)
{
 8003e10:	b500      	push	{lr}
 8003e12:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 8003e16:	abbe      	add	r3, sp, #760	; 0x2f8
 8003e18:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8003e1c:	6018      	str	r0, [r3, #0]
 8003e1e:	abbe      	add	r3, sp, #760	; 0x2f8
 8003e20:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8003e24:	6019      	str	r1, [r3, #0]
 8003e26:	abbe      	add	r3, sp, #760	; 0x2f8
 8003e28:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8003e2c:	601a      	str	r2, [r3, #0]
  unsigned int ctr, i, j, k;
  unsigned int buflen, off;
  uint8_t buf[GEN_MATRIX_NBLOCKS*XOF_BLOCKBYTES+2];
  xof_state state;

  for(i=0;i<KYBER_K;i++) {
 8003e2e:	2300      	movs	r3, #0
 8003e30:	93bc      	str	r3, [sp, #752]	; 0x2f0
 8003e32:	e08e      	b.n	8003f52 <pqcrystals_kyber512_ref_gen_matrix+0x142>
    for(j=0;j<KYBER_K;j++) {
 8003e34:	2300      	movs	r3, #0
 8003e36:	93bb      	str	r3, [sp, #748]	; 0x2ec
 8003e38:	e084      	b.n	8003f44 <pqcrystals_kyber512_ref_gen_matrix+0x134>
      if(transposed)
 8003e3a:	abbe      	add	r3, sp, #760	; 0x2f8
 8003e3c:	f5a3 733d 	sub.w	r3, r3, #756	; 0x2f4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00b      	beq.n	8003e5e <pqcrystals_kyber512_ref_gen_matrix+0x4e>
        xof_absorb(&state, seed, i, j);
 8003e46:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	9bbb      	ldr	r3, [sp, #748]	; 0x2ec
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	a9be      	add	r1, sp, #760	; 0x2f8
 8003e50:	f5a1 713c 	sub.w	r1, r1, #752	; 0x2f0
 8003e54:	a804      	add	r0, sp, #16
 8003e56:	6809      	ldr	r1, [r1, #0]
 8003e58:	f001 f86e 	bl	8004f38 <pqcrystals_kyber512_ref_kyber_shake128_absorb>
 8003e5c:	e00a      	b.n	8003e74 <pqcrystals_kyber512_ref_gen_matrix+0x64>
      else
        xof_absorb(&state, seed, j, i);
 8003e5e:	9bbb      	ldr	r3, [sp, #748]	; 0x2ec
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	a9be      	add	r1, sp, #760	; 0x2f8
 8003e68:	f5a1 713c 	sub.w	r1, r1, #752	; 0x2f0
 8003e6c:	a804      	add	r0, sp, #16
 8003e6e:	6809      	ldr	r1, [r1, #0]
 8003e70:	f001 f862 	bl	8004f38 <pqcrystals_kyber512_ref_kyber_shake128_absorb>

      xof_squeezeblocks(buf, GEN_MATRIX_NBLOCKS, &state);
 8003e74:	aa04      	add	r2, sp, #16
 8003e76:	ab39      	add	r3, sp, #228	; 0xe4
 8003e78:	2103      	movs	r1, #3
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fe36 	bl	8003aec <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>
      buflen = GEN_MATRIX_NBLOCKS*XOF_BLOCKBYTES;
 8003e80:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8003e84:	93b9      	str	r3, [sp, #740]	; 0x2e4
      ctr = rej_uniform(a[i].vec[j].coeffs, KYBER_N, buf, buflen);
 8003e86:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 8003e88:	029b      	lsls	r3, r3, #10
 8003e8a:	aabe      	add	r2, sp, #760	; 0x2f8
 8003e8c:	f5a2 723b 	sub.w	r2, r2, #748	; 0x2ec
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	441a      	add	r2, r3
 8003e94:	9bbb      	ldr	r3, [sp, #748]	; 0x2ec
 8003e96:	025b      	lsls	r3, r3, #9
 8003e98:	18d0      	adds	r0, r2, r3
 8003e9a:	aa39      	add	r2, sp, #228	; 0xe4
 8003e9c:	9bb9      	ldr	r3, [sp, #740]	; 0x2e4
 8003e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ea2:	f7ff ff52 	bl	8003d4a <rej_uniform>
 8003ea6:	90bd      	str	r0, [sp, #756]	; 0x2f4

      while(ctr < KYBER_N) {
 8003ea8:	e046      	b.n	8003f38 <pqcrystals_kyber512_ref_gen_matrix+0x128>
        off = buflen % 3;
 8003eaa:	9ab9      	ldr	r2, [sp, #740]	; 0x2e4
 8003eac:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <pqcrystals_kyber512_ref_gen_matrix+0x158>)
 8003eae:	fba3 1302 	umull	r1, r3, r3, r2
 8003eb2:	0859      	lsrs	r1, r3, #1
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	440b      	add	r3, r1
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	93b8      	str	r3, [sp, #736]	; 0x2e0
        for(k = 0; k < off; k++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	93ba      	str	r3, [sp, #744]	; 0x2e8
 8003ec2:	e012      	b.n	8003eea <pqcrystals_kyber512_ref_gen_matrix+0xda>
          buf[k] = buf[buflen - off + k];
 8003ec4:	9ab9      	ldr	r2, [sp, #740]	; 0x2e4
 8003ec6:	9bb8      	ldr	r3, [sp, #736]	; 0x2e0
 8003ec8:	1ad2      	subs	r2, r2, r3
 8003eca:	9bba      	ldr	r3, [sp, #744]	; 0x2e8
 8003ecc:	4413      	add	r3, r2
 8003ece:	aabe      	add	r2, sp, #760	; 0x2f8
 8003ed0:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8003ed4:	5cd1      	ldrb	r1, [r2, r3]
 8003ed6:	abbe      	add	r3, sp, #760	; 0x2f8
 8003ed8:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8003edc:	9bba      	ldr	r3, [sp, #744]	; 0x2e8
 8003ede:	4413      	add	r3, r2
 8003ee0:	460a      	mov	r2, r1
 8003ee2:	701a      	strb	r2, [r3, #0]
        for(k = 0; k < off; k++)
 8003ee4:	9bba      	ldr	r3, [sp, #744]	; 0x2e8
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	93ba      	str	r3, [sp, #744]	; 0x2e8
 8003eea:	9aba      	ldr	r2, [sp, #744]	; 0x2e8
 8003eec:	9bb8      	ldr	r3, [sp, #736]	; 0x2e0
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d3e8      	bcc.n	8003ec4 <pqcrystals_kyber512_ref_gen_matrix+0xb4>
        xof_squeezeblocks(buf + off, 1, &state);
 8003ef2:	aa39      	add	r2, sp, #228	; 0xe4
 8003ef4:	9bb8      	ldr	r3, [sp, #736]	; 0x2e0
 8003ef6:	4413      	add	r3, r2
 8003ef8:	aa04      	add	r2, sp, #16
 8003efa:	2101      	movs	r1, #1
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff fdf5 	bl	8003aec <pqcrystals_kyber_fips202_ref_shake128_squeezeblocks>
        buflen = off + XOF_BLOCKBYTES;
 8003f02:	9bb8      	ldr	r3, [sp, #736]	; 0x2e0
 8003f04:	33a8      	adds	r3, #168	; 0xa8
 8003f06:	93b9      	str	r3, [sp, #740]	; 0x2e4
        ctr += rej_uniform(a[i].vec[j].coeffs + ctr, KYBER_N - ctr, buf, buflen);
 8003f08:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 8003f0a:	029b      	lsls	r3, r3, #10
 8003f0c:	aabe      	add	r2, sp, #760	; 0x2f8
 8003f0e:	f5a2 723b 	sub.w	r2, r2, #748	; 0x2ec
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	441a      	add	r2, r3
 8003f16:	9bbb      	ldr	r3, [sp, #748]	; 0x2ec
 8003f18:	025b      	lsls	r3, r3, #9
 8003f1a:	441a      	add	r2, r3
 8003f1c:	9bbd      	ldr	r3, [sp, #756]	; 0x2f4
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	18d0      	adds	r0, r2, r3
 8003f22:	9bbd      	ldr	r3, [sp, #756]	; 0x2f4
 8003f24:	f5c3 7180 	rsb	r1, r3, #256	; 0x100
 8003f28:	aa39      	add	r2, sp, #228	; 0xe4
 8003f2a:	9bb9      	ldr	r3, [sp, #740]	; 0x2e4
 8003f2c:	f7ff ff0d 	bl	8003d4a <rej_uniform>
 8003f30:	4602      	mov	r2, r0
 8003f32:	9bbd      	ldr	r3, [sp, #756]	; 0x2f4
 8003f34:	4413      	add	r3, r2
 8003f36:	93bd      	str	r3, [sp, #756]	; 0x2f4
      while(ctr < KYBER_N) {
 8003f38:	9bbd      	ldr	r3, [sp, #756]	; 0x2f4
 8003f3a:	2bff      	cmp	r3, #255	; 0xff
 8003f3c:	d9b5      	bls.n	8003eaa <pqcrystals_kyber512_ref_gen_matrix+0x9a>
    for(j=0;j<KYBER_K;j++) {
 8003f3e:	9bbb      	ldr	r3, [sp, #748]	; 0x2ec
 8003f40:	3301      	adds	r3, #1
 8003f42:	93bb      	str	r3, [sp, #748]	; 0x2ec
 8003f44:	9bbb      	ldr	r3, [sp, #748]	; 0x2ec
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	f67f af77 	bls.w	8003e3a <pqcrystals_kyber512_ref_gen_matrix+0x2a>
  for(i=0;i<KYBER_K;i++) {
 8003f4c:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 8003f4e:	3301      	adds	r3, #1
 8003f50:	93bc      	str	r3, [sp, #752]	; 0x2f0
 8003f52:	9bbc      	ldr	r3, [sp, #752]	; 0x2f0
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	f67f af6d 	bls.w	8003e34 <pqcrystals_kyber512_ref_gen_matrix+0x24>
      }
    }
    //OLED_ShowString(6,1,(uint8_t *)"hello----");
  }
}
 8003f5a:	bf00      	nop
 8003f5c:	bf00      	nop
 8003f5e:	f50d 7d3f 	add.w	sp, sp, #764	; 0x2fc
 8003f62:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f66:	bf00      	nop
 8003f68:	aaaaaaab 	.word	0xaaaaaaab

08003f6c <pqcrystals_kyber512_ref_indcpa_keypair>:
*              - uint8_t *sk: pointer to output private key
                              (of length KYBER_INDCPA_SECRETKEYBYTES bytes)
**************************************************/
void indcpa_keypair(uint8_t pk[KYBER_INDCPA_PUBLICKEYBYTES],
                    uint8_t sk[KYBER_INDCPA_SECRETKEYBYTES])
{
 8003f6c:	b530      	push	{r4, r5, lr}
 8003f6e:	f5ad 5da2 	sub.w	sp, sp, #5184	; 0x1440
 8003f72:	b087      	sub	sp, #28
 8003f74:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
 8003f78:	f2a3 4354 	subw	r3, r3, #1108	; 0x454
 8003f7c:	6018      	str	r0, [r3, #0]
 8003f7e:	f50d 638b 	add.w	r3, sp, #1112	; 0x458
 8003f82:	f5a3 638b 	sub.w	r3, r3, #1112	; 0x458
 8003f86:	6019      	str	r1, [r3, #0]

  unsigned int i;
//  uint8_t buf[2*KYBER_SYMBYTES];
   uint8_t buf[] = {183, 47, 155, 200, 92, 10, 19, 185, 208, 65, 88,
 8003f88:	4b8a      	ldr	r3, [pc, #552]	; (80041b4 <pqcrystals_kyber512_ref_indcpa_keypair+0x248>)
 8003f8a:	f50d 54a0 	add.w	r4, sp, #5120	; 0x1400
 8003f8e:	f104 0408 	add.w	r4, r4, #8
 8003f92:	461d      	mov	r5, r3
 8003f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fa0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003fa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                   111, 213, 131, 254, 177, 42, 253, 90, 64, 45, 211, 59, 67,
                   84, 63, 95, 164, 235, 67, 108, 141, 177, 142, 48, 23, 9,
                   106, 177, 70, 98, 98, 39, 42, 61, 89, 166, 169, 210, 103,
                   143, 169, 204, 93, 184, 161, 136, 132, 134, 237, 77, 235, 168, 253};
  const uint8_t *publicseed = buf;
 8003fa8:	f50d 53a0 	add.w	r3, sp, #5120	; 0x1400
 8003fac:	f103 0308 	add.w	r3, r3, #8
 8003fb0:	f50d 52a2 	add.w	r2, sp, #5184	; 0x1440
 8003fb4:	f102 020c 	add.w	r2, r2, #12
 8003fb8:	6013      	str	r3, [r2, #0]
  const uint8_t *noiseseed = buf+KYBER_SYMBYTES;
 8003fba:	f50d 53a0 	add.w	r3, sp, #5120	; 0x1400
 8003fbe:	f103 0308 	add.w	r3, r3, #8
 8003fc2:	3320      	adds	r3, #32
 8003fc4:	f50d 52a2 	add.w	r2, sp, #5184	; 0x1440
 8003fc8:	f102 0208 	add.w	r2, r2, #8
 8003fcc:	6013      	str	r3, [r2, #0]
  uint8_t nonce = 0;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f50d 52a2 	add.w	r2, sp, #5184	; 0x1440
 8003fd4:	f102 0213 	add.w	r2, r2, #19
 8003fd8:	7013      	strb	r3, [r2, #0]
  polyvec a[KYBER_K], e, pkpv, skpv;

//  randombytes(buf, KYBER_SYMBYTES);
//  hash_g(buf, buf, KYBER_SYMBYTES);

  gen_a(a, publicseed);
 8003fda:	f60d 4308 	addw	r3, sp, #3080	; 0xc08
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f50d 51a2 	add.w	r1, sp, #5184	; 0x1440
 8003fe4:	f101 010c 	add.w	r1, r1, #12
 8003fe8:	6809      	ldr	r1, [r1, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff ff10 	bl	8003e10 <pqcrystals_kyber512_ref_gen_matrix>

  for(i=0;i<KYBER_K;i++)
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f50d 52a2 	add.w	r2, sp, #5184	; 0x1440
 8003ff6:	f102 0214 	add.w	r2, r2, #20
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	e026      	b.n	800404c <pqcrystals_kyber512_ref_indcpa_keypair+0xe0>
    poly_getnoise_eta1(&skpv.vec[i], noiseseed, nonce++);
 8003ffe:	ab06      	add	r3, sp, #24
 8004000:	3b10      	subs	r3, #16
 8004002:	f50d 52a2 	add.w	r2, sp, #5184	; 0x1440
 8004006:	f102 0214 	add.w	r2, r2, #20
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	0252      	lsls	r2, r2, #9
 800400e:	1898      	adds	r0, r3, r2
 8004010:	f50d 53a2 	add.w	r3, sp, #5184	; 0x1440
 8004014:	f103 0313 	add.w	r3, r3, #19
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	f50d 51a2 	add.w	r1, sp, #5184	; 0x1440
 8004020:	f101 0113 	add.w	r1, r1, #19
 8004024:	700a      	strb	r2, [r1, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	f50d 53a2 	add.w	r3, sp, #5184	; 0x1440
 800402c:	f103 0308 	add.w	r3, r3, #8
 8004030:	6819      	ldr	r1, [r3, #0]
 8004032:	f000 fbb5 	bl	80047a0 <pqcrystals_kyber512_ref_poly_getnoise_eta1>
  for(i=0;i<KYBER_K;i++)
 8004036:	f50d 53a2 	add.w	r3, sp, #5184	; 0x1440
 800403a:	f103 0314 	add.w	r3, r3, #20
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	f50d 52a2 	add.w	r2, sp, #5184	; 0x1440
 8004046:	f102 0214 	add.w	r2, r2, #20
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	f50d 53a2 	add.w	r3, sp, #5184	; 0x1440
 8004050:	f103 0314 	add.w	r3, r3, #20
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d9d1      	bls.n	8003ffe <pqcrystals_kyber512_ref_indcpa_keypair+0x92>
  for(i=0;i<KYBER_K;i++)
 800405a:	2300      	movs	r3, #0
 800405c:	f50d 52a2 	add.w	r2, sp, #5184	; 0x1440
 8004060:	f102 0214 	add.w	r2, r2, #20
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e026      	b.n	80040b6 <pqcrystals_kyber512_ref_indcpa_keypair+0x14a>
    poly_getnoise_eta1(&e.vec[i], noiseseed, nonce++);
 8004068:	f60d 0208 	addw	r2, sp, #2056	; 0x808
 800406c:	f50d 53a2 	add.w	r3, sp, #5184	; 0x1440
 8004070:	f103 0314 	add.w	r3, r3, #20
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	025b      	lsls	r3, r3, #9
 8004078:	18d0      	adds	r0, r2, r3
 800407a:	f50d 53a2 	add.w	r3, sp, #5184	; 0x1440
 800407e:	f103 0313 	add.w	r3, r3, #19
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	f50d 51a2 	add.w	r1, sp, #5184	; 0x1440
 800408a:	f101 0113 	add.w	r1, r1, #19
 800408e:	700a      	strb	r2, [r1, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	f50d 53a2 	add.w	r3, sp, #5184	; 0x1440
 8004096:	f103 0308 	add.w	r3, r3, #8
 800409a:	6819      	ldr	r1, [r3, #0]
 800409c:	f000 fb80 	bl	80047a0 <pqcrystals_kyber512_ref_poly_getnoise_eta1>
  for(i=0;i<KYBER_K;i++)
 80040a0:	f50d 53a2 	add.w	r3, sp, #5184	; 0x1440
 80040a4:	f103 0314 	add.w	r3, r3, #20
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3301      	adds	r3, #1
 80040ac:	f50d 52a2 	add.w	r2, sp, #5184	; 0x1440
 80040b0:	f102 0214 	add.w	r2, r2, #20
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	f50d 53a2 	add.w	r3, sp, #5184	; 0x1440
 80040ba:	f103 0314 	add.w	r3, r3, #20
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d9d1      	bls.n	8004068 <pqcrystals_kyber512_ref_indcpa_keypair+0xfc>

  polyvec_ntt(&skpv);
 80040c4:	ab06      	add	r3, sp, #24
 80040c6:	3b10      	subs	r3, #16
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 fc80 	bl	80049ce <pqcrystals_kyber512_ref_polyvec_ntt>
  polyvec_ntt(&e);
 80040ce:	f60d 0308 	addw	r3, sp, #2056	; 0x808
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fc7b 	bl	80049ce <pqcrystals_kyber512_ref_polyvec_ntt>

  // matrix-vector multiplication
  for(i=0;i<KYBER_K;i++) {
 80040d8:	2300      	movs	r3, #0
 80040da:	f50d 52a2 	add.w	r2, sp, #5184	; 0x1440
 80040de:	f102 0214 	add.w	r2, r2, #20
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	e02f      	b.n	8004146 <pqcrystals_kyber512_ref_indcpa_keypair+0x1da>
    polyvec_basemul_acc_montgomery(&pkpv.vec[i], &a[i], &skpv);
 80040e6:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
 80040ea:	3b10      	subs	r3, #16
 80040ec:	f50d 52a2 	add.w	r2, sp, #5184	; 0x1440
 80040f0:	f102 0214 	add.w	r2, r2, #20
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	0252      	lsls	r2, r2, #9
 80040f8:	1898      	adds	r0, r3, r2
 80040fa:	f60d 4208 	addw	r2, sp, #3080	; 0xc08
 80040fe:	f50d 53a2 	add.w	r3, sp, #5184	; 0x1440
 8004102:	f103 0314 	add.w	r3, r3, #20
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	029b      	lsls	r3, r3, #10
 800410a:	18d1      	adds	r1, r2, r3
 800410c:	ab06      	add	r3, sp, #24
 800410e:	3b10      	subs	r3, #16
 8004110:	461a      	mov	r2, r3
 8004112:	f000 fc74 	bl	80049fe <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>
    poly_tomont(&pkpv.vec[i]);
 8004116:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
 800411a:	3b10      	subs	r3, #16
 800411c:	f50d 52a2 	add.w	r2, sp, #5184	; 0x1440
 8004120:	f102 0214 	add.w	r2, r2, #20
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	0252      	lsls	r2, r2, #9
 8004128:	4413      	add	r3, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fba6 	bl	800487c <pqcrystals_kyber512_ref_poly_tomont>
  for(i=0;i<KYBER_K;i++) {
 8004130:	f50d 53a2 	add.w	r3, sp, #5184	; 0x1440
 8004134:	f103 0314 	add.w	r3, r3, #20
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	f50d 52a2 	add.w	r2, sp, #5184	; 0x1440
 8004140:	f102 0214 	add.w	r2, r2, #20
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	f50d 53a2 	add.w	r3, sp, #5184	; 0x1440
 800414a:	f103 0314 	add.w	r3, r3, #20
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d9c8      	bls.n	80040e6 <pqcrystals_kyber512_ref_indcpa_keypair+0x17a>
  }

  polyvec_add(&pkpv, &pkpv, &e);
 8004154:	f60d 0208 	addw	r2, sp, #2056	; 0x808
 8004158:	f50d 6183 	add.w	r1, sp, #1048	; 0x418
 800415c:	3910      	subs	r1, #16
 800415e:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
 8004162:	3b10      	subs	r3, #16
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fcb0 	bl	8004aca <pqcrystals_kyber512_ref_polyvec_add>
  polyvec_reduce(&pkpv);
 800416a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
 800416e:	3b10      	subs	r3, #16
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fc92 	bl	8004a9a <pqcrystals_kyber512_ref_polyvec_reduce>

  pack_sk(sk, &skpv);
 8004176:	ab06      	add	r3, sp, #24
 8004178:	3b10      	subs	r3, #16
 800417a:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
 800417e:	f5a2 628b 	sub.w	r2, r2, #1112	; 0x458
 8004182:	4619      	mov	r1, r3
 8004184:	6810      	ldr	r0, [r2, #0]
 8004186:	f7ff fdd4 	bl	8003d32 <pack_sk>
  pack_pk(pk, &pkpv, publicseed);
 800418a:	f50d 6383 	add.w	r3, sp, #1048	; 0x418
 800418e:	3b10      	subs	r3, #16
 8004190:	f50d 628b 	add.w	r2, sp, #1112	; 0x458
 8004194:	f2a2 4054 	subw	r0, r2, #1108	; 0x454
 8004198:	f50d 52a2 	add.w	r2, sp, #5184	; 0x1440
 800419c:	f102 020c 	add.w	r2, r2, #12
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	4619      	mov	r1, r3
 80041a4:	6800      	ldr	r0, [r0, #0]
 80041a6:	f7ff fda3 	bl	8003cf0 <pack_pk>
}
 80041aa:	bf00      	nop
 80041ac:	f50d 5da2 	add.w	sp, sp, #5184	; 0x1440
 80041b0:	b007      	add	sp, #28
 80041b2:	bd30      	pop	{r4, r5, pc}
 80041b4:	080073c0 	.word	0x080073c0

080041b8 <pqcrystals_kyber512_ref_keypair>:
*
* Returns 0 (success)
**************************************************/
int crypto_kem_keypair(uint8_t *pk,
                       uint8_t *sk)
{
 80041b8:	b500      	push	{lr}
 80041ba:	b085      	sub	sp, #20
 80041bc:	9001      	str	r0, [sp, #4]
 80041be:	9100      	str	r1, [sp, #0]
  size_t i;
  indcpa_keypair(pk, sk);
 80041c0:	9900      	ldr	r1, [sp, #0]
 80041c2:	9801      	ldr	r0, [sp, #4]
 80041c4:	f7ff fed2 	bl	8003f6c <pqcrystals_kyber512_ref_indcpa_keypair>
  for(i=0;i<KYBER_INDCPA_PUBLICKEYBYTES;i++)
 80041c8:	2300      	movs	r3, #0
 80041ca:	9303      	str	r3, [sp, #12]
 80041cc:	e00c      	b.n	80041e8 <pqcrystals_kyber512_ref_keypair+0x30>
    sk[i+KYBER_INDCPA_SECRETKEYBYTES] = pk[i];
 80041ce:	9a01      	ldr	r2, [sp, #4]
 80041d0:	9b03      	ldr	r3, [sp, #12]
 80041d2:	441a      	add	r2, r3
 80041d4:	9b03      	ldr	r3, [sp, #12]
 80041d6:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80041da:	9900      	ldr	r1, [sp, #0]
 80041dc:	440b      	add	r3, r1
 80041de:	7812      	ldrb	r2, [r2, #0]
 80041e0:	701a      	strb	r2, [r3, #0]
  for(i=0;i<KYBER_INDCPA_PUBLICKEYBYTES;i++)
 80041e2:	9b03      	ldr	r3, [sp, #12]
 80041e4:	3301      	adds	r3, #1
 80041e6:	9303      	str	r3, [sp, #12]
 80041e8:	9b03      	ldr	r3, [sp, #12]
 80041ea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80041ee:	d3ee      	bcc.n	80041ce <pqcrystals_kyber512_ref_keypair+0x16>
  hash_h(sk+KYBER_SECRETKEYBYTES-2*KYBER_SYMBYTES, pk, KYBER_PUBLICKEYBYTES);
 80041f0:	9b00      	ldr	r3, [sp, #0]
 80041f2:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 80041f6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80041fa:	9901      	ldr	r1, [sp, #4]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff fcf5 	bl	8003bec <pqcrystals_kyber_fips202_ref_sha3_256>
  /* Value z for pseudo-random output on reject */
  randombytes(sk+KYBER_SECRETKEYBYTES-KYBER_SYMBYTES, KYBER_SYMBYTES);
 8004202:	9b00      	ldr	r3, [sp, #0]
 8004204:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8004208:	2120      	movs	r1, #32
 800420a:	4618      	mov	r0, r3
 800420c:	f000 fda2 	bl	8004d54 <randombytes>
  return 0;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	b005      	add	sp, #20
 8004216:	f85d fb04 	ldr.w	pc, [sp], #4

0800421a <unpack_pk>:
}

static void unpack_pk(polyvec *pk,
                      uint8_t seed[KYBER_SYMBYTES],
                      const uint8_t packedpk[KYBER_INDCPA_PUBLICKEYBYTES])
{
 800421a:	b500      	push	{lr}
 800421c:	b087      	sub	sp, #28
 800421e:	9003      	str	r0, [sp, #12]
 8004220:	9102      	str	r1, [sp, #8]
 8004222:	9201      	str	r2, [sp, #4]
  size_t i;
  polyvec_frombytes(pk, packedpk);
 8004224:	9901      	ldr	r1, [sp, #4]
 8004226:	9803      	ldr	r0, [sp, #12]
 8004228:	f000 fbb0 	bl	800498c <pqcrystals_kyber512_ref_polyvec_frombytes>
  for(i=0;i<KYBER_SYMBYTES;i++)
 800422c:	2300      	movs	r3, #0
 800422e:	9305      	str	r3, [sp, #20]
 8004230:	e00c      	b.n	800424c <unpack_pk+0x32>
    seed[i] = packedpk[i+KYBER_POLYVECBYTES];
 8004232:	9b05      	ldr	r3, [sp, #20]
 8004234:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004238:	9a01      	ldr	r2, [sp, #4]
 800423a:	441a      	add	r2, r3
 800423c:	9902      	ldr	r1, [sp, #8]
 800423e:	9b05      	ldr	r3, [sp, #20]
 8004240:	440b      	add	r3, r1
 8004242:	7812      	ldrb	r2, [r2, #0]
 8004244:	701a      	strb	r2, [r3, #0]
  for(i=0;i<KYBER_SYMBYTES;i++)
 8004246:	9b05      	ldr	r3, [sp, #20]
 8004248:	3301      	adds	r3, #1
 800424a:	9305      	str	r3, [sp, #20]
 800424c:	9b05      	ldr	r3, [sp, #20]
 800424e:	2b1f      	cmp	r3, #31
 8004250:	d9ef      	bls.n	8004232 <unpack_pk+0x18>
}
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	b007      	add	sp, #28
 8004258:	f85d fb04 	ldr.w	pc, [sp], #4

0800425c <unpack_sk>:
{
  polyvec_tobytes(r, sk);
}

static void unpack_sk(polyvec *sk, const uint8_t packedsk[KYBER_INDCPA_SECRETKEYBYTES])
{
 800425c:	b500      	push	{lr}
 800425e:	b083      	sub	sp, #12
 8004260:	9001      	str	r0, [sp, #4]
 8004262:	9100      	str	r1, [sp, #0]
  polyvec_frombytes(sk, packedsk);
 8004264:	9900      	ldr	r1, [sp, #0]
 8004266:	9801      	ldr	r0, [sp, #4]
 8004268:	f000 fb90 	bl	800498c <pqcrystals_kyber512_ref_polyvec_frombytes>
}
 800426c:	bf00      	nop
 800426e:	b003      	add	sp, #12
 8004270:	f85d fb04 	ldr.w	pc, [sp], #4

08004274 <special_test>:

#define gen_a(A,B)  gen_matrix(A,B,0)
#define gen_at(A,B) gen_matrix(A,B,1)


void special_test(){
 8004274:	b500      	push	{lr}
 8004276:	f5ad 5de6 	sub.w	sp, sp, #7360	; 0x1cc0
 800427a:	b081      	sub	sp, #4
	  uint8_t pk[CRYPTO_PUBLICKEYBYTES];
	  uint8_t sk[CRYPTO_SECRETKEYBYTES];
	  uint8_t ct[CRYPTO_CIPHERTEXTBYTES];
	  uint8_t key[CRYPTO_BYTES];

	  crypto_kem_keypair(pk, sk);
 800427c:	f50d 529a 	add.w	r2, sp, #4928	; 0x1340
 8004280:	f50d 53cd 	add.w	r3, sp, #6560	; 0x19a0
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff ff96 	bl	80041b8 <pqcrystals_kyber512_ref_keypair>


	  uint8_t seed[KYBER_SYMBYTES];
	  polyvec pkpv, at[KYBER_K];

	  t0 = HAL_GetTick();
 800428c:	f000 ffbc 	bl	8005208 <HAL_GetTick>
 8004290:	4603      	mov	r3, r0
 8004292:	4a3a      	ldr	r2, [pc, #232]	; (800437c <special_test+0x108>)
 8004294:	6013      	str	r3, [r2, #0]
	  hash_h(ct, sk, CRYPTO_SECRETKEYBYTES);
 8004296:	f50d 519a 	add.w	r1, sp, #4928	; 0x1340
 800429a:	f50d 5382 	add.w	r3, sp, #4160	; 0x1040
 800429e:	f44f 62cc 	mov.w	r2, #1632	; 0x660
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fca2 	bl	8003bec <pqcrystals_kyber_fips202_ref_sha3_256>
	  t1 = HAL_GetTick();
 80042a8:	f000 ffae 	bl	8005208 <HAL_GetTick>
 80042ac:	4603      	mov	r3, r0
 80042ae:	4a34      	ldr	r2, [pc, #208]	; (8004380 <special_test+0x10c>)
 80042b0:	6013      	str	r3, [r2, #0]

	  sprintf((char *)buff,"self = %u\r\n", t1-t0);
 80042b2:	4b33      	ldr	r3, [pc, #204]	; (8004380 <special_test+0x10c>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4b31      	ldr	r3, [pc, #196]	; (800437c <special_test+0x108>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	461a      	mov	r2, r3
 80042be:	4931      	ldr	r1, [pc, #196]	; (8004384 <special_test+0x110>)
 80042c0:	4831      	ldr	r0, [pc, #196]	; (8004388 <special_test+0x114>)
 80042c2:	f002 fcff 	bl	8006cc4 <siprintf>
	  HAL_UART_Transmit(&huart1, buff, sizeof(buff), 10000);
 80042c6:	f242 7310 	movw	r3, #10000	; 0x2710
 80042ca:	2240      	movs	r2, #64	; 0x40
 80042cc:	492e      	ldr	r1, [pc, #184]	; (8004388 <special_test+0x114>)
 80042ce:	482f      	ldr	r0, [pc, #188]	; (800438c <special_test+0x118>)
 80042d0:	f001 ff40 	bl	8006154 <HAL_UART_Transmit>



	  unpack_pk(&pkpv, seed, pk);
 80042d4:	f50d 52cd 	add.w	r2, sp, #6560	; 0x19a0
 80042d8:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 80042dc:	f50d 6340 	add.w	r3, sp, #3072	; 0xc00
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff ff9a 	bl	800421a <unpack_pk>
	  t0 = HAL_GetTick();
 80042e6:	f000 ff8f 	bl	8005208 <HAL_GetTick>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4a23      	ldr	r2, [pc, #140]	; (800437c <special_test+0x108>)
 80042ee:	6013      	str	r3, [r2, #0]
	  gen_at(at, seed);
 80042f0:	f50d 5180 	add.w	r1, sp, #4096	; 0x1000
 80042f4:	f50d 6380 	add.w	r3, sp, #1024	; 0x400
 80042f8:	2201      	movs	r2, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fd88 	bl	8003e10 <pqcrystals_kyber512_ref_gen_matrix>
	  t1 = HAL_GetTick();
 8004300:	f000 ff82 	bl	8005208 <HAL_GetTick>
 8004304:	4603      	mov	r3, r0
 8004306:	4a1e      	ldr	r2, [pc, #120]	; (8004380 <special_test+0x10c>)
 8004308:	6013      	str	r3, [r2, #0]

	  sprintf((char *)buff,"self = %u\r\n", t1-t0);
 800430a:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <special_test+0x10c>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b1b      	ldr	r3, [pc, #108]	; (800437c <special_test+0x108>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	461a      	mov	r2, r3
 8004316:	491b      	ldr	r1, [pc, #108]	; (8004384 <special_test+0x110>)
 8004318:	481b      	ldr	r0, [pc, #108]	; (8004388 <special_test+0x114>)
 800431a:	f002 fcd3 	bl	8006cc4 <siprintf>
	  HAL_UART_Transmit(&huart1, buff, sizeof(buff), 10000);
 800431e:	f242 7310 	movw	r3, #10000	; 0x2710
 8004322:	2240      	movs	r2, #64	; 0x40
 8004324:	4918      	ldr	r1, [pc, #96]	; (8004388 <special_test+0x114>)
 8004326:	4819      	ldr	r0, [pc, #100]	; (800438c <special_test+0x118>)
 8004328:	f001 ff14 	bl	8006154 <HAL_UART_Transmit>


	  polyvec skpv;

	  t0 = HAL_GetTick();
 800432c:	f000 ff6c 	bl	8005208 <HAL_GetTick>
 8004330:	4603      	mov	r3, r0
 8004332:	4a12      	ldr	r2, [pc, #72]	; (800437c <special_test+0x108>)
 8004334:	6013      	str	r3, [r2, #0]
	  unpack_sk(&skpv, sk);
 8004336:	f50d 529a 	add.w	r2, sp, #4928	; 0x1340
 800433a:	466b      	mov	r3, sp
 800433c:	4611      	mov	r1, r2
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ff8c 	bl	800425c <unpack_sk>
	  t1 = HAL_GetTick();
 8004344:	f000 ff60 	bl	8005208 <HAL_GetTick>
 8004348:	4603      	mov	r3, r0
 800434a:	4a0d      	ldr	r2, [pc, #52]	; (8004380 <special_test+0x10c>)
 800434c:	6013      	str	r3, [r2, #0]

	  sprintf((char *)buff,"self = %u\r\n", t1-t0);
 800434e:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <special_test+0x10c>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	4b0a      	ldr	r3, [pc, #40]	; (800437c <special_test+0x108>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	461a      	mov	r2, r3
 800435a:	490a      	ldr	r1, [pc, #40]	; (8004384 <special_test+0x110>)
 800435c:	480a      	ldr	r0, [pc, #40]	; (8004388 <special_test+0x114>)
 800435e:	f002 fcb1 	bl	8006cc4 <siprintf>
	  HAL_UART_Transmit(&huart1, buff, sizeof(buff), 10000);
 8004362:	f242 7310 	movw	r3, #10000	; 0x2710
 8004366:	2240      	movs	r2, #64	; 0x40
 8004368:	4907      	ldr	r1, [pc, #28]	; (8004388 <special_test+0x114>)
 800436a:	4808      	ldr	r0, [pc, #32]	; (800438c <special_test+0x118>)
 800436c:	f001 fef2 	bl	8006154 <HAL_UART_Transmit>

}
 8004370:	bf00      	nop
 8004372:	f50d 5de6 	add.w	sp, sp, #7360	; 0x1cc0
 8004376:	b001      	add	sp, #4
 8004378:	f85d fb04 	ldr.w	pc, [sp], #4
 800437c:	20000150 	.word	0x20000150
 8004380:	20000154 	.word	0x20000154
 8004384:	08007420 	.word	0x08007420
 8004388:	2000010c 	.word	0x2000010c
 800438c:	200001b0 	.word	0x200001b0

08004390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004390:	b500      	push	{lr}
 8004392:	b083      	sub	sp, #12
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004394:	f000 fee6 	bl	8005164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004398:	f000 f82c 	bl	80043f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800439c:	f7ff fc54 	bl	8003c48 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80043a0:	f000 fe42 	bl	8005028 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  HAL_TIM_Base_Start_IT(&htim3);

  OLED_Init();
 80043a4:	f7fb ff96 	bl	80002d4 <OLED_Init>


  OLED_Clear();
 80043a8:	f7fb ff5f 	bl	800026a <OLED_Clear>

//  kyber_kex();

//  kyber_gen();

  special_test();
 80043ac:	f7ff ff62 	bl	8004274 <special_test>


  sprintf((char *)buff,"end %d:%d:%d\r\n", mm,ss,ss01);
 80043b0:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <main+0x4c>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <main+0x50>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	4619      	mov	r1, r3
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <main+0x54>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	460b      	mov	r3, r1
 80043c4:	4908      	ldr	r1, [pc, #32]	; (80043e8 <main+0x58>)
 80043c6:	4809      	ldr	r0, [pc, #36]	; (80043ec <main+0x5c>)
 80043c8:	f002 fc7c 	bl	8006cc4 <siprintf>
  HAL_UART_Transmit(&huart1, buff, sizeof(buff), 10000);
 80043cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80043d0:	2240      	movs	r2, #64	; 0x40
 80043d2:	4906      	ldr	r1, [pc, #24]	; (80043ec <main+0x5c>)
 80043d4:	4806      	ldr	r0, [pc, #24]	; (80043f0 <main+0x60>)
 80043d6:	f001 febd 	bl	8006154 <HAL_UART_Transmit>



  while (1)
 80043da:	e7fe      	b.n	80043da <main+0x4a>
 80043dc:	2000014c 	.word	0x2000014c
 80043e0:	2000014d 	.word	0x2000014d
 80043e4:	2000014e 	.word	0x2000014e
 80043e8:	0800756c 	.word	0x0800756c
 80043ec:	2000010c 	.word	0x2000010c
 80043f0:	200001b0 	.word	0x200001b0

080043f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043f4:	b500      	push	{lr}
 80043f6:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043f8:	ab06      	add	r3, sp, #24
 80043fa:	2228      	movs	r2, #40	; 0x28
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f002 fb6c 	bl	8006adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004404:	ab01      	add	r3, sp, #4
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	605a      	str	r2, [r3, #4]
 800440c:	609a      	str	r2, [r3, #8]
 800440e:	60da      	str	r2, [r3, #12]
 8004410:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004412:	2302      	movs	r3, #2
 8004414:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004416:	2301      	movs	r3, #1
 8004418:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800441a:	2310      	movs	r3, #16
 800441c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800441e:	2302      	movs	r3, #2
 8004420:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8004422:	2300      	movs	r3, #0
 8004424:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004426:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800442a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800442c:	ab06      	add	r3, sp, #24
 800442e:	4618      	mov	r0, r3
 8004430:	f001 fa34 	bl	800589c <HAL_RCC_OscConfig>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800443a:	f000 f819 	bl	8004470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800443e:	230f      	movs	r3, #15
 8004440:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004442:	2302      	movs	r3, #2
 8004444:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004446:	2300      	movs	r3, #0
 8004448:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800444a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800444e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004450:	2300      	movs	r3, #0
 8004452:	9305      	str	r3, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004454:	ab01      	add	r3, sp, #4
 8004456:	2102      	movs	r1, #2
 8004458:	4618      	mov	r0, r3
 800445a:	f001 fca3 	bl	8005da4 <HAL_RCC_ClockConfig>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8004464:	f000 f804 	bl	8004470 <Error_Handler>
  }
}
 8004468:	bf00      	nop
 800446a:	b011      	add	sp, #68	; 0x44
 800446c:	f85d fb04 	ldr.w	pc, [sp], #4

08004470 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004470:	b672      	cpsid	i
}
 8004472:	bf00      	nop
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004474:	e7fe      	b.n	8004474 <Error_Handler+0x4>

08004476 <fqmul>:
* Arguments:   - int16_t a: first factor
*              - int16_t b: second factor
*
* Returns 16-bit integer congruent to a*b*R^{-1} mod q
**************************************************/
static int16_t fqmul(int16_t a, int16_t b) {
 8004476:	b500      	push	{lr}
 8004478:	b083      	sub	sp, #12
 800447a:	4603      	mov	r3, r0
 800447c:	460a      	mov	r2, r1
 800447e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8004482:	4613      	mov	r3, r2
 8004484:	f8ad 3004 	strh.w	r3, [sp, #4]
  return montgomery_reduce((int32_t)a*b);
 8004488:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800448c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8004490:	fb02 f303 	mul.w	r3, r2, r3
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fcad 	bl	8004df4 <pqcrystals_kyber512_ref_montgomery_reduce>
 800449a:	4603      	mov	r3, r0
}
 800449c:	4618      	mov	r0, r3
 800449e:	b003      	add	sp, #12
 80044a0:	f85d fb04 	ldr.w	pc, [sp], #4

080044a4 <pqcrystals_kyber512_ref_ntt>:
* Description: Inplace number-theoretic transform (NTT) in Rq.
*              input is in standard order, output is in bitreversed order
*
* Arguments:   - int16_t r[256]: pointer to input/output vector of elements of Zq
**************************************************/
void ntt(int16_t r[256]) {
 80044a4:	b500      	push	{lr}
 80044a6:	b089      	sub	sp, #36	; 0x24
 80044a8:	9001      	str	r0, [sp, #4]
  unsigned int len, start, j, k;
  int16_t t, zeta;

  k = 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	9304      	str	r3, [sp, #16]
  for(len = 128; len >= 2; len >>= 1) {
 80044ae:	2380      	movs	r3, #128	; 0x80
 80044b0:	9307      	str	r3, [sp, #28]
 80044b2:	e055      	b.n	8004560 <pqcrystals_kyber512_ref_ntt+0xbc>
    for(start = 0; start < 256; start = j + len) {
 80044b4:	2300      	movs	r3, #0
 80044b6:	9306      	str	r3, [sp, #24]
 80044b8:	e04c      	b.n	8004554 <pqcrystals_kyber512_ref_ntt+0xb0>
      zeta = zetas[k++];
 80044ba:	9b04      	ldr	r3, [sp, #16]
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	9204      	str	r2, [sp, #16]
 80044c0:	4a2b      	ldr	r2, [pc, #172]	; (8004570 <pqcrystals_kyber512_ref_ntt+0xcc>)
 80044c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044c6:	f8ad 300e 	strh.w	r3, [sp, #14]
      for(j = start; j < start + len; j++) {
 80044ca:	9b06      	ldr	r3, [sp, #24]
 80044cc:	9305      	str	r3, [sp, #20]
 80044ce:	e037      	b.n	8004540 <pqcrystals_kyber512_ref_ntt+0x9c>
        t = fqmul(zeta, r[j + len]);
 80044d0:	9a05      	ldr	r2, [sp, #20]
 80044d2:	9b07      	ldr	r3, [sp, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	9a01      	ldr	r2, [sp, #4]
 80044da:	4413      	add	r3, r2
 80044dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80044e0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80044e4:	4611      	mov	r1, r2
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff ffc5 	bl	8004476 <fqmul>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f8ad 300c 	strh.w	r3, [sp, #12]
        r[j + len] = r[j] - t;
 80044f2:	9b05      	ldr	r3, [sp, #20]
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	9a01      	ldr	r2, [sp, #4]
 80044f8:	4413      	add	r3, r2
 80044fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044fe:	b29a      	uxth	r2, r3
 8004500:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	b299      	uxth	r1, r3
 8004508:	9a05      	ldr	r2, [sp, #20]
 800450a:	9b07      	ldr	r3, [sp, #28]
 800450c:	4413      	add	r3, r2
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	9a01      	ldr	r2, [sp, #4]
 8004512:	4413      	add	r3, r2
 8004514:	b20a      	sxth	r2, r1
 8004516:	801a      	strh	r2, [r3, #0]
        r[j] = r[j] + t;
 8004518:	9b05      	ldr	r3, [sp, #20]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	9a01      	ldr	r2, [sp, #4]
 800451e:	4413      	add	r3, r2
 8004520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004524:	b29a      	uxth	r2, r3
 8004526:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800452a:	4413      	add	r3, r2
 800452c:	b299      	uxth	r1, r3
 800452e:	9b05      	ldr	r3, [sp, #20]
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	9a01      	ldr	r2, [sp, #4]
 8004534:	4413      	add	r3, r2
 8004536:	b20a      	sxth	r2, r1
 8004538:	801a      	strh	r2, [r3, #0]
      for(j = start; j < start + len; j++) {
 800453a:	9b05      	ldr	r3, [sp, #20]
 800453c:	3301      	adds	r3, #1
 800453e:	9305      	str	r3, [sp, #20]
 8004540:	9a06      	ldr	r2, [sp, #24]
 8004542:	9b07      	ldr	r3, [sp, #28]
 8004544:	4413      	add	r3, r2
 8004546:	9a05      	ldr	r2, [sp, #20]
 8004548:	429a      	cmp	r2, r3
 800454a:	d3c1      	bcc.n	80044d0 <pqcrystals_kyber512_ref_ntt+0x2c>
    for(start = 0; start < 256; start = j + len) {
 800454c:	9a05      	ldr	r2, [sp, #20]
 800454e:	9b07      	ldr	r3, [sp, #28]
 8004550:	4413      	add	r3, r2
 8004552:	9306      	str	r3, [sp, #24]
 8004554:	9b06      	ldr	r3, [sp, #24]
 8004556:	2bff      	cmp	r3, #255	; 0xff
 8004558:	d9af      	bls.n	80044ba <pqcrystals_kyber512_ref_ntt+0x16>
  for(len = 128; len >= 2; len >>= 1) {
 800455a:	9b07      	ldr	r3, [sp, #28]
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	9307      	str	r3, [sp, #28]
 8004560:	9b07      	ldr	r3, [sp, #28]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d8a6      	bhi.n	80044b4 <pqcrystals_kyber512_ref_ntt+0x10>
      }
    }
  }
}
 8004566:	bf00      	nop
 8004568:	bf00      	nop
 800456a:	b009      	add	sp, #36	; 0x24
 800456c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004570:	08007650 	.word	0x08007650

08004574 <pqcrystals_kyber512_ref_basemul>:
*              - const int16_t a[2]: pointer to the first factor
*              - const int16_t b[2]: pointer to the second factor
*              - int16_t zeta: integer defining the reduction polynomial
**************************************************/
void basemul(int16_t r[2], const int16_t a[2], const int16_t b[2], int16_t zeta)
{
 8004574:	b510      	push	{r4, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	9003      	str	r0, [sp, #12]
 800457a:	9102      	str	r1, [sp, #8]
 800457c:	9201      	str	r2, [sp, #4]
 800457e:	f8ad 3002 	strh.w	r3, [sp, #2]
  r[0]  = fqmul(a[1], b[1]);
 8004582:	9b02      	ldr	r3, [sp, #8]
 8004584:	3302      	adds	r3, #2
 8004586:	f9b3 2000 	ldrsh.w	r2, [r3]
 800458a:	9b01      	ldr	r3, [sp, #4]
 800458c:	3302      	adds	r3, #2
 800458e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f7ff ff6e 	bl	8004476 <fqmul>
 800459a:	4603      	mov	r3, r0
 800459c:	461a      	mov	r2, r3
 800459e:	9b03      	ldr	r3, [sp, #12]
 80045a0:	801a      	strh	r2, [r3, #0]
  r[0]  = fqmul(r[0], zeta);
 80045a2:	9b03      	ldr	r3, [sp, #12]
 80045a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045a8:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 80045ac:	4611      	mov	r1, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff ff61 	bl	8004476 <fqmul>
 80045b4:	4603      	mov	r3, r0
 80045b6:	461a      	mov	r2, r3
 80045b8:	9b03      	ldr	r3, [sp, #12]
 80045ba:	801a      	strh	r2, [r3, #0]
  r[0] += fqmul(a[0], b[0]);
 80045bc:	9b02      	ldr	r3, [sp, #8]
 80045be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80045c2:	9b01      	ldr	r3, [sp, #4]
 80045c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f7ff ff53 	bl	8004476 <fqmul>
 80045d0:	4603      	mov	r3, r0
 80045d2:	4619      	mov	r1, r3
 80045d4:	9b03      	ldr	r3, [sp, #12]
 80045d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045da:	b29a      	uxth	r2, r3
 80045dc:	b28b      	uxth	r3, r1
 80045de:	4413      	add	r3, r2
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	b21a      	sxth	r2, r3
 80045e4:	9b03      	ldr	r3, [sp, #12]
 80045e6:	801a      	strh	r2, [r3, #0]
  r[1]  = fqmul(a[0], b[1]);
 80045e8:	9b02      	ldr	r3, [sp, #8]
 80045ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80045ee:	9b01      	ldr	r3, [sp, #4]
 80045f0:	3302      	adds	r3, #2
 80045f2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80045f6:	9b03      	ldr	r3, [sp, #12]
 80045f8:	1c9c      	adds	r4, r3, #2
 80045fa:	4610      	mov	r0, r2
 80045fc:	f7ff ff3b 	bl	8004476 <fqmul>
 8004600:	4603      	mov	r3, r0
 8004602:	8023      	strh	r3, [r4, #0]
  r[1] += fqmul(a[1], b[0]);
 8004604:	9b02      	ldr	r3, [sp, #8]
 8004606:	3302      	adds	r3, #2
 8004608:	f9b3 2000 	ldrsh.w	r2, [r3]
 800460c:	9b01      	ldr	r3, [sp, #4]
 800460e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004612:	4619      	mov	r1, r3
 8004614:	4610      	mov	r0, r2
 8004616:	f7ff ff2e 	bl	8004476 <fqmul>
 800461a:	4603      	mov	r3, r0
 800461c:	4619      	mov	r1, r3
 800461e:	9b03      	ldr	r3, [sp, #12]
 8004620:	3302      	adds	r3, #2
 8004622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004626:	b29a      	uxth	r2, r3
 8004628:	b28b      	uxth	r3, r1
 800462a:	4413      	add	r3, r2
 800462c:	b29a      	uxth	r2, r3
 800462e:	9b03      	ldr	r3, [sp, #12]
 8004630:	3302      	adds	r3, #2
 8004632:	b212      	sxth	r2, r2
 8004634:	801a      	strh	r2, [r3, #0]
}
 8004636:	bf00      	nop
 8004638:	b004      	add	sp, #16
 800463a:	bd10      	pop	{r4, pc}

0800463c <pqcrystals_kyber512_ref_poly_tobytes>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYBYTES bytes)
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_tobytes(uint8_t r[KYBER_POLYBYTES], const poly *a)
{
 800463c:	b084      	sub	sp, #16
 800463e:	9001      	str	r0, [sp, #4]
 8004640:	9100      	str	r1, [sp, #0]
  unsigned int i;
  uint16_t t0, t1;

  for(i=0;i<KYBER_N/2;i++) {
 8004642:	2300      	movs	r3, #0
 8004644:	9303      	str	r3, [sp, #12]
 8004646:	e058      	b.n	80046fa <pqcrystals_kyber512_ref_poly_tobytes+0xbe>
    // map to positive standard representatives
    t0  = a->coeffs[2*i];
 8004648:	9b03      	ldr	r3, [sp, #12]
 800464a:	005a      	lsls	r2, r3, #1
 800464c:	9b00      	ldr	r3, [sp, #0]
 800464e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004652:	f8ad 300a 	strh.w	r3, [sp, #10]
    t0 += ((int16_t)t0 >> 15) & KYBER_Q;
 8004656:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800465a:	13db      	asrs	r3, r3, #15
 800465c:	b21b      	sxth	r3, r3
 800465e:	b29a      	uxth	r2, r3
 8004660:	f640 5301 	movw	r3, #3329	; 0xd01
 8004664:	4013      	ands	r3, r2
 8004666:	b29a      	uxth	r2, r3
 8004668:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800466c:	4413      	add	r3, r2
 800466e:	f8ad 300a 	strh.w	r3, [sp, #10]
    t1 = a->coeffs[2*i+1];
 8004672:	9b03      	ldr	r3, [sp, #12]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	9b00      	ldr	r3, [sp, #0]
 800467a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800467e:	f8ad 3008 	strh.w	r3, [sp, #8]
    t1 += ((int16_t)t1 >> 15) & KYBER_Q;
 8004682:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8004686:	13db      	asrs	r3, r3, #15
 8004688:	b21b      	sxth	r3, r3
 800468a:	b29a      	uxth	r2, r3
 800468c:	f640 5301 	movw	r3, #3329	; 0xd01
 8004690:	4013      	ands	r3, r2
 8004692:	b29a      	uxth	r2, r3
 8004694:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8004698:	4413      	add	r3, r2
 800469a:	f8ad 3008 	strh.w	r3, [sp, #8]
    r[3*i+0] = (t0 >> 0);
 800469e:	9a03      	ldr	r2, [sp, #12]
 80046a0:	4613      	mov	r3, r2
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	4413      	add	r3, r2
 80046a6:	9a01      	ldr	r2, [sp, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
    r[3*i+1] = (t0 >> 8) | (t1 << 4);
 80046b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	b25a      	sxtb	r2, r3
 80046bc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	b25b      	sxtb	r3, r3
 80046c4:	4313      	orrs	r3, r2
 80046c6:	b259      	sxtb	r1, r3
 80046c8:	9a03      	ldr	r2, [sp, #12]
 80046ca:	4613      	mov	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	3301      	adds	r3, #1
 80046d2:	9a01      	ldr	r2, [sp, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	b2ca      	uxtb	r2, r1
 80046d8:	701a      	strb	r2, [r3, #0]
    r[3*i+2] = (t1 >> 4);
 80046da:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80046de:	091b      	lsrs	r3, r3, #4
 80046e0:	b299      	uxth	r1, r3
 80046e2:	9a03      	ldr	r2, [sp, #12]
 80046e4:	4613      	mov	r3, r2
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	4413      	add	r3, r2
 80046ea:	3302      	adds	r3, #2
 80046ec:	9a01      	ldr	r2, [sp, #4]
 80046ee:	4413      	add	r3, r2
 80046f0:	b2ca      	uxtb	r2, r1
 80046f2:	701a      	strb	r2, [r3, #0]
  for(i=0;i<KYBER_N/2;i++) {
 80046f4:	9b03      	ldr	r3, [sp, #12]
 80046f6:	3301      	adds	r3, #1
 80046f8:	9303      	str	r3, [sp, #12]
 80046fa:	9b03      	ldr	r3, [sp, #12]
 80046fc:	2b7f      	cmp	r3, #127	; 0x7f
 80046fe:	d9a3      	bls.n	8004648 <pqcrystals_kyber512_ref_poly_tobytes+0xc>
  }
}
 8004700:	bf00      	nop
 8004702:	bf00      	nop
 8004704:	b004      	add	sp, #16
 8004706:	4770      	bx	lr

08004708 <pqcrystals_kyber512_ref_poly_frombytes>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: pointer to input byte array
*                                  (of KYBER_POLYBYTES bytes)
**************************************************/
void poly_frombytes(poly *r, const uint8_t a[KYBER_POLYBYTES])
{
 8004708:	b084      	sub	sp, #16
 800470a:	9001      	str	r0, [sp, #4]
 800470c:	9100      	str	r1, [sp, #0]
  unsigned int i;
  for(i=0;i<KYBER_N/2;i++) {
 800470e:	2300      	movs	r3, #0
 8004710:	9303      	str	r3, [sp, #12]
 8004712:	e03e      	b.n	8004792 <pqcrystals_kyber512_ref_poly_frombytes+0x8a>
    r->coeffs[2*i]   = ((a[3*i+0] >> 0) | ((uint16_t)a[3*i+1] << 8)) & 0xFFF;
 8004714:	9a03      	ldr	r2, [sp, #12]
 8004716:	4613      	mov	r3, r2
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	4413      	add	r3, r2
 800471c:	9a00      	ldr	r2, [sp, #0]
 800471e:	4413      	add	r3, r2
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	b219      	sxth	r1, r3
 8004724:	9a03      	ldr	r2, [sp, #12]
 8004726:	4613      	mov	r3, r2
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	4413      	add	r3, r2
 800472c:	3301      	adds	r3, #1
 800472e:	9a00      	ldr	r2, [sp, #0]
 8004730:	4413      	add	r3, r2
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	021b      	lsls	r3, r3, #8
 8004736:	b21b      	sxth	r3, r3
 8004738:	430b      	orrs	r3, r1
 800473a:	b21b      	sxth	r3, r3
 800473c:	9a03      	ldr	r2, [sp, #12]
 800473e:	0052      	lsls	r2, r2, #1
 8004740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004744:	b219      	sxth	r1, r3
 8004746:	9b01      	ldr	r3, [sp, #4]
 8004748:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    r->coeffs[2*i+1] = ((a[3*i+1] >> 4) | ((uint16_t)a[3*i+2] << 4)) & 0xFFF;
 800474c:	9a03      	ldr	r2, [sp, #12]
 800474e:	4613      	mov	r3, r2
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	4413      	add	r3, r2
 8004754:	3301      	adds	r3, #1
 8004756:	9a00      	ldr	r2, [sp, #0]
 8004758:	4413      	add	r3, r2
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	b2db      	uxtb	r3, r3
 8004760:	b219      	sxth	r1, r3
 8004762:	9a03      	ldr	r2, [sp, #12]
 8004764:	4613      	mov	r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	4413      	add	r3, r2
 800476a:	3302      	adds	r3, #2
 800476c:	9a00      	ldr	r2, [sp, #0]
 800476e:	4413      	add	r3, r2
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	b21b      	sxth	r3, r3
 8004776:	430b      	orrs	r3, r1
 8004778:	b21b      	sxth	r3, r3
 800477a:	9a03      	ldr	r2, [sp, #12]
 800477c:	0052      	lsls	r2, r2, #1
 800477e:	3201      	adds	r2, #1
 8004780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004784:	b219      	sxth	r1, r3
 8004786:	9b01      	ldr	r3, [sp, #4]
 8004788:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N/2;i++) {
 800478c:	9b03      	ldr	r3, [sp, #12]
 800478e:	3301      	adds	r3, #1
 8004790:	9303      	str	r3, [sp, #12]
 8004792:	9b03      	ldr	r3, [sp, #12]
 8004794:	2b7f      	cmp	r3, #127	; 0x7f
 8004796:	d9bd      	bls.n	8004714 <pqcrystals_kyber512_ref_poly_frombytes+0xc>
  }
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop
 800479c:	b004      	add	sp, #16
 800479e:	4770      	bx	lr

080047a0 <pqcrystals_kyber512_ref_poly_getnoise_eta1>:
*              - const uint8_t *seed: pointer to input seed
*                                     (of length KYBER_SYMBYTES bytes)
*              - uint8_t nonce: one-byte input nonce
**************************************************/
void poly_getnoise_eta1(poly *r, const uint8_t seed[KYBER_SYMBYTES], uint8_t nonce)
{
 80047a0:	b500      	push	{lr}
 80047a2:	b0b5      	sub	sp, #212	; 0xd4
 80047a4:	9003      	str	r0, [sp, #12]
 80047a6:	9102      	str	r1, [sp, #8]
 80047a8:	4613      	mov	r3, r2
 80047aa:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t buf[KYBER_ETA1*KYBER_N/4];
  prf(buf, sizeof(buf), seed, nonce);
 80047ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80047b2:	a804      	add	r0, sp, #16
 80047b4:	9a02      	ldr	r2, [sp, #8]
 80047b6:	21c0      	movs	r1, #192	; 0xc0
 80047b8:	f000 fbe2 	bl	8004f80 <pqcrystals_kyber512_ref_kyber_shake256_prf>
  poly_cbd_eta1(r, buf);
 80047bc:	ab04      	add	r3, sp, #16
 80047be:	4619      	mov	r1, r3
 80047c0:	9803      	ldr	r0, [sp, #12]
 80047c2:	f7fb fee1 	bl	8000588 <pqcrystals_kyber512_ref_poly_cbd_eta1>
}
 80047c6:	bf00      	nop
 80047c8:	b035      	add	sp, #212	; 0xd4
 80047ca:	f85d fb04 	ldr.w	pc, [sp], #4

080047ce <pqcrystals_kyber512_ref_poly_ntt>:
*              inputs assumed to be in normal order, output in bitreversed order
*
* Arguments:   - uint16_t *r: pointer to in/output polynomial
**************************************************/
void poly_ntt(poly *r)
{
 80047ce:	b500      	push	{lr}
 80047d0:	b083      	sub	sp, #12
 80047d2:	9001      	str	r0, [sp, #4]
  ntt(r->coeffs);
 80047d4:	9b01      	ldr	r3, [sp, #4]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fe64 	bl	80044a4 <pqcrystals_kyber512_ref_ntt>
  poly_reduce(r);
 80047dc:	9801      	ldr	r0, [sp, #4]
 80047de:	f000 f874 	bl	80048ca <pqcrystals_kyber512_ref_poly_reduce>
}
 80047e2:	bf00      	nop
 80047e4:	b003      	add	sp, #12
 80047e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080047ec <pqcrystals_kyber512_ref_poly_basemul_montgomery>:
* Arguments:   - poly *r: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_basemul_montgomery(poly *r, const poly *a, const poly *b)
{
 80047ec:	b510      	push	{r4, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	9003      	str	r0, [sp, #12]
 80047f2:	9102      	str	r1, [sp, #8]
 80047f4:	9201      	str	r2, [sp, #4]
  unsigned int i;
  for(i=0;i<KYBER_N/4;i++) {
 80047f6:	2300      	movs	r3, #0
 80047f8:	9305      	str	r3, [sp, #20]
 80047fa:	e035      	b.n	8004868 <pqcrystals_kyber512_ref_poly_basemul_montgomery+0x7c>
    basemul(&r->coeffs[4*i], &a->coeffs[4*i], &b->coeffs[4*i], zetas[64+i]);
 80047fc:	9b05      	ldr	r3, [sp, #20]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	9a03      	ldr	r2, [sp, #12]
 8004804:	18d0      	adds	r0, r2, r3
 8004806:	9b05      	ldr	r3, [sp, #20]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	9a02      	ldr	r2, [sp, #8]
 800480e:	18d1      	adds	r1, r2, r3
 8004810:	9b05      	ldr	r3, [sp, #20]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	9a01      	ldr	r2, [sp, #4]
 8004818:	441a      	add	r2, r3
 800481a:	9b05      	ldr	r3, [sp, #20]
 800481c:	3340      	adds	r3, #64	; 0x40
 800481e:	4c16      	ldr	r4, [pc, #88]	; (8004878 <pqcrystals_kyber512_ref_poly_basemul_montgomery+0x8c>)
 8004820:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8004824:	f7ff fea6 	bl	8004574 <pqcrystals_kyber512_ref_basemul>
    basemul(&r->coeffs[4*i+2], &a->coeffs[4*i+2], &b->coeffs[4*i+2], -zetas[64+i]);
 8004828:	9b05      	ldr	r3, [sp, #20]
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	3302      	adds	r3, #2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	9a03      	ldr	r2, [sp, #12]
 8004832:	18d0      	adds	r0, r2, r3
 8004834:	9b05      	ldr	r3, [sp, #20]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	3302      	adds	r3, #2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	9a02      	ldr	r2, [sp, #8]
 800483e:	18d1      	adds	r1, r2, r3
 8004840:	9b05      	ldr	r3, [sp, #20]
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	3302      	adds	r3, #2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	9a01      	ldr	r2, [sp, #4]
 800484a:	441a      	add	r2, r3
 800484c:	9b05      	ldr	r3, [sp, #20]
 800484e:	3340      	adds	r3, #64	; 0x40
 8004850:	4c09      	ldr	r4, [pc, #36]	; (8004878 <pqcrystals_kyber512_ref_poly_basemul_montgomery+0x8c>)
 8004852:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8004856:	b29b      	uxth	r3, r3
 8004858:	425b      	negs	r3, r3
 800485a:	b29b      	uxth	r3, r3
 800485c:	b21b      	sxth	r3, r3
 800485e:	f7ff fe89 	bl	8004574 <pqcrystals_kyber512_ref_basemul>
  for(i=0;i<KYBER_N/4;i++) {
 8004862:	9b05      	ldr	r3, [sp, #20]
 8004864:	3301      	adds	r3, #1
 8004866:	9305      	str	r3, [sp, #20]
 8004868:	9b05      	ldr	r3, [sp, #20]
 800486a:	2b3f      	cmp	r3, #63	; 0x3f
 800486c:	d9c6      	bls.n	80047fc <pqcrystals_kyber512_ref_poly_basemul_montgomery+0x10>
  }
}
 800486e:	bf00      	nop
 8004870:	bf00      	nop
 8004872:	b006      	add	sp, #24
 8004874:	bd10      	pop	{r4, pc}
 8004876:	bf00      	nop
 8004878:	08007650 	.word	0x08007650

0800487c <pqcrystals_kyber512_ref_poly_tomont>:
*              from normal domain to Montgomery domain
*
* Arguments:   - poly *r: pointer to input/output polynomial
**************************************************/
void poly_tomont(poly *r)
{
 800487c:	b500      	push	{lr}
 800487e:	b085      	sub	sp, #20
 8004880:	9001      	str	r0, [sp, #4]
  unsigned int i;
  const int16_t f = (1ULL << 32) % KYBER_Q;
 8004882:	f240 5349 	movw	r3, #1353	; 0x549
 8004886:	f8ad 300a 	strh.w	r3, [sp, #10]
  for(i=0;i<KYBER_N;i++)
 800488a:	2300      	movs	r3, #0
 800488c:	9303      	str	r3, [sp, #12]
 800488e:	e014      	b.n	80048ba <pqcrystals_kyber512_ref_poly_tomont+0x3e>
    r->coeffs[i] = montgomery_reduce((int32_t)r->coeffs[i]*f);
 8004890:	9b01      	ldr	r3, [sp, #4]
 8004892:	9a03      	ldr	r2, [sp, #12]
 8004894:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004898:	461a      	mov	r2, r3
 800489a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 faa6 	bl	8004df4 <pqcrystals_kyber512_ref_montgomery_reduce>
 80048a8:	4603      	mov	r3, r0
 80048aa:	4619      	mov	r1, r3
 80048ac:	9b01      	ldr	r3, [sp, #4]
 80048ae:	9a03      	ldr	r2, [sp, #12]
 80048b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	3301      	adds	r3, #1
 80048b8:	9303      	str	r3, [sp, #12]
 80048ba:	9b03      	ldr	r3, [sp, #12]
 80048bc:	2bff      	cmp	r3, #255	; 0xff
 80048be:	d9e7      	bls.n	8004890 <pqcrystals_kyber512_ref_poly_tomont+0x14>
}
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	b005      	add	sp, #20
 80048c6:	f85d fb04 	ldr.w	pc, [sp], #4

080048ca <pqcrystals_kyber512_ref_poly_reduce>:
*              for details of the Barrett reduction see comments in reduce.c
*
* Arguments:   - poly *r: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *r)
{
 80048ca:	b500      	push	{lr}
 80048cc:	b085      	sub	sp, #20
 80048ce:	9001      	str	r0, [sp, #4]
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
 80048d0:	2300      	movs	r3, #0
 80048d2:	9303      	str	r3, [sp, #12]
 80048d4:	e00f      	b.n	80048f6 <pqcrystals_kyber512_ref_poly_reduce+0x2c>
    r->coeffs[i] = barrett_reduce(r->coeffs[i]);
 80048d6:	9b01      	ldr	r3, [sp, #4]
 80048d8:	9a03      	ldr	r2, [sp, #12]
 80048da:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 faae 	bl	8004e40 <pqcrystals_kyber512_ref_barrett_reduce>
 80048e4:	4603      	mov	r3, r0
 80048e6:	4619      	mov	r1, r3
 80048e8:	9b01      	ldr	r3, [sp, #4]
 80048ea:	9a03      	ldr	r2, [sp, #12]
 80048ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 80048f0:	9b03      	ldr	r3, [sp, #12]
 80048f2:	3301      	adds	r3, #1
 80048f4:	9303      	str	r3, [sp, #12]
 80048f6:	9b03      	ldr	r3, [sp, #12]
 80048f8:	2bff      	cmp	r3, #255	; 0xff
 80048fa:	d9ec      	bls.n	80048d6 <pqcrystals_kyber512_ref_poly_reduce+0xc>
}
 80048fc:	bf00      	nop
 80048fe:	bf00      	nop
 8004900:	b005      	add	sp, #20
 8004902:	f85d fb04 	ldr.w	pc, [sp], #4

08004906 <pqcrystals_kyber512_ref_poly_add>:
* Arguments: - poly *r: pointer to output polynomial
*            - const poly *a: pointer to first input polynomial
*            - const poly *b: pointer to second input polynomial
**************************************************/
void poly_add(poly *r, const poly *a, const poly *b)
{
 8004906:	b086      	sub	sp, #24
 8004908:	9003      	str	r0, [sp, #12]
 800490a:	9102      	str	r1, [sp, #8]
 800490c:	9201      	str	r2, [sp, #4]
  unsigned int i;
  for(i=0;i<KYBER_N;i++)
 800490e:	2300      	movs	r3, #0
 8004910:	9305      	str	r3, [sp, #20]
 8004912:	e013      	b.n	800493c <pqcrystals_kyber512_ref_poly_add+0x36>
    r->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8004914:	9b02      	ldr	r3, [sp, #8]
 8004916:	9a05      	ldr	r2, [sp, #20]
 8004918:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800491c:	b29a      	uxth	r2, r3
 800491e:	9b01      	ldr	r3, [sp, #4]
 8004920:	9905      	ldr	r1, [sp, #20]
 8004922:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8004926:	b29b      	uxth	r3, r3
 8004928:	4413      	add	r3, r2
 800492a:	b29b      	uxth	r3, r3
 800492c:	b219      	sxth	r1, r3
 800492e:	9b03      	ldr	r3, [sp, #12]
 8004930:	9a05      	ldr	r2, [sp, #20]
 8004932:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for(i=0;i<KYBER_N;i++)
 8004936:	9b05      	ldr	r3, [sp, #20]
 8004938:	3301      	adds	r3, #1
 800493a:	9305      	str	r3, [sp, #20]
 800493c:	9b05      	ldr	r3, [sp, #20]
 800493e:	2bff      	cmp	r3, #255	; 0xff
 8004940:	d9e8      	bls.n	8004914 <pqcrystals_kyber512_ref_poly_add+0xe>
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	b006      	add	sp, #24
 8004948:	4770      	bx	lr

0800494a <pqcrystals_kyber512_ref_polyvec_tobytes>:
* Arguments:   - uint8_t *r: pointer to output byte array
*                            (needs space for KYBER_POLYVECBYTES)
*              - const polyvec *a: pointer to input vector of polynomials
**************************************************/
void polyvec_tobytes(uint8_t r[KYBER_POLYVECBYTES], const polyvec *a)
{
 800494a:	b500      	push	{lr}
 800494c:	b085      	sub	sp, #20
 800494e:	9001      	str	r0, [sp, #4]
 8004950:	9100      	str	r1, [sp, #0]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8004952:	2300      	movs	r3, #0
 8004954:	9303      	str	r3, [sp, #12]
 8004956:	e011      	b.n	800497c <pqcrystals_kyber512_ref_polyvec_tobytes+0x32>
    poly_tobytes(r+i*KYBER_POLYBYTES, &a->vec[i]);
 8004958:	9a03      	ldr	r2, [sp, #12]
 800495a:	4613      	mov	r3, r2
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	4413      	add	r3, r2
 8004960:	01db      	lsls	r3, r3, #7
 8004962:	461a      	mov	r2, r3
 8004964:	9b01      	ldr	r3, [sp, #4]
 8004966:	1898      	adds	r0, r3, r2
 8004968:	9b03      	ldr	r3, [sp, #12]
 800496a:	025b      	lsls	r3, r3, #9
 800496c:	9a00      	ldr	r2, [sp, #0]
 800496e:	4413      	add	r3, r2
 8004970:	4619      	mov	r1, r3
 8004972:	f7ff fe63 	bl	800463c <pqcrystals_kyber512_ref_poly_tobytes>
  for(i=0;i<KYBER_K;i++)
 8004976:	9b03      	ldr	r3, [sp, #12]
 8004978:	3301      	adds	r3, #1
 800497a:	9303      	str	r3, [sp, #12]
 800497c:	9b03      	ldr	r3, [sp, #12]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d9ea      	bls.n	8004958 <pqcrystals_kyber512_ref_polyvec_tobytes+0xe>
}
 8004982:	bf00      	nop
 8004984:	bf00      	nop
 8004986:	b005      	add	sp, #20
 8004988:	f85d fb04 	ldr.w	pc, [sp], #4

0800498c <pqcrystals_kyber512_ref_polyvec_frombytes>:
* Arguments:   - uint8_t *r:       pointer to output byte array
*              - const polyvec *a: pointer to input vector of polynomials
*                                  (of length KYBER_POLYVECBYTES)
**************************************************/
void polyvec_frombytes(polyvec *r, const uint8_t a[KYBER_POLYVECBYTES])
{
 800498c:	b500      	push	{lr}
 800498e:	b085      	sub	sp, #20
 8004990:	9001      	str	r0, [sp, #4]
 8004992:	9100      	str	r1, [sp, #0]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8004994:	2300      	movs	r3, #0
 8004996:	9303      	str	r3, [sp, #12]
 8004998:	e011      	b.n	80049be <pqcrystals_kyber512_ref_polyvec_frombytes+0x32>
    poly_frombytes(&r->vec[i], a+i*KYBER_POLYBYTES);
 800499a:	9b03      	ldr	r3, [sp, #12]
 800499c:	025b      	lsls	r3, r3, #9
 800499e:	9a01      	ldr	r2, [sp, #4]
 80049a0:	18d0      	adds	r0, r2, r3
 80049a2:	9a03      	ldr	r2, [sp, #12]
 80049a4:	4613      	mov	r3, r2
 80049a6:	005b      	lsls	r3, r3, #1
 80049a8:	4413      	add	r3, r2
 80049aa:	01db      	lsls	r3, r3, #7
 80049ac:	461a      	mov	r2, r3
 80049ae:	9b00      	ldr	r3, [sp, #0]
 80049b0:	4413      	add	r3, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	f7ff fea8 	bl	8004708 <pqcrystals_kyber512_ref_poly_frombytes>
  for(i=0;i<KYBER_K;i++)
 80049b8:	9b03      	ldr	r3, [sp, #12]
 80049ba:	3301      	adds	r3, #1
 80049bc:	9303      	str	r3, [sp, #12]
 80049be:	9b03      	ldr	r3, [sp, #12]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d9ea      	bls.n	800499a <pqcrystals_kyber512_ref_polyvec_frombytes+0xe>
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
 80049c8:	b005      	add	sp, #20
 80049ca:	f85d fb04 	ldr.w	pc, [sp], #4

080049ce <pqcrystals_kyber512_ref_polyvec_ntt>:
* Description: Apply forward NTT to all elements of a vector of polynomials
*
* Arguments:   - polyvec *r: pointer to in/output vector of polynomials
**************************************************/
void polyvec_ntt(polyvec *r)
{
 80049ce:	b500      	push	{lr}
 80049d0:	b085      	sub	sp, #20
 80049d2:	9001      	str	r0, [sp, #4]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 80049d4:	2300      	movs	r3, #0
 80049d6:	9303      	str	r3, [sp, #12]
 80049d8:	e009      	b.n	80049ee <pqcrystals_kyber512_ref_polyvec_ntt+0x20>
    poly_ntt(&r->vec[i]);
 80049da:	9b03      	ldr	r3, [sp, #12]
 80049dc:	025b      	lsls	r3, r3, #9
 80049de:	9a01      	ldr	r2, [sp, #4]
 80049e0:	4413      	add	r3, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fef3 	bl	80047ce <pqcrystals_kyber512_ref_poly_ntt>
  for(i=0;i<KYBER_K;i++)
 80049e8:	9b03      	ldr	r3, [sp, #12]
 80049ea:	3301      	adds	r3, #1
 80049ec:	9303      	str	r3, [sp, #12]
 80049ee:	9b03      	ldr	r3, [sp, #12]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d9f2      	bls.n	80049da <pqcrystals_kyber512_ref_polyvec_ntt+0xc>
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	b005      	add	sp, #20
 80049fa:	f85d fb04 	ldr.w	pc, [sp], #4

080049fe <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery>:
* Arguments: - poly *r: pointer to output polynomial
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void polyvec_basemul_acc_montgomery(poly *r, const polyvec *a, const polyvec *b)
{
 80049fe:	b500      	push	{lr}
 8004a00:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8004a04:	ab86      	add	r3, sp, #536	; 0x218
 8004a06:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8004a0a:	6018      	str	r0, [r3, #0]
 8004a0c:	ab86      	add	r3, sp, #536	; 0x218
 8004a0e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8004a12:	6019      	str	r1, [r3, #0]
 8004a14:	ab86      	add	r3, sp, #536	; 0x218
 8004a16:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8004a1a:	601a      	str	r2, [r3, #0]
  unsigned int i;
  poly t;

  poly_basemul_montgomery(r, &a->vec[0], &b->vec[0]);
 8004a1c:	ab86      	add	r3, sp, #536	; 0x218
 8004a1e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8004a22:	6819      	ldr	r1, [r3, #0]
 8004a24:	ab86      	add	r3, sp, #536	; 0x218
 8004a26:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	ab86      	add	r3, sp, #536	; 0x218
 8004a2e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8004a32:	6818      	ldr	r0, [r3, #0]
 8004a34:	f7ff feda 	bl	80047ec <pqcrystals_kyber512_ref_poly_basemul_montgomery>
  for(i=1;i<KYBER_K;i++) {
 8004a38:	2301      	movs	r3, #1
 8004a3a:	9385      	str	r3, [sp, #532]	; 0x214
 8004a3c:	e01f      	b.n	8004a7e <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery+0x80>
    poly_basemul_montgomery(&t, &a->vec[i], &b->vec[i]);
 8004a3e:	ab86      	add	r3, sp, #536	; 0x218
 8004a40:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8004a44:	9b85      	ldr	r3, [sp, #532]	; 0x214
 8004a46:	025b      	lsls	r3, r3, #9
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	18d1      	adds	r1, r2, r3
 8004a4c:	ab86      	add	r3, sp, #536	; 0x218
 8004a4e:	f5a3 7205 	sub.w	r2, r3, #532	; 0x214
 8004a52:	9b85      	ldr	r3, [sp, #532]	; 0x214
 8004a54:	025b      	lsls	r3, r3, #9
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	441a      	add	r2, r3
 8004a5a:	ab05      	add	r3, sp, #20
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff fec5 	bl	80047ec <pqcrystals_kyber512_ref_poly_basemul_montgomery>
    poly_add(r, r, &t);
 8004a62:	aa05      	add	r2, sp, #20
 8004a64:	ab86      	add	r3, sp, #536	; 0x218
 8004a66:	f5a3 7103 	sub.w	r1, r3, #524	; 0x20c
 8004a6a:	ab86      	add	r3, sp, #536	; 0x218
 8004a6c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8004a70:	6809      	ldr	r1, [r1, #0]
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	f7ff ff47 	bl	8004906 <pqcrystals_kyber512_ref_poly_add>
  for(i=1;i<KYBER_K;i++) {
 8004a78:	9b85      	ldr	r3, [sp, #532]	; 0x214
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	9385      	str	r3, [sp, #532]	; 0x214
 8004a7e:	9b85      	ldr	r3, [sp, #532]	; 0x214
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d9dc      	bls.n	8004a3e <pqcrystals_kyber512_ref_polyvec_basemul_acc_montgomery+0x40>
  }

  poly_reduce(r);
 8004a84:	ab86      	add	r3, sp, #536	; 0x218
 8004a86:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	f7ff ff1d 	bl	80048ca <pqcrystals_kyber512_ref_poly_reduce>
}
 8004a90:	bf00      	nop
 8004a92:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 8004a96:	f85d fb04 	ldr.w	pc, [sp], #4

08004a9a <pqcrystals_kyber512_ref_polyvec_reduce>:
*              for details of the Barrett reduction see comments in reduce.c
*
* Arguments:   - polyvec *r: pointer to input/output polynomial
**************************************************/
void polyvec_reduce(polyvec *r)
{
 8004a9a:	b500      	push	{lr}
 8004a9c:	b085      	sub	sp, #20
 8004a9e:	9001      	str	r0, [sp, #4]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	9303      	str	r3, [sp, #12]
 8004aa4:	e009      	b.n	8004aba <pqcrystals_kyber512_ref_polyvec_reduce+0x20>
    poly_reduce(&r->vec[i]);
 8004aa6:	9b03      	ldr	r3, [sp, #12]
 8004aa8:	025b      	lsls	r3, r3, #9
 8004aaa:	9a01      	ldr	r2, [sp, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff ff0b 	bl	80048ca <pqcrystals_kyber512_ref_poly_reduce>
  for(i=0;i<KYBER_K;i++)
 8004ab4:	9b03      	ldr	r3, [sp, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	9303      	str	r3, [sp, #12]
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d9f2      	bls.n	8004aa6 <pqcrystals_kyber512_ref_polyvec_reduce+0xc>
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	b005      	add	sp, #20
 8004ac6:	f85d fb04 	ldr.w	pc, [sp], #4

08004aca <pqcrystals_kyber512_ref_polyvec_add>:
* Arguments: - polyvec *r: pointer to output vector of polynomials
*            - const polyvec *a: pointer to first input vector of polynomials
*            - const polyvec *b: pointer to second input vector of polynomials
**************************************************/
void polyvec_add(polyvec *r, const polyvec *a, const polyvec *b)
{
 8004aca:	b500      	push	{lr}
 8004acc:	b087      	sub	sp, #28
 8004ace:	9003      	str	r0, [sp, #12]
 8004ad0:	9102      	str	r1, [sp, #8]
 8004ad2:	9201      	str	r2, [sp, #4]
  unsigned int i;
  for(i=0;i<KYBER_K;i++)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	9305      	str	r3, [sp, #20]
 8004ad8:	e011      	b.n	8004afe <pqcrystals_kyber512_ref_polyvec_add+0x34>
    poly_add(&r->vec[i], &a->vec[i], &b->vec[i]);
 8004ada:	9b05      	ldr	r3, [sp, #20]
 8004adc:	025b      	lsls	r3, r3, #9
 8004ade:	9a03      	ldr	r2, [sp, #12]
 8004ae0:	18d0      	adds	r0, r2, r3
 8004ae2:	9b05      	ldr	r3, [sp, #20]
 8004ae4:	025b      	lsls	r3, r3, #9
 8004ae6:	9a02      	ldr	r2, [sp, #8]
 8004ae8:	18d1      	adds	r1, r2, r3
 8004aea:	9b05      	ldr	r3, [sp, #20]
 8004aec:	025b      	lsls	r3, r3, #9
 8004aee:	9a01      	ldr	r2, [sp, #4]
 8004af0:	4413      	add	r3, r2
 8004af2:	461a      	mov	r2, r3
 8004af4:	f7ff ff07 	bl	8004906 <pqcrystals_kyber512_ref_poly_add>
  for(i=0;i<KYBER_K;i++)
 8004af8:	9b05      	ldr	r3, [sp, #20]
 8004afa:	3301      	adds	r3, #1
 8004afc:	9305      	str	r3, [sp, #20]
 8004afe:	9b05      	ldr	r3, [sp, #20]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d9ea      	bls.n	8004ada <pqcrystals_kyber512_ref_polyvec_add+0x10>
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	b007      	add	sp, #28
 8004b0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004b10 <surf>:

#define ROTATE(x,b) (((x) << (b)) | ((x) >> (32 - (b))))
#define MUSH(i,b) x = t[i] += (((x ^ seed[i]) + sum) ^ ROTATE(x,b));

static void surf(void)
{
 8004b10:	b092      	sub	sp, #72	; 0x48
  uint32_t t[12]; uint32_t x; uint32_t sum = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	9310      	str	r3, [sp, #64]	; 0x40
  int r; int i; int loop;

  for (i = 0;i < 12;++i) t[i] = in[i] ^ seed[12 + i];
 8004b16:	2300      	movs	r3, #0
 8004b18:	930e      	str	r3, [sp, #56]	; 0x38
 8004b1a:	e012      	b.n	8004b42 <surf+0x32>
 8004b1c:	4a89      	ldr	r2, [pc, #548]	; (8004d44 <surf+0x234>)
 8004b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b26:	330c      	adds	r3, #12
 8004b28:	4987      	ldr	r1, [pc, #540]	; (8004d48 <surf+0x238>)
 8004b2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b2e:	405a      	eors	r2, r3
 8004b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	3348      	adds	r3, #72	; 0x48
 8004b36:	446b      	add	r3, sp
 8004b38:	f843 2c44 	str.w	r2, [r3, #-68]
 8004b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b3e:	3301      	adds	r3, #1
 8004b40:	930e      	str	r3, [sp, #56]	; 0x38
 8004b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b44:	2b0b      	cmp	r3, #11
 8004b46:	dde9      	ble.n	8004b1c <surf+0xc>
  for (i = 0;i < 8;++i) out[i] = seed[24 + i];
 8004b48:	2300      	movs	r3, #0
 8004b4a:	930e      	str	r3, [sp, #56]	; 0x38
 8004b4c:	e00b      	b.n	8004b66 <surf+0x56>
 8004b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b50:	3318      	adds	r3, #24
 8004b52:	4a7d      	ldr	r2, [pc, #500]	; (8004d48 <surf+0x238>)
 8004b54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b58:	497c      	ldr	r1, [pc, #496]	; (8004d4c <surf+0x23c>)
 8004b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004b60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b62:	3301      	adds	r3, #1
 8004b64:	930e      	str	r3, [sp, #56]	; 0x38
 8004b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b68:	2b07      	cmp	r3, #7
 8004b6a:	ddf0      	ble.n	8004b4e <surf+0x3e>
  x = t[11];
 8004b6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b6e:	9311      	str	r3, [sp, #68]	; 0x44
  for (loop = 0;loop < 2;++loop) {
 8004b70:	2300      	movs	r3, #0
 8004b72:	930d      	str	r3, [sp, #52]	; 0x34
 8004b74:	e0dd      	b.n	8004d32 <surf+0x222>
    for (r = 0;r < 16;++r) {
 8004b76:	2300      	movs	r3, #0
 8004b78:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b7a:	e0ba      	b.n	8004cf2 <surf+0x1e2>
      sum += 0x9e3779b9;
 8004b7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b7e:	4b74      	ldr	r3, [pc, #464]	; (8004d50 <surf+0x240>)
 8004b80:	4413      	add	r3, r2
 8004b82:	9310      	str	r3, [sp, #64]	; 0x40
      MUSH(0,5) MUSH(1,7) MUSH(2,9) MUSH(3,13)
 8004b84:	9a01      	ldr	r2, [sp, #4]
 8004b86:	4b70      	ldr	r3, [pc, #448]	; (8004d48 <surf+0x238>)
 8004b88:	6819      	ldr	r1, [r3, #0]
 8004b8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b8c:	4059      	eors	r1, r3
 8004b8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b90:	4419      	add	r1, r3
 8004b92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004b94:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8004b98:	404b      	eors	r3, r1
 8004b9a:	4413      	add	r3, r2
 8004b9c:	9301      	str	r3, [sp, #4]
 8004b9e:	9b01      	ldr	r3, [sp, #4]
 8004ba0:	9311      	str	r3, [sp, #68]	; 0x44
 8004ba2:	9a02      	ldr	r2, [sp, #8]
 8004ba4:	4b68      	ldr	r3, [pc, #416]	; (8004d48 <surf+0x238>)
 8004ba6:	6859      	ldr	r1, [r3, #4]
 8004ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004baa:	4059      	eors	r1, r3
 8004bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bae:	4419      	add	r1, r3
 8004bb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bb2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004bb6:	404b      	eors	r3, r1
 8004bb8:	4413      	add	r3, r2
 8004bba:	9302      	str	r3, [sp, #8]
 8004bbc:	9b02      	ldr	r3, [sp, #8]
 8004bbe:	9311      	str	r3, [sp, #68]	; 0x44
 8004bc0:	9a03      	ldr	r2, [sp, #12]
 8004bc2:	4b61      	ldr	r3, [pc, #388]	; (8004d48 <surf+0x238>)
 8004bc4:	6899      	ldr	r1, [r3, #8]
 8004bc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bc8:	4059      	eors	r1, r3
 8004bca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bcc:	4419      	add	r1, r3
 8004bce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bd0:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8004bd4:	404b      	eors	r3, r1
 8004bd6:	4413      	add	r3, r2
 8004bd8:	9303      	str	r3, [sp, #12]
 8004bda:	9b03      	ldr	r3, [sp, #12]
 8004bdc:	9311      	str	r3, [sp, #68]	; 0x44
 8004bde:	9a04      	ldr	r2, [sp, #16]
 8004be0:	4b59      	ldr	r3, [pc, #356]	; (8004d48 <surf+0x238>)
 8004be2:	68d9      	ldr	r1, [r3, #12]
 8004be4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004be6:	4059      	eors	r1, r3
 8004be8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bea:	4419      	add	r1, r3
 8004bec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bee:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004bf2:	404b      	eors	r3, r1
 8004bf4:	4413      	add	r3, r2
 8004bf6:	9304      	str	r3, [sp, #16]
 8004bf8:	9b04      	ldr	r3, [sp, #16]
 8004bfa:	9311      	str	r3, [sp, #68]	; 0x44
      MUSH(4,5) MUSH(5,7) MUSH(6,9) MUSH(7,13)
 8004bfc:	9a05      	ldr	r2, [sp, #20]
 8004bfe:	4b52      	ldr	r3, [pc, #328]	; (8004d48 <surf+0x238>)
 8004c00:	6919      	ldr	r1, [r3, #16]
 8004c02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c04:	4059      	eors	r1, r3
 8004c06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c08:	4419      	add	r1, r3
 8004c0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c0c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8004c10:	404b      	eors	r3, r1
 8004c12:	4413      	add	r3, r2
 8004c14:	9305      	str	r3, [sp, #20]
 8004c16:	9b05      	ldr	r3, [sp, #20]
 8004c18:	9311      	str	r3, [sp, #68]	; 0x44
 8004c1a:	9a06      	ldr	r2, [sp, #24]
 8004c1c:	4b4a      	ldr	r3, [pc, #296]	; (8004d48 <surf+0x238>)
 8004c1e:	6959      	ldr	r1, [r3, #20]
 8004c20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c22:	4059      	eors	r1, r3
 8004c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c26:	4419      	add	r1, r3
 8004c28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c2a:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004c2e:	404b      	eors	r3, r1
 8004c30:	4413      	add	r3, r2
 8004c32:	9306      	str	r3, [sp, #24]
 8004c34:	9b06      	ldr	r3, [sp, #24]
 8004c36:	9311      	str	r3, [sp, #68]	; 0x44
 8004c38:	9a07      	ldr	r2, [sp, #28]
 8004c3a:	4b43      	ldr	r3, [pc, #268]	; (8004d48 <surf+0x238>)
 8004c3c:	6999      	ldr	r1, [r3, #24]
 8004c3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c40:	4059      	eors	r1, r3
 8004c42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c44:	4419      	add	r1, r3
 8004c46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c48:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8004c4c:	404b      	eors	r3, r1
 8004c4e:	4413      	add	r3, r2
 8004c50:	9307      	str	r3, [sp, #28]
 8004c52:	9b07      	ldr	r3, [sp, #28]
 8004c54:	9311      	str	r3, [sp, #68]	; 0x44
 8004c56:	9a08      	ldr	r2, [sp, #32]
 8004c58:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <surf+0x238>)
 8004c5a:	69d9      	ldr	r1, [r3, #28]
 8004c5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c5e:	4059      	eors	r1, r3
 8004c60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c62:	4419      	add	r1, r3
 8004c64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c66:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004c6a:	404b      	eors	r3, r1
 8004c6c:	4413      	add	r3, r2
 8004c6e:	9308      	str	r3, [sp, #32]
 8004c70:	9b08      	ldr	r3, [sp, #32]
 8004c72:	9311      	str	r3, [sp, #68]	; 0x44
      MUSH(8,5) MUSH(9,7) MUSH(10,9) MUSH(11,13)
 8004c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c76:	4b34      	ldr	r3, [pc, #208]	; (8004d48 <surf+0x238>)
 8004c78:	6a19      	ldr	r1, [r3, #32]
 8004c7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c7c:	4059      	eors	r1, r3
 8004c7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c80:	4419      	add	r1, r3
 8004c82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c84:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8004c88:	404b      	eors	r3, r1
 8004c8a:	4413      	add	r3, r2
 8004c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c90:	9311      	str	r3, [sp, #68]	; 0x44
 8004c92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c94:	4b2c      	ldr	r3, [pc, #176]	; (8004d48 <surf+0x238>)
 8004c96:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004c98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c9a:	4059      	eors	r1, r3
 8004c9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c9e:	4419      	add	r1, r3
 8004ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ca2:	ea4f 6373 	mov.w	r3, r3, ror #25
 8004ca6:	404b      	eors	r3, r1
 8004ca8:	4413      	add	r3, r2
 8004caa:	930a      	str	r3, [sp, #40]	; 0x28
 8004cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cae:	9311      	str	r3, [sp, #68]	; 0x44
 8004cb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cb2:	4b25      	ldr	r3, [pc, #148]	; (8004d48 <surf+0x238>)
 8004cb4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004cb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cb8:	4059      	eors	r1, r3
 8004cba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cbc:	4419      	add	r1, r3
 8004cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cc0:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8004cc4:	404b      	eors	r3, r1
 8004cc6:	4413      	add	r3, r2
 8004cc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ccc:	9311      	str	r3, [sp, #68]	; 0x44
 8004cce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cd0:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <surf+0x238>)
 8004cd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cd6:	4059      	eors	r1, r3
 8004cd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004cda:	4419      	add	r1, r3
 8004cdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cde:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8004ce2:	404b      	eors	r3, r1
 8004ce4:	4413      	add	r3, r2
 8004ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8004ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cea:	9311      	str	r3, [sp, #68]	; 0x44
    for (r = 0;r < 16;++r) {
 8004cec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cee:	3301      	adds	r3, #1
 8004cf0:	930f      	str	r3, [sp, #60]	; 0x3c
 8004cf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cf4:	2b0f      	cmp	r3, #15
 8004cf6:	f77f af41 	ble.w	8004b7c <surf+0x6c>
    }
    for (i = 0;i < 8;++i) out[i] ^= t[i + 4];
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	930e      	str	r3, [sp, #56]	; 0x38
 8004cfe:	e012      	b.n	8004d26 <surf+0x216>
 8004d00:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <surf+0x23c>)
 8004d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	3348      	adds	r3, #72	; 0x48
 8004d10:	446b      	add	r3, sp
 8004d12:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004d16:	405a      	eors	r2, r3
 8004d18:	490c      	ldr	r1, [pc, #48]	; (8004d4c <surf+0x23c>)
 8004d1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d22:	3301      	adds	r3, #1
 8004d24:	930e      	str	r3, [sp, #56]	; 0x38
 8004d26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d28:	2b07      	cmp	r3, #7
 8004d2a:	dde9      	ble.n	8004d00 <surf+0x1f0>
  for (loop = 0;loop < 2;++loop) {
 8004d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d2e:	3301      	adds	r3, #1
 8004d30:	930d      	str	r3, [sp, #52]	; 0x34
 8004d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	f77f af1e 	ble.w	8004b76 <surf+0x66>
  }
}
 8004d3a:	bf00      	nop
 8004d3c:	bf00      	nop
 8004d3e:	b012      	add	sp, #72	; 0x48
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	20000158 	.word	0x20000158
 8004d48:	20000000 	.word	0x20000000
 8004d4c:	20000188 	.word	0x20000188
 8004d50:	9e3779b9 	.word	0x9e3779b9

08004d54 <randombytes>:

void randombytes(uint8_t *x,size_t xlen)
{
 8004d54:	b500      	push	{lr}
 8004d56:	b083      	sub	sp, #12
 8004d58:	9001      	str	r0, [sp, #4]
 8004d5a:	9100      	str	r1, [sp, #0]
  while (xlen > 0) {
 8004d5c:	e03b      	b.n	8004dd6 <randombytes+0x82>
    if (!outleft) {
 8004d5e:	4b22      	ldr	r3, [pc, #136]	; (8004de8 <randombytes+0x94>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d124      	bne.n	8004db0 <randombytes+0x5c>
      if (!++in[0]) if (!++in[1]) if (!++in[2]) ++in[3];
 8004d66:	4b21      	ldr	r3, [pc, #132]	; (8004dec <randombytes+0x98>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	4a1f      	ldr	r2, [pc, #124]	; (8004dec <randombytes+0x98>)
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	4b1e      	ldr	r3, [pc, #120]	; (8004dec <randombytes+0x98>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d116      	bne.n	8004da6 <randombytes+0x52>
 8004d78:	4b1c      	ldr	r3, [pc, #112]	; (8004dec <randombytes+0x98>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	4a1b      	ldr	r2, [pc, #108]	; (8004dec <randombytes+0x98>)
 8004d80:	6053      	str	r3, [r2, #4]
 8004d82:	4b1a      	ldr	r3, [pc, #104]	; (8004dec <randombytes+0x98>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10d      	bne.n	8004da6 <randombytes+0x52>
 8004d8a:	4b18      	ldr	r3, [pc, #96]	; (8004dec <randombytes+0x98>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	4a16      	ldr	r2, [pc, #88]	; (8004dec <randombytes+0x98>)
 8004d92:	6093      	str	r3, [r2, #8]
 8004d94:	4b15      	ldr	r3, [pc, #84]	; (8004dec <randombytes+0x98>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d104      	bne.n	8004da6 <randombytes+0x52>
 8004d9c:	4b13      	ldr	r3, [pc, #76]	; (8004dec <randombytes+0x98>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	3301      	adds	r3, #1
 8004da2:	4a12      	ldr	r2, [pc, #72]	; (8004dec <randombytes+0x98>)
 8004da4:	60d3      	str	r3, [r2, #12]
      surf();
 8004da6:	f7ff feb3 	bl	8004b10 <surf>
      outleft = 8;
 8004daa:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <randombytes+0x94>)
 8004dac:	2208      	movs	r2, #8
 8004dae:	601a      	str	r2, [r3, #0]
    }
    *x = out[--outleft];
 8004db0:	4b0d      	ldr	r3, [pc, #52]	; (8004de8 <randombytes+0x94>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	4a0c      	ldr	r2, [pc, #48]	; (8004de8 <randombytes+0x94>)
 8004db8:	6013      	str	r3, [r2, #0]
 8004dba:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <randombytes+0x94>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a0c      	ldr	r2, [pc, #48]	; (8004df0 <randombytes+0x9c>)
 8004dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	9b01      	ldr	r3, [sp, #4]
 8004dc8:	701a      	strb	r2, [r3, #0]
    //printf("%02x", *x);/////////////////
    ++x;
 8004dca:	9b01      	ldr	r3, [sp, #4]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	9301      	str	r3, [sp, #4]
    --xlen;
 8004dd0:	9b00      	ldr	r3, [sp, #0]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	9300      	str	r3, [sp, #0]
  while (xlen > 0) {
 8004dd6:	9b00      	ldr	r3, [sp, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1c0      	bne.n	8004d5e <randombytes+0xa>
  }
  //printf("\n");/////////////
}
 8004ddc:	bf00      	nop
 8004dde:	bf00      	nop
 8004de0:	b003      	add	sp, #12
 8004de2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004de6:	bf00      	nop
 8004de8:	200001a8 	.word	0x200001a8
 8004dec:	20000158 	.word	0x20000158
 8004df0:	20000188 	.word	0x20000188

08004df4 <pqcrystals_kyber512_ref_montgomery_reduce>:
*                           has to be in {-q2^15,...,q2^15-1}
*
* Returns:     integer in {-q+1,...,q-1} congruent to a * R^-1 modulo q.
**************************************************/
int16_t montgomery_reduce(int32_t a)
{
 8004df4:	b084      	sub	sp, #16
 8004df6:	9001      	str	r0, [sp, #4]
  int16_t t;

  t = (int16_t)a*QINV;
 8004df8:	9b01      	ldr	r3, [sp, #4]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	0052      	lsls	r2, r2, #1
 8004e00:	441a      	add	r2, r3
 8004e02:	4611      	mov	r1, r2
 8004e04:	00c8      	lsls	r0, r1, #3
 8004e06:	4611      	mov	r1, r2
 8004e08:	4602      	mov	r2, r0
 8004e0a:	440a      	add	r2, r1
 8004e0c:	4611      	mov	r1, r2
 8004e0e:	00c8      	lsls	r0, r1, #3
 8004e10:	4611      	mov	r1, r2
 8004e12:	4602      	mov	r2, r0
 8004e14:	440a      	add	r2, r1
 8004e16:	0212      	lsls	r2, r2, #8
 8004e18:	4413      	add	r3, r2
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f8ad 300e 	strh.w	r3, [sp, #14]
  t = (a - (int32_t)t*KYBER_Q) >> 16;
 8004e20:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8004e24:	f46f 6250 	mvn.w	r2, #3328	; 0xd00
 8004e28:	fb03 f202 	mul.w	r2, r3, r2
 8004e2c:	9b01      	ldr	r3, [sp, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	141b      	asrs	r3, r3, #16
 8004e32:	f8ad 300e 	strh.w	r3, [sp, #14]
  return t;
 8004e36:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	b004      	add	sp, #16
 8004e3e:	4770      	bx	lr

08004e40 <pqcrystals_kyber512_ref_barrett_reduce>:
*
* Arguments:   - int16_t a: input integer to be reduced
*
* Returns:     integer in {-(q-1)/2,...,(q-1)/2} congruent to a modulo q.
**************************************************/
int16_t barrett_reduce(int16_t a) {
 8004e40:	b084      	sub	sp, #16
 8004e42:	4603      	mov	r3, r0
 8004e44:	f8ad 3006 	strh.w	r3, [sp, #6]
  int16_t t;
  const int16_t v = ((1<<26) + KYBER_Q/2)/KYBER_Q;
 8004e48:	f644 63bf 	movw	r3, #20159	; 0x4ebf
 8004e4c:	f8ad 300e 	strh.w	r3, [sp, #14]

  t  = ((int32_t)v*a + (1<<25)) >> 26;
 8004e50:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8004e54:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8004e58:	fb02 f303 	mul.w	r3, r2, r3
 8004e5c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004e60:	169b      	asrs	r3, r3, #26
 8004e62:	f8ad 300c 	strh.w	r3, [sp, #12]
  t *= KYBER_Q;
 8004e66:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	0052      	lsls	r2, r2, #1
 8004e6e:	441a      	add	r2, r3
 8004e70:	0092      	lsls	r2, r2, #2
 8004e72:	441a      	add	r2, r3
 8004e74:	0212      	lsls	r2, r2, #8
 8004e76:	4413      	add	r3, r2
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f8ad 300c 	strh.w	r3, [sp, #12]
  return a - t;
 8004e7e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004e82:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	b21b      	sxth	r3, r3
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	b004      	add	sp, #16
 8004e90:	4770      	bx	lr
	...

08004e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e94:	b500      	push	{lr}
 8004e96:	b085      	sub	sp, #20
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004e98:	4b18      	ldr	r3, [pc, #96]	; (8004efc <HAL_MspInit+0x68>)
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	4a17      	ldr	r2, [pc, #92]	; (8004efc <HAL_MspInit+0x68>)
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	6193      	str	r3, [r2, #24]
 8004ea4:	4b15      	ldr	r3, [pc, #84]	; (8004efc <HAL_MspInit+0x68>)
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	9302      	str	r3, [sp, #8]
 8004eae:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eb0:	4b12      	ldr	r3, [pc, #72]	; (8004efc <HAL_MspInit+0x68>)
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	4a11      	ldr	r2, [pc, #68]	; (8004efc <HAL_MspInit+0x68>)
 8004eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eba:	61d3      	str	r3, [r2, #28]
 8004ebc:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <HAL_MspInit+0x68>)
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2100      	movs	r1, #0
 8004ecc:	2005      	movs	r0, #5
 8004ece:	f000 fa65 	bl	800539c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004ed2:	2005      	movs	r0, #5
 8004ed4:	f000 fa7e 	bl	80053d4 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004ed8:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <HAL_MspInit+0x6c>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	9303      	str	r3, [sp, #12]
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004ee4:	9303      	str	r3, [sp, #12]
 8004ee6:	9b03      	ldr	r3, [sp, #12]
 8004ee8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004eec:	9303      	str	r3, [sp, #12]
 8004eee:	4a04      	ldr	r2, [pc, #16]	; (8004f00 <HAL_MspInit+0x6c>)
 8004ef0:	9b03      	ldr	r3, [sp, #12]
 8004ef2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ef4:	bf00      	nop
 8004ef6:	b005      	add	sp, #20
 8004ef8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004efc:	40021000 	.word	0x40021000
 8004f00:	40010000 	.word	0x40010000

08004f04 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f04:	e7fe      	b.n	8004f04 <NMI_Handler>

08004f06 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f06:	e7fe      	b.n	8004f06 <HardFault_Handler>

08004f08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f08:	e7fe      	b.n	8004f08 <MemManage_Handler>

08004f0a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f0a:	e7fe      	b.n	8004f0a <BusFault_Handler>

08004f0c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f0c:	e7fe      	b.n	8004f0c <UsageFault_Handler>

08004f0e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f0e:	bf00      	nop
 8004f10:	4770      	bx	lr

08004f12 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f12:	bf00      	nop
 8004f14:	4770      	bx	lr

08004f16 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f16:	bf00      	nop
 8004f18:	4770      	bx	lr

08004f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f1a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f1c:	f000 f966 	bl	80051ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f20:	bf00      	nop
 8004f22:	bd08      	pop	{r3, pc}

08004f24 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004f24:	bf00      	nop
 8004f26:	4770      	bx	lr

08004f28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f2a:	4802      	ldr	r0, [pc, #8]	; (8004f34 <USART1_IRQHandler+0xc>)
 8004f2c:	f001 f9a8 	bl	8006280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f30:	bf00      	nop
 8004f32:	bd08      	pop	{r3, pc}
 8004f34:	200001b0 	.word	0x200001b0

08004f38 <pqcrystals_kyber512_ref_kyber_shake128_absorb>:
**************************************************/
void kyber_shake128_absorb(keccak_state *state,
                           const uint8_t seed[KYBER_SYMBYTES],
                           uint8_t x,
                           uint8_t y)
{
 8004f38:	b500      	push	{lr}
 8004f3a:	b08f      	sub	sp, #60	; 0x3c
 8004f3c:	9003      	str	r0, [sp, #12]
 8004f3e:	9102      	str	r1, [sp, #8]
 8004f40:	4611      	mov	r1, r2
 8004f42:	461a      	mov	r2, r3
 8004f44:	460b      	mov	r3, r1
 8004f46:	f88d 3007 	strb.w	r3, [sp, #7]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t extseed[KYBER_SYMBYTES+2];

  memcpy(extseed, seed, KYBER_SYMBYTES);
 8004f50:	ab05      	add	r3, sp, #20
 8004f52:	2220      	movs	r2, #32
 8004f54:	9902      	ldr	r1, [sp, #8]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f001 fdb2 	bl	8006ac0 <memcpy>
  extseed[KYBER_SYMBYTES+0] = x;
 8004f5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f60:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
  extseed[KYBER_SYMBYTES+1] = y;
 8004f64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004f68:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35

  shake128_absorb_once(state, extseed, sizeof(extseed));
 8004f6c:	ab05      	add	r3, sp, #20
 8004f6e:	2222      	movs	r2, #34	; 0x22
 8004f70:	4619      	mov	r1, r3
 8004f72:	9803      	ldr	r0, [sp, #12]
 8004f74:	f7fe fda5 	bl	8003ac2 <pqcrystals_kyber_fips202_ref_shake128_absorb_once>
}
 8004f78:	bf00      	nop
 8004f7a:	b00f      	add	sp, #60	; 0x3c
 8004f7c:	f85d fb04 	ldr.w	pc, [sp], #4

08004f80 <pqcrystals_kyber512_ref_kyber_shake256_prf>:
*              - size_t outlen: number of requested output bytes
*              - const uint8_t *key: pointer to the key (of length KYBER_SYMBYTES)
*              - uint8_t nonce: single-byte nonce (public PRF input)
**************************************************/
void kyber_shake256_prf(uint8_t *out, size_t outlen, const uint8_t key[KYBER_SYMBYTES], uint8_t nonce)
{
 8004f80:	b500      	push	{lr}
 8004f82:	b08f      	sub	sp, #60	; 0x3c
 8004f84:	9003      	str	r0, [sp, #12]
 8004f86:	9102      	str	r1, [sp, #8]
 8004f88:	9201      	str	r2, [sp, #4]
 8004f8a:	f88d 3003 	strb.w	r3, [sp, #3]
  uint8_t extkey[KYBER_SYMBYTES+1];

  memcpy(extkey, key, KYBER_SYMBYTES);
 8004f8e:	ab05      	add	r3, sp, #20
 8004f90:	2220      	movs	r2, #32
 8004f92:	9901      	ldr	r1, [sp, #4]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f001 fd93 	bl	8006ac0 <memcpy>
  extkey[KYBER_SYMBYTES] = nonce;
 8004f9a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004f9e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34

  shake256(out, outlen, extkey, sizeof(extkey));
 8004fa2:	aa05      	add	r2, sp, #20
 8004fa4:	2321      	movs	r3, #33	; 0x21
 8004fa6:	9902      	ldr	r1, [sp, #8]
 8004fa8:	9803      	ldr	r0, [sp, #12]
 8004faa:	f7fe fde9 	bl	8003b80 <pqcrystals_kyber_fips202_ref_shake256>
}
 8004fae:	bf00      	nop
 8004fb0:	b00f      	add	sp, #60	; 0x3c
 8004fb2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fb8:	b500      	push	{lr}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	9001      	str	r0, [sp, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fbe:	4a15      	ldr	r2, [pc, #84]	; (8005014 <_sbrk+0x5c>)
 8004fc0:	4b15      	ldr	r3, [pc, #84]	; (8005018 <_sbrk+0x60>)
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	9305      	str	r3, [sp, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004fc6:	9b05      	ldr	r3, [sp, #20]
 8004fc8:	9304      	str	r3, [sp, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fca:	4b14      	ldr	r3, [pc, #80]	; (800501c <_sbrk+0x64>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d102      	bne.n	8004fd8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <_sbrk+0x64>)
 8004fd4:	4a12      	ldr	r2, [pc, #72]	; (8005020 <_sbrk+0x68>)
 8004fd6:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004fd8:	4b10      	ldr	r3, [pc, #64]	; (800501c <_sbrk+0x64>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	9b01      	ldr	r3, [sp, #4]
 8004fde:	4413      	add	r3, r2
 8004fe0:	9a04      	ldr	r2, [sp, #16]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d207      	bcs.n	8004ff6 <_sbrk+0x3e>
  {
    errno = ENOMEM;
 8004fe6:	f001 fd31 	bl	8006a4c <__errno>
 8004fea:	4603      	mov	r3, r0
 8004fec:	220c      	movs	r2, #12
 8004fee:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff4:	e009      	b.n	800500a <_sbrk+0x52>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ff6:	4b09      	ldr	r3, [pc, #36]	; (800501c <_sbrk+0x64>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	9303      	str	r3, [sp, #12]
  __sbrk_heap_end += incr;
 8004ffc:	4b07      	ldr	r3, [pc, #28]	; (800501c <_sbrk+0x64>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	9b01      	ldr	r3, [sp, #4]
 8005002:	4413      	add	r3, r2
 8005004:	4a05      	ldr	r2, [pc, #20]	; (800501c <_sbrk+0x64>)
 8005006:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005008:	9b03      	ldr	r3, [sp, #12]
}
 800500a:	4618      	mov	r0, r3
 800500c:	b007      	add	sp, #28
 800500e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005012:	bf00      	nop
 8005014:	20005000 	.word	0x20005000
 8005018:	00000400 	.word	0x00000400
 800501c:	200001ac 	.word	0x200001ac
 8005020:	20000208 	.word	0x20000208

08005024 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005024:	bf00      	nop
 8005026:	4770      	bx	lr

08005028 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005028:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800502a:	4b11      	ldr	r3, [pc, #68]	; (8005070 <MX_USART1_UART_Init+0x48>)
 800502c:	4a11      	ldr	r2, [pc, #68]	; (8005074 <MX_USART1_UART_Init+0x4c>)
 800502e:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8005030:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <MX_USART1_UART_Init+0x48>)
 8005032:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005036:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005038:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <MX_USART1_UART_Init+0x48>)
 800503a:	2200      	movs	r2, #0
 800503c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <MX_USART1_UART_Init+0x48>)
 8005040:	2200      	movs	r2, #0
 8005042:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <MX_USART1_UART_Init+0x48>)
 8005046:	2200      	movs	r2, #0
 8005048:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800504a:	4b09      	ldr	r3, [pc, #36]	; (8005070 <MX_USART1_UART_Init+0x48>)
 800504c:	220c      	movs	r2, #12
 800504e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <MX_USART1_UART_Init+0x48>)
 8005052:	2200      	movs	r2, #0
 8005054:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005056:	4b06      	ldr	r3, [pc, #24]	; (8005070 <MX_USART1_UART_Init+0x48>)
 8005058:	2200      	movs	r2, #0
 800505a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800505c:	4804      	ldr	r0, [pc, #16]	; (8005070 <MX_USART1_UART_Init+0x48>)
 800505e:	f001 f82d 	bl	80060bc <HAL_UART_Init>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8005068:	f7ff fa02 	bl	8004470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800506c:	bf00      	nop
 800506e:	bd08      	pop	{r3, pc}
 8005070:	200001b0 	.word	0x200001b0
 8005074:	40013800 	.word	0x40013800

08005078 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005078:	b500      	push	{lr}
 800507a:	b089      	sub	sp, #36	; 0x24
 800507c:	9001      	str	r0, [sp, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800507e:	ab04      	add	r3, sp, #16
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	605a      	str	r2, [r3, #4]
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800508a:	9b01      	ldr	r3, [sp, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a1f      	ldr	r2, [pc, #124]	; (800510c <HAL_UART_MspInit+0x94>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d137      	bne.n	8005104 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005094:	4b1e      	ldr	r3, [pc, #120]	; (8005110 <HAL_UART_MspInit+0x98>)
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	4a1d      	ldr	r2, [pc, #116]	; (8005110 <HAL_UART_MspInit+0x98>)
 800509a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800509e:	6193      	str	r3, [r2, #24]
 80050a0:	4b1b      	ldr	r3, [pc, #108]	; (8005110 <HAL_UART_MspInit+0x98>)
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050a8:	9303      	str	r3, [sp, #12]
 80050aa:	9b03      	ldr	r3, [sp, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ac:	4b18      	ldr	r3, [pc, #96]	; (8005110 <HAL_UART_MspInit+0x98>)
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	4a17      	ldr	r2, [pc, #92]	; (8005110 <HAL_UART_MspInit+0x98>)
 80050b2:	f043 0304 	orr.w	r3, r3, #4
 80050b6:	6193      	str	r3, [r2, #24]
 80050b8:	4b15      	ldr	r3, [pc, #84]	; (8005110 <HAL_UART_MspInit+0x98>)
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	9302      	str	r3, [sp, #8]
 80050c2:	9b02      	ldr	r3, [sp, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050c8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ca:	2302      	movs	r3, #2
 80050cc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050ce:	2303      	movs	r3, #3
 80050d0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d2:	ab04      	add	r3, sp, #16
 80050d4:	4619      	mov	r1, r3
 80050d6:	480f      	ldr	r0, [pc, #60]	; (8005114 <HAL_UART_MspInit+0x9c>)
 80050d8:	f000 fa46 	bl	8005568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80050dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050e2:	2300      	movs	r3, #0
 80050e4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ea:	ab04      	add	r3, sp, #16
 80050ec:	4619      	mov	r1, r3
 80050ee:	4809      	ldr	r0, [pc, #36]	; (8005114 <HAL_UART_MspInit+0x9c>)
 80050f0:	f000 fa3a 	bl	8005568 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80050f4:	2200      	movs	r2, #0
 80050f6:	2100      	movs	r1, #0
 80050f8:	2025      	movs	r0, #37	; 0x25
 80050fa:	f000 f94f 	bl	800539c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050fe:	2025      	movs	r0, #37	; 0x25
 8005100:	f000 f968 	bl	80053d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005104:	bf00      	nop
 8005106:	b009      	add	sp, #36	; 0x24
 8005108:	f85d fb04 	ldr.w	pc, [sp], #4
 800510c:	40013800 	.word	0x40013800
 8005110:	40021000 	.word	0x40021000
 8005114:	40010800 	.word	0x40010800

08005118 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005118:	480c      	ldr	r0, [pc, #48]	; (800514c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800511a:	490d      	ldr	r1, [pc, #52]	; (8005150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800511c:	4a0d      	ldr	r2, [pc, #52]	; (8005154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800511e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005120:	e002      	b.n	8005128 <LoopCopyDataInit>

08005122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005126:	3304      	adds	r3, #4

08005128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800512a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800512c:	d3f9      	bcc.n	8005122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800512e:	4a0a      	ldr	r2, [pc, #40]	; (8005158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005130:	4c0a      	ldr	r4, [pc, #40]	; (800515c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005134:	e001      	b.n	800513a <LoopFillZerobss>

08005136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005138:	3204      	adds	r2, #4

0800513a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800513a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800513c:	d3fb      	bcc.n	8005136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800513e:	f7ff ff71 	bl	8005024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005142:	f001 fc89 	bl	8006a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005146:	f7ff f923 	bl	8004390 <main>
  bx lr
 800514a:	4770      	bx	lr
  ldr r0, =_sdata
 800514c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005150:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8005154:	08007804 	.word	0x08007804
  ldr r2, =_sbss
 8005158:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 800515c:	20000208 	.word	0x20000208

08005160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005160:	e7fe      	b.n	8005160 <ADC1_2_IRQHandler>
	...

08005164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005164:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005166:	4b08      	ldr	r3, [pc, #32]	; (8005188 <HAL_Init+0x24>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a07      	ldr	r2, [pc, #28]	; (8005188 <HAL_Init+0x24>)
 800516c:	f043 0310 	orr.w	r3, r3, #16
 8005170:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005172:	2003      	movs	r0, #3
 8005174:	f000 f908 	bl	8005388 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005178:	200f      	movs	r0, #15
 800517a:	f000 f807 	bl	800518c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800517e:	f7ff fe89 	bl	8004e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	bd08      	pop	{r3, pc}
 8005188:	40022000 	.word	0x40022000

0800518c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800518c:	b500      	push	{lr}
 800518e:	b083      	sub	sp, #12
 8005190:	9001      	str	r0, [sp, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005192:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <HAL_InitTick+0x54>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <HAL_InitTick+0x58>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	4619      	mov	r1, r3
 800519c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 f921 	bl	80053f0 <HAL_SYSTICK_Config>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_InitTick+0x2c>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e00e      	b.n	80051d6 <HAL_InitTick+0x4a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051b8:	9b01      	ldr	r3, [sp, #4]
 80051ba:	2b0f      	cmp	r3, #15
 80051bc:	d80a      	bhi.n	80051d4 <HAL_InitTick+0x48>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051be:	2200      	movs	r2, #0
 80051c0:	9901      	ldr	r1, [sp, #4]
 80051c2:	f04f 30ff 	mov.w	r0, #4294967295
 80051c6:	f000 f8e9 	bl	800539c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051ca:	4a07      	ldr	r2, [pc, #28]	; (80051e8 <HAL_InitTick+0x5c>)
 80051cc:	9b01      	ldr	r3, [sp, #4]
 80051ce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	e000      	b.n	80051d6 <HAL_InitTick+0x4a>
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	b003      	add	sp, #12
 80051da:	f85d fb04 	ldr.w	pc, [sp], #4
 80051de:	bf00      	nop
 80051e0:	20000080 	.word	0x20000080
 80051e4:	20000088 	.word	0x20000088
 80051e8:	20000084 	.word	0x20000084

080051ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80051ec:	4b04      	ldr	r3, [pc, #16]	; (8005200 <HAL_IncTick+0x14>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	4b04      	ldr	r3, [pc, #16]	; (8005204 <HAL_IncTick+0x18>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4413      	add	r3, r2
 80051f8:	4a02      	ldr	r2, [pc, #8]	; (8005204 <HAL_IncTick+0x18>)
 80051fa:	6013      	str	r3, [r2, #0]
}
 80051fc:	bf00      	nop
 80051fe:	4770      	bx	lr
 8005200:	20000088 	.word	0x20000088
 8005204:	200001f4 	.word	0x200001f4

08005208 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005208:	4b01      	ldr	r3, [pc, #4]	; (8005210 <HAL_GetTick+0x8>)
 800520a:	681b      	ldr	r3, [r3, #0]
}
 800520c:	4618      	mov	r0, r3
 800520e:	4770      	bx	lr
 8005210:	200001f4 	.word	0x200001f4

08005214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005214:	b084      	sub	sp, #16
 8005216:	9001      	str	r0, [sp, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005218:	9b01      	ldr	r3, [sp, #4]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	9303      	str	r3, [sp, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005220:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <__NVIC_SetPriorityGrouping+0x3c>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005226:	9a02      	ldr	r2, [sp, #8]
 8005228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800522c:	4013      	ands	r3, r2
 800522e:	9302      	str	r3, [sp, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005230:	9b03      	ldr	r3, [sp, #12]
 8005232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005234:	9b02      	ldr	r3, [sp, #8]
 8005236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800523c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005240:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
 8005242:	4a03      	ldr	r2, [pc, #12]	; (8005250 <__NVIC_SetPriorityGrouping+0x3c>)
 8005244:	9b02      	ldr	r3, [sp, #8]
 8005246:	60d3      	str	r3, [r2, #12]
}
 8005248:	bf00      	nop
 800524a:	b004      	add	sp, #16
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	e000ed00 	.word	0xe000ed00

08005254 <__NVIC_GetPriorityGrouping>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005254:	4b03      	ldr	r3, [pc, #12]	; (8005264 <__NVIC_GetPriorityGrouping+0x10>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	f003 0307 	and.w	r3, r3, #7
}
 800525e:	4618      	mov	r0, r3
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	e000ed00 	.word	0xe000ed00

08005268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005268:	b082      	sub	sp, #8
 800526a:	4603      	mov	r3, r0
 800526c:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 8005270:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8005274:	2b00      	cmp	r3, #0
 8005276:	db0c      	blt.n	8005292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005278:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800527c:	f003 021f 	and.w	r2, r3, #31
 8005280:	4905      	ldr	r1, [pc, #20]	; (8005298 <__NVIC_EnableIRQ+0x30>)
 8005282:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	2001      	movs	r0, #1
 800528a:	fa00 f202 	lsl.w	r2, r0, r2
 800528e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005292:	bf00      	nop
 8005294:	b002      	add	sp, #8
 8005296:	4770      	bx	lr
 8005298:	e000e100 	.word	0xe000e100

0800529c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800529c:	b082      	sub	sp, #8
 800529e:	4603      	mov	r3, r0
 80052a0:	9100      	str	r1, [sp, #0]
 80052a2:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
 80052a6:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	db0a      	blt.n	80052c4 <__NVIC_SetPriority+0x28>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ae:	9b00      	ldr	r3, [sp, #0]
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	490c      	ldr	r1, [pc, #48]	; (80052e4 <__NVIC_SetPriority+0x48>)
 80052b4:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80052b8:	0112      	lsls	r2, r2, #4
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	440b      	add	r3, r1
 80052be:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052c2:	e00b      	b.n	80052dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c4:	9b00      	ldr	r3, [sp, #0]
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	4907      	ldr	r1, [pc, #28]	; (80052e8 <__NVIC_SetPriority+0x4c>)
 80052ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	3b04      	subs	r3, #4
 80052d4:	0112      	lsls	r2, r2, #4
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	440b      	add	r3, r1
 80052da:	761a      	strb	r2, [r3, #24]
}
 80052dc:	bf00      	nop
 80052de:	b002      	add	sp, #8
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	e000e100 	.word	0xe000e100
 80052e8:	e000ed00 	.word	0xe000ed00

080052ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052ec:	b088      	sub	sp, #32
 80052ee:	9003      	str	r0, [sp, #12]
 80052f0:	9102      	str	r1, [sp, #8]
 80052f2:	9201      	str	r2, [sp, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052f4:	9b03      	ldr	r3, [sp, #12]
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	9307      	str	r3, [sp, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052fc:	9b07      	ldr	r3, [sp, #28]
 80052fe:	f1c3 0307 	rsb	r3, r3, #7
 8005302:	2b04      	cmp	r3, #4
 8005304:	bf28      	it	cs
 8005306:	2304      	movcs	r3, #4
 8005308:	9306      	str	r3, [sp, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800530a:	9b07      	ldr	r3, [sp, #28]
 800530c:	3304      	adds	r3, #4
 800530e:	2b06      	cmp	r3, #6
 8005310:	d902      	bls.n	8005318 <NVIC_EncodePriority+0x2c>
 8005312:	9b07      	ldr	r3, [sp, #28]
 8005314:	3b03      	subs	r3, #3
 8005316:	e000      	b.n	800531a <NVIC_EncodePriority+0x2e>
 8005318:	2300      	movs	r3, #0
 800531a:	9305      	str	r3, [sp, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800531c:	f04f 32ff 	mov.w	r2, #4294967295
 8005320:	9b06      	ldr	r3, [sp, #24]
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	43da      	mvns	r2, r3
 8005328:	9b02      	ldr	r3, [sp, #8]
 800532a:	401a      	ands	r2, r3
 800532c:	9b05      	ldr	r3, [sp, #20]
 800532e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005330:	f04f 31ff 	mov.w	r1, #4294967295
 8005334:	9b05      	ldr	r3, [sp, #20]
 8005336:	fa01 f303 	lsl.w	r3, r1, r3
 800533a:	43d9      	mvns	r1, r3
 800533c:	9b01      	ldr	r3, [sp, #4]
 800533e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005340:	4313      	orrs	r3, r2
         );
}
 8005342:	4618      	mov	r0, r3
 8005344:	b008      	add	sp, #32
 8005346:	4770      	bx	lr

08005348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005348:	b500      	push	{lr}
 800534a:	b083      	sub	sp, #12
 800534c:	9001      	str	r0, [sp, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800534e:	9b01      	ldr	r3, [sp, #4]
 8005350:	3b01      	subs	r3, #1
 8005352:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005356:	d301      	bcc.n	800535c <SysTick_Config+0x14>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005358:	2301      	movs	r3, #1
 800535a:	e00f      	b.n	800537c <SysTick_Config+0x34>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800535c:	4a09      	ldr	r2, [pc, #36]	; (8005384 <SysTick_Config+0x3c>)
 800535e:	9b01      	ldr	r3, [sp, #4]
 8005360:	3b01      	subs	r3, #1
 8005362:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005364:	210f      	movs	r1, #15
 8005366:	f04f 30ff 	mov.w	r0, #4294967295
 800536a:	f7ff ff97 	bl	800529c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <SysTick_Config+0x3c>)
 8005370:	2200      	movs	r2, #0
 8005372:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005374:	4b03      	ldr	r3, [pc, #12]	; (8005384 <SysTick_Config+0x3c>)
 8005376:	2207      	movs	r2, #7
 8005378:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	b003      	add	sp, #12
 8005380:	f85d fb04 	ldr.w	pc, [sp], #4
 8005384:	e000e010 	.word	0xe000e010

08005388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005388:	b500      	push	{lr}
 800538a:	b083      	sub	sp, #12
 800538c:	9001      	str	r0, [sp, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800538e:	9801      	ldr	r0, [sp, #4]
 8005390:	f7ff ff40 	bl	8005214 <__NVIC_SetPriorityGrouping>
}
 8005394:	bf00      	nop
 8005396:	b003      	add	sp, #12
 8005398:	f85d fb04 	ldr.w	pc, [sp], #4

0800539c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800539c:	b500      	push	{lr}
 800539e:	b087      	sub	sp, #28
 80053a0:	4603      	mov	r3, r0
 80053a2:	9102      	str	r1, [sp, #8]
 80053a4:	9201      	str	r2, [sp, #4]
 80053a6:	f88d 300f 	strb.w	r3, [sp, #15]
  uint32_t prioritygroup = 0x00U;
 80053aa:	2300      	movs	r3, #0
 80053ac:	9305      	str	r3, [sp, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053ae:	f7ff ff51 	bl	8005254 <__NVIC_GetPriorityGrouping>
 80053b2:	9005      	str	r0, [sp, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053b4:	9a01      	ldr	r2, [sp, #4]
 80053b6:	9902      	ldr	r1, [sp, #8]
 80053b8:	9805      	ldr	r0, [sp, #20]
 80053ba:	f7ff ff97 	bl	80052ec <NVIC_EncodePriority>
 80053be:	4602      	mov	r2, r0
 80053c0:	f99d 300f 	ldrsb.w	r3, [sp, #15]
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff ff68 	bl	800529c <__NVIC_SetPriority>
}
 80053cc:	bf00      	nop
 80053ce:	b007      	add	sp, #28
 80053d0:	f85d fb04 	ldr.w	pc, [sp], #4

080053d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053d4:	b500      	push	{lr}
 80053d6:	b083      	sub	sp, #12
 80053d8:	4603      	mov	r3, r0
 80053da:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053de:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff ff40 	bl	8005268 <__NVIC_EnableIRQ>
}
 80053e8:	bf00      	nop
 80053ea:	b003      	add	sp, #12
 80053ec:	f85d fb04 	ldr.w	pc, [sp], #4

080053f0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053f0:	b500      	push	{lr}
 80053f2:	b083      	sub	sp, #12
 80053f4:	9001      	str	r0, [sp, #4]
   return SysTick_Config(TicksNumb);
 80053f6:	9801      	ldr	r0, [sp, #4]
 80053f8:	f7ff ffa6 	bl	8005348 <SysTick_Config>
 80053fc:	4603      	mov	r3, r0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	b003      	add	sp, #12
 8005402:	f85d fb04 	ldr.w	pc, [sp], #4

08005406 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005406:	b084      	sub	sp, #16
 8005408:	9001      	str	r0, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005410:	9b01      	ldr	r3, [sp, #4]
 8005412:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005416:	2b02      	cmp	r3, #2
 8005418:	d008      	beq.n	800542c <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800541a:	9b01      	ldr	r3, [sp, #4]
 800541c:	2204      	movs	r2, #4
 800541e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005420:	9b01      	ldr	r3, [sp, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e021      	b.n	8005470 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800542c:	9b01      	ldr	r3, [sp, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	9b01      	ldr	r3, [sp, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 020e 	bic.w	r2, r2, #14
 800543a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800543c:	9b01      	ldr	r3, [sp, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	9b01      	ldr	r3, [sp, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f022 0201 	bic.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800544c:	9b01      	ldr	r3, [sp, #4]
 800544e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005450:	9b01      	ldr	r3, [sp, #4]
 8005452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005454:	2101      	movs	r1, #1
 8005456:	fa01 f202 	lsl.w	r2, r1, r2
 800545a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800545c:	9b01      	ldr	r3, [sp, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005464:	9b01      	ldr	r3, [sp, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800546c:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8005470:	4618      	mov	r0, r3
 8005472:	b004      	add	sp, #16
 8005474:	4770      	bx	lr
	...

08005478 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005478:	b500      	push	{lr}
 800547a:	b085      	sub	sp, #20
 800547c:	9001      	str	r0, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800547e:	2300      	movs	r3, #0
 8005480:	f88d 300f 	strb.w	r3, [sp, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005484:	9b01      	ldr	r3, [sp, #4]
 8005486:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800548a:	2b02      	cmp	r3, #2
 800548c:	d006      	beq.n	800549c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800548e:	9b01      	ldr	r3, [sp, #4]
 8005490:	2204      	movs	r2, #4
 8005492:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f88d 300f 	strb.w	r3, [sp, #15]
 800549a:	e051      	b.n	8005540 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800549c:	9b01      	ldr	r3, [sp, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	9b01      	ldr	r3, [sp, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 020e 	bic.w	r2, r2, #14
 80054aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054ac:	9b01      	ldr	r3, [sp, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	9b01      	ldr	r3, [sp, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80054bc:	9b01      	ldr	r3, [sp, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a22      	ldr	r2, [pc, #136]	; (800554c <HAL_DMA_Abort_IT+0xd4>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d029      	beq.n	800551a <HAL_DMA_Abort_IT+0xa2>
 80054c6:	9b01      	ldr	r3, [sp, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a21      	ldr	r2, [pc, #132]	; (8005550 <HAL_DMA_Abort_IT+0xd8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d022      	beq.n	8005516 <HAL_DMA_Abort_IT+0x9e>
 80054d0:	9b01      	ldr	r3, [sp, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1f      	ldr	r2, [pc, #124]	; (8005554 <HAL_DMA_Abort_IT+0xdc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01a      	beq.n	8005510 <HAL_DMA_Abort_IT+0x98>
 80054da:	9b01      	ldr	r3, [sp, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1e      	ldr	r2, [pc, #120]	; (8005558 <HAL_DMA_Abort_IT+0xe0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d012      	beq.n	800550a <HAL_DMA_Abort_IT+0x92>
 80054e4:	9b01      	ldr	r3, [sp, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1c      	ldr	r2, [pc, #112]	; (800555c <HAL_DMA_Abort_IT+0xe4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d00a      	beq.n	8005504 <HAL_DMA_Abort_IT+0x8c>
 80054ee:	9b01      	ldr	r3, [sp, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1b      	ldr	r2, [pc, #108]	; (8005560 <HAL_DMA_Abort_IT+0xe8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d102      	bne.n	80054fe <HAL_DMA_Abort_IT+0x86>
 80054f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80054fc:	e00e      	b.n	800551c <HAL_DMA_Abort_IT+0xa4>
 80054fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005502:	e00b      	b.n	800551c <HAL_DMA_Abort_IT+0xa4>
 8005504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005508:	e008      	b.n	800551c <HAL_DMA_Abort_IT+0xa4>
 800550a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800550e:	e005      	b.n	800551c <HAL_DMA_Abort_IT+0xa4>
 8005510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005514:	e002      	b.n	800551c <HAL_DMA_Abort_IT+0xa4>
 8005516:	2310      	movs	r3, #16
 8005518:	e000      	b.n	800551c <HAL_DMA_Abort_IT+0xa4>
 800551a:	2301      	movs	r3, #1
 800551c:	4a11      	ldr	r2, [pc, #68]	; (8005564 <HAL_DMA_Abort_IT+0xec>)
 800551e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005520:	9b01      	ldr	r3, [sp, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005528:	9b01      	ldr	r3, [sp, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005530:	9b01      	ldr	r3, [sp, #4]
 8005532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005538:	9b01      	ldr	r3, [sp, #4]
 800553a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553c:	9801      	ldr	r0, [sp, #4]
 800553e:	4798      	blx	r3
    } 
  }
  return status;
 8005540:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
 8005544:	4618      	mov	r0, r3
 8005546:	b005      	add	sp, #20
 8005548:	f85d fb04 	ldr.w	pc, [sp], #4
 800554c:	40020008 	.word	0x40020008
 8005550:	4002001c 	.word	0x4002001c
 8005554:	40020030 	.word	0x40020030
 8005558:	40020044 	.word	0x40020044
 800555c:	40020058 	.word	0x40020058
 8005560:	4002006c 	.word	0x4002006c
 8005564:	40020000 	.word	0x40020000

08005568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005568:	b08a      	sub	sp, #40	; 0x28
 800556a:	9001      	str	r0, [sp, #4]
 800556c:	9100      	str	r1, [sp, #0]
  uint32_t position = 0x00u;
 800556e:	2300      	movs	r3, #0
 8005570:	9309      	str	r3, [sp, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005572:	2300      	movs	r3, #0
 8005574:	9308      	str	r3, [sp, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005576:	e169      	b.n	800584c <HAL_GPIO_Init+0x2e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005578:	2201      	movs	r2, #1
 800557a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	9307      	str	r3, [sp, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005582:	9b00      	ldr	r3, [sp, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	9a07      	ldr	r2, [sp, #28]
 8005588:	4013      	ands	r3, r2
 800558a:	9306      	str	r3, [sp, #24]

    if (iocurrent == ioposition)
 800558c:	9a06      	ldr	r2, [sp, #24]
 800558e:	9b07      	ldr	r3, [sp, #28]
 8005590:	429a      	cmp	r2, r3
 8005592:	f040 8158 	bne.w	8005846 <HAL_GPIO_Init+0x2de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005596:	9b00      	ldr	r3, [sp, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	4a9a      	ldr	r2, [pc, #616]	; (8005804 <HAL_GPIO_Init+0x29c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d05e      	beq.n	800565e <HAL_GPIO_Init+0xf6>
 80055a0:	4a98      	ldr	r2, [pc, #608]	; (8005804 <HAL_GPIO_Init+0x29c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d875      	bhi.n	8005692 <HAL_GPIO_Init+0x12a>
 80055a6:	4a98      	ldr	r2, [pc, #608]	; (8005808 <HAL_GPIO_Init+0x2a0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d058      	beq.n	800565e <HAL_GPIO_Init+0xf6>
 80055ac:	4a96      	ldr	r2, [pc, #600]	; (8005808 <HAL_GPIO_Init+0x2a0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d86f      	bhi.n	8005692 <HAL_GPIO_Init+0x12a>
 80055b2:	4a96      	ldr	r2, [pc, #600]	; (800580c <HAL_GPIO_Init+0x2a4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d052      	beq.n	800565e <HAL_GPIO_Init+0xf6>
 80055b8:	4a94      	ldr	r2, [pc, #592]	; (800580c <HAL_GPIO_Init+0x2a4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d869      	bhi.n	8005692 <HAL_GPIO_Init+0x12a>
 80055be:	4a94      	ldr	r2, [pc, #592]	; (8005810 <HAL_GPIO_Init+0x2a8>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d04c      	beq.n	800565e <HAL_GPIO_Init+0xf6>
 80055c4:	4a92      	ldr	r2, [pc, #584]	; (8005810 <HAL_GPIO_Init+0x2a8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d863      	bhi.n	8005692 <HAL_GPIO_Init+0x12a>
 80055ca:	4a92      	ldr	r2, [pc, #584]	; (8005814 <HAL_GPIO_Init+0x2ac>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d046      	beq.n	800565e <HAL_GPIO_Init+0xf6>
 80055d0:	4a90      	ldr	r2, [pc, #576]	; (8005814 <HAL_GPIO_Init+0x2ac>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d85d      	bhi.n	8005692 <HAL_GPIO_Init+0x12a>
 80055d6:	2b12      	cmp	r3, #18
 80055d8:	d82a      	bhi.n	8005630 <HAL_GPIO_Init+0xc8>
 80055da:	2b12      	cmp	r3, #18
 80055dc:	d859      	bhi.n	8005692 <HAL_GPIO_Init+0x12a>
 80055de:	a201      	add	r2, pc, #4	; (adr r2, 80055e4 <HAL_GPIO_Init+0x7c>)
 80055e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e4:	0800565f 	.word	0x0800565f
 80055e8:	08005639 	.word	0x08005639
 80055ec:	0800564b 	.word	0x0800564b
 80055f0:	0800568d 	.word	0x0800568d
 80055f4:	08005693 	.word	0x08005693
 80055f8:	08005693 	.word	0x08005693
 80055fc:	08005693 	.word	0x08005693
 8005600:	08005693 	.word	0x08005693
 8005604:	08005693 	.word	0x08005693
 8005608:	08005693 	.word	0x08005693
 800560c:	08005693 	.word	0x08005693
 8005610:	08005693 	.word	0x08005693
 8005614:	08005693 	.word	0x08005693
 8005618:	08005693 	.word	0x08005693
 800561c:	08005693 	.word	0x08005693
 8005620:	08005693 	.word	0x08005693
 8005624:	08005693 	.word	0x08005693
 8005628:	08005641 	.word	0x08005641
 800562c:	08005655 	.word	0x08005655
 8005630:	4a79      	ldr	r2, [pc, #484]	; (8005818 <HAL_GPIO_Init+0x2b0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <HAL_GPIO_Init+0xf6>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005636:	e02c      	b.n	8005692 <HAL_GPIO_Init+0x12a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005638:	9b00      	ldr	r3, [sp, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	9308      	str	r3, [sp, #32]
          break;
 800563e:	e029      	b.n	8005694 <HAL_GPIO_Init+0x12c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005640:	9b00      	ldr	r3, [sp, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	3304      	adds	r3, #4
 8005646:	9308      	str	r3, [sp, #32]
          break;
 8005648:	e024      	b.n	8005694 <HAL_GPIO_Init+0x12c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800564a:	9b00      	ldr	r3, [sp, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	3308      	adds	r3, #8
 8005650:	9308      	str	r3, [sp, #32]
          break;
 8005652:	e01f      	b.n	8005694 <HAL_GPIO_Init+0x12c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005654:	9b00      	ldr	r3, [sp, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	330c      	adds	r3, #12
 800565a:	9308      	str	r3, [sp, #32]
          break;
 800565c:	e01a      	b.n	8005694 <HAL_GPIO_Init+0x12c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800565e:	9b00      	ldr	r3, [sp, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <HAL_GPIO_Init+0x104>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005666:	2304      	movs	r3, #4
 8005668:	9308      	str	r3, [sp, #32]
          break;
 800566a:	e013      	b.n	8005694 <HAL_GPIO_Init+0x12c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800566c:	9b00      	ldr	r3, [sp, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d105      	bne.n	8005680 <HAL_GPIO_Init+0x118>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005674:	2308      	movs	r3, #8
 8005676:	9308      	str	r3, [sp, #32]
            GPIOx->BSRR = ioposition;
 8005678:	9b01      	ldr	r3, [sp, #4]
 800567a:	9a07      	ldr	r2, [sp, #28]
 800567c:	611a      	str	r2, [r3, #16]
          break;
 800567e:	e009      	b.n	8005694 <HAL_GPIO_Init+0x12c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005680:	2308      	movs	r3, #8
 8005682:	9308      	str	r3, [sp, #32]
            GPIOx->BRR = ioposition;
 8005684:	9b01      	ldr	r3, [sp, #4]
 8005686:	9a07      	ldr	r2, [sp, #28]
 8005688:	615a      	str	r2, [r3, #20]
          break;
 800568a:	e003      	b.n	8005694 <HAL_GPIO_Init+0x12c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800568c:	2300      	movs	r3, #0
 800568e:	9308      	str	r3, [sp, #32]
          break;
 8005690:	e000      	b.n	8005694 <HAL_GPIO_Init+0x12c>
          break;
 8005692:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005694:	9b06      	ldr	r3, [sp, #24]
 8005696:	2bff      	cmp	r3, #255	; 0xff
 8005698:	d801      	bhi.n	800569e <HAL_GPIO_Init+0x136>
 800569a:	9b01      	ldr	r3, [sp, #4]
 800569c:	e001      	b.n	80056a2 <HAL_GPIO_Init+0x13a>
 800569e:	9b01      	ldr	r3, [sp, #4]
 80056a0:	3304      	adds	r3, #4
 80056a2:	9305      	str	r3, [sp, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80056a4:	9b06      	ldr	r3, [sp, #24]
 80056a6:	2bff      	cmp	r3, #255	; 0xff
 80056a8:	d802      	bhi.n	80056b0 <HAL_GPIO_Init+0x148>
 80056aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	e002      	b.n	80056b6 <HAL_GPIO_Init+0x14e>
 80056b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056b2:	3b08      	subs	r3, #8
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	9304      	str	r3, [sp, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80056b8:	9b05      	ldr	r3, [sp, #20]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	210f      	movs	r1, #15
 80056be:	9b04      	ldr	r3, [sp, #16]
 80056c0:	fa01 f303 	lsl.w	r3, r1, r3
 80056c4:	43db      	mvns	r3, r3
 80056c6:	401a      	ands	r2, r3
 80056c8:	9908      	ldr	r1, [sp, #32]
 80056ca:	9b04      	ldr	r3, [sp, #16]
 80056cc:	fa01 f303 	lsl.w	r3, r1, r3
 80056d0:	431a      	orrs	r2, r3
 80056d2:	9b05      	ldr	r3, [sp, #20]
 80056d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80056d6:	9b00      	ldr	r3, [sp, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 80b1 	beq.w	8005846 <HAL_GPIO_Init+0x2de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80056e4:	4b4d      	ldr	r3, [pc, #308]	; (800581c <HAL_GPIO_Init+0x2b4>)
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	4a4c      	ldr	r2, [pc, #304]	; (800581c <HAL_GPIO_Init+0x2b4>)
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	6193      	str	r3, [r2, #24]
 80056f0:	4b4a      	ldr	r3, [pc, #296]	; (800581c <HAL_GPIO_Init+0x2b4>)
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	9302      	str	r3, [sp, #8]
 80056fa:	9b02      	ldr	r3, [sp, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80056fc:	4a48      	ldr	r2, [pc, #288]	; (8005820 <HAL_GPIO_Init+0x2b8>)
 80056fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005700:	089b      	lsrs	r3, r3, #2
 8005702:	3302      	adds	r3, #2
 8005704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005708:	9303      	str	r3, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800570a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	220f      	movs	r2, #15
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	43db      	mvns	r3, r3
 800571a:	9a03      	ldr	r2, [sp, #12]
 800571c:	4013      	ands	r3, r2
 800571e:	9303      	str	r3, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005720:	9b01      	ldr	r3, [sp, #4]
 8005722:	4a40      	ldr	r2, [pc, #256]	; (8005824 <HAL_GPIO_Init+0x2bc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d013      	beq.n	8005750 <HAL_GPIO_Init+0x1e8>
 8005728:	9b01      	ldr	r3, [sp, #4]
 800572a:	4a3f      	ldr	r2, [pc, #252]	; (8005828 <HAL_GPIO_Init+0x2c0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00d      	beq.n	800574c <HAL_GPIO_Init+0x1e4>
 8005730:	9b01      	ldr	r3, [sp, #4]
 8005732:	4a3e      	ldr	r2, [pc, #248]	; (800582c <HAL_GPIO_Init+0x2c4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d007      	beq.n	8005748 <HAL_GPIO_Init+0x1e0>
 8005738:	9b01      	ldr	r3, [sp, #4]
 800573a:	4a3d      	ldr	r2, [pc, #244]	; (8005830 <HAL_GPIO_Init+0x2c8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d101      	bne.n	8005744 <HAL_GPIO_Init+0x1dc>
 8005740:	2303      	movs	r3, #3
 8005742:	e006      	b.n	8005752 <HAL_GPIO_Init+0x1ea>
 8005744:	2304      	movs	r3, #4
 8005746:	e004      	b.n	8005752 <HAL_GPIO_Init+0x1ea>
 8005748:	2302      	movs	r3, #2
 800574a:	e002      	b.n	8005752 <HAL_GPIO_Init+0x1ea>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <HAL_GPIO_Init+0x1ea>
 8005750:	2300      	movs	r3, #0
 8005752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005754:	f002 0203 	and.w	r2, r2, #3
 8005758:	0092      	lsls	r2, r2, #2
 800575a:	4093      	lsls	r3, r2
 800575c:	9a03      	ldr	r2, [sp, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	9303      	str	r3, [sp, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005762:	492f      	ldr	r1, [pc, #188]	; (8005820 <HAL_GPIO_Init+0x2b8>)
 8005764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005766:	089b      	lsrs	r3, r3, #2
 8005768:	3302      	adds	r3, #2
 800576a:	9a03      	ldr	r2, [sp, #12]
 800576c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005770:	9b00      	ldr	r3, [sp, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d006      	beq.n	800578a <HAL_GPIO_Init+0x222>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800577c:	4b2d      	ldr	r3, [pc, #180]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	492c      	ldr	r1, [pc, #176]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 8005782:	9b06      	ldr	r3, [sp, #24]
 8005784:	4313      	orrs	r3, r2
 8005786:	600b      	str	r3, [r1, #0]
 8005788:	e006      	b.n	8005798 <HAL_GPIO_Init+0x230>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800578a:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	9b06      	ldr	r3, [sp, #24]
 8005790:	43db      	mvns	r3, r3
 8005792:	4928      	ldr	r1, [pc, #160]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 8005794:	4013      	ands	r3, r2
 8005796:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005798:	9b00      	ldr	r3, [sp, #0]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d006      	beq.n	80057b2 <HAL_GPIO_Init+0x24a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80057a4:	4b23      	ldr	r3, [pc, #140]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	4922      	ldr	r1, [pc, #136]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 80057aa:	9b06      	ldr	r3, [sp, #24]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	604b      	str	r3, [r1, #4]
 80057b0:	e006      	b.n	80057c0 <HAL_GPIO_Init+0x258>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80057b2:	4b20      	ldr	r3, [pc, #128]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	9b06      	ldr	r3, [sp, #24]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	491e      	ldr	r1, [pc, #120]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 80057bc:	4013      	ands	r3, r2
 80057be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80057c0:	9b00      	ldr	r3, [sp, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d006      	beq.n	80057da <HAL_GPIO_Init+0x272>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80057cc:	4b19      	ldr	r3, [pc, #100]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	4918      	ldr	r1, [pc, #96]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 80057d2:	9b06      	ldr	r3, [sp, #24]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	608b      	str	r3, [r1, #8]
 80057d8:	e006      	b.n	80057e8 <HAL_GPIO_Init+0x280>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80057da:	4b16      	ldr	r3, [pc, #88]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	9b06      	ldr	r3, [sp, #24]
 80057e0:	43db      	mvns	r3, r3
 80057e2:	4914      	ldr	r1, [pc, #80]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057e8:	9b00      	ldr	r3, [sp, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d021      	beq.n	8005838 <HAL_GPIO_Init+0x2d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80057f4:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	490e      	ldr	r1, [pc, #56]	; (8005834 <HAL_GPIO_Init+0x2cc>)
 80057fa:	9b06      	ldr	r3, [sp, #24]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60cb      	str	r3, [r1, #12]
 8005800:	e021      	b.n	8005846 <HAL_GPIO_Init+0x2de>
 8005802:	bf00      	nop
 8005804:	10320000 	.word	0x10320000
 8005808:	10310000 	.word	0x10310000
 800580c:	10220000 	.word	0x10220000
 8005810:	10210000 	.word	0x10210000
 8005814:	10120000 	.word	0x10120000
 8005818:	10110000 	.word	0x10110000
 800581c:	40021000 	.word	0x40021000
 8005820:	40010000 	.word	0x40010000
 8005824:	40010800 	.word	0x40010800
 8005828:	40010c00 	.word	0x40010c00
 800582c:	40011000 	.word	0x40011000
 8005830:	40011400 	.word	0x40011400
 8005834:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <HAL_GPIO_Init+0x2fc>)
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	9b06      	ldr	r3, [sp, #24]
 800583e:	43db      	mvns	r3, r3
 8005840:	4908      	ldr	r1, [pc, #32]	; (8005864 <HAL_GPIO_Init+0x2fc>)
 8005842:	4013      	ands	r3, r2
 8005844:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005848:	3301      	adds	r3, #1
 800584a:	9309      	str	r3, [sp, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800584c:	9b00      	ldr	r3, [sp, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005852:	fa22 f303 	lsr.w	r3, r2, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	f47f ae8e 	bne.w	8005578 <HAL_GPIO_Init+0x10>
  }
}
 800585c:	bf00      	nop
 800585e:	bf00      	nop
 8005860:	b00a      	add	sp, #40	; 0x28
 8005862:	4770      	bx	lr
 8005864:	40010400 	.word	0x40010400

08005868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005868:	b082      	sub	sp, #8
 800586a:	9001      	str	r0, [sp, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8005872:	4613      	mov	r3, r2
 8005874:	f88d 3001 	strb.w	r3, [sp, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005878:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d004      	beq.n	800588a <HAL_GPIO_WritePin+0x22>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005880:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005884:	9b01      	ldr	r3, [sp, #4]
 8005886:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005888:	e004      	b.n	8005894 <HAL_GPIO_WritePin+0x2c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800588a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800588e:	041a      	lsls	r2, r3, #16
 8005890:	9b01      	ldr	r3, [sp, #4]
 8005892:	611a      	str	r2, [r3, #16]
}
 8005894:	bf00      	nop
 8005896:	b002      	add	sp, #8
 8005898:	4770      	bx	lr
	...

0800589c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800589c:	b500      	push	{lr}
 800589e:	b087      	sub	sp, #28
 80058a0:	9001      	str	r0, [sp, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058a2:	9b01      	ldr	r3, [sp, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e275      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058ac:	9b01      	ldr	r3, [sp, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8087 	beq.w	80059c8 <HAL_RCC_OscConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058ba:	4b92      	ldr	r3, [pc, #584]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 030c 	and.w	r3, r3, #12
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d00c      	beq.n	80058e0 <HAL_RCC_OscConfig+0x44>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80058c6:	4b8f      	ldr	r3, [pc, #572]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d112      	bne.n	80058f8 <HAL_RCC_OscConfig+0x5c>
 80058d2:	4b8c      	ldr	r3, [pc, #560]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058de:	d10b      	bne.n	80058f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e0:	4b88      	ldr	r3, [pc, #544]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d06c      	beq.n	80059c6 <HAL_RCC_OscConfig+0x12a>
 80058ec:	9b01      	ldr	r3, [sp, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d168      	bne.n	80059c6 <HAL_RCC_OscConfig+0x12a>
      {
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e24f      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f8:	9b01      	ldr	r3, [sp, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005900:	d106      	bne.n	8005910 <HAL_RCC_OscConfig+0x74>
 8005902:	4b80      	ldr	r3, [pc, #512]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a7f      	ldr	r2, [pc, #508]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	e02e      	b.n	800596e <HAL_RCC_OscConfig+0xd2>
 8005910:	9b01      	ldr	r3, [sp, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10c      	bne.n	8005932 <HAL_RCC_OscConfig+0x96>
 8005918:	4b7a      	ldr	r3, [pc, #488]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a79      	ldr	r2, [pc, #484]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 800591e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	4b77      	ldr	r3, [pc, #476]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a76      	ldr	r2, [pc, #472]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 800592a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	e01d      	b.n	800596e <HAL_RCC_OscConfig+0xd2>
 8005932:	9b01      	ldr	r3, [sp, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800593a:	d10c      	bne.n	8005956 <HAL_RCC_OscConfig+0xba>
 800593c:	4b71      	ldr	r3, [pc, #452]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a70      	ldr	r2, [pc, #448]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005942:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	4b6e      	ldr	r3, [pc, #440]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a6d      	ldr	r2, [pc, #436]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 800594e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	e00b      	b.n	800596e <HAL_RCC_OscConfig+0xd2>
 8005956:	4b6b      	ldr	r3, [pc, #428]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a6a      	ldr	r2, [pc, #424]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 800595c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	4b68      	ldr	r3, [pc, #416]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a67      	ldr	r2, [pc, #412]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800596c:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800596e:	9b01      	ldr	r3, [sp, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d013      	beq.n	800599e <HAL_RCC_OscConfig+0x102>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005976:	f7ff fc47 	bl	8005208 <HAL_GetTick>
 800597a:	9004      	str	r0, [sp, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597c:	e008      	b.n	8005990 <HAL_RCC_OscConfig+0xf4>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800597e:	f7ff fc43 	bl	8005208 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	9b04      	ldr	r3, [sp, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b64      	cmp	r3, #100	; 0x64
 800598a:	d901      	bls.n	8005990 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e203      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005990:	4b5c      	ldr	r3, [pc, #368]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d0f0      	beq.n	800597e <HAL_RCC_OscConfig+0xe2>
 800599c:	e014      	b.n	80059c8 <HAL_RCC_OscConfig+0x12c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800599e:	f7ff fc33 	bl	8005208 <HAL_GetTick>
 80059a2:	9004      	str	r0, [sp, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a4:	e008      	b.n	80059b8 <HAL_RCC_OscConfig+0x11c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059a6:	f7ff fc2f 	bl	8005208 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	9b04      	ldr	r3, [sp, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b64      	cmp	r3, #100	; 0x64
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x11c>
          {
            return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e1ef      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059b8:	4b52      	ldr	r3, [pc, #328]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1f0      	bne.n	80059a6 <HAL_RCC_OscConfig+0x10a>
 80059c4:	e000      	b.n	80059c8 <HAL_RCC_OscConfig+0x12c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059c8:	9b01      	ldr	r3, [sp, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d063      	beq.n	8005a9c <HAL_RCC_OscConfig+0x200>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059d4:	4b4b      	ldr	r3, [pc, #300]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f003 030c 	and.w	r3, r3, #12
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00b      	beq.n	80059f8 <HAL_RCC_OscConfig+0x15c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80059e0:	4b48      	ldr	r3, [pc, #288]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f003 030c 	and.w	r3, r3, #12
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d11c      	bne.n	8005a26 <HAL_RCC_OscConfig+0x18a>
 80059ec:	4b45      	ldr	r3, [pc, #276]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d116      	bne.n	8005a26 <HAL_RCC_OscConfig+0x18a>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059f8:	4b42      	ldr	r3, [pc, #264]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_RCC_OscConfig+0x174>
 8005a04:	9b01      	ldr	r3, [sp, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d001      	beq.n	8005a10 <HAL_RCC_OscConfig+0x174>
      {
        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e1c3      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a10:	4b3c      	ldr	r3, [pc, #240]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a18:	9b01      	ldr	r3, [sp, #4]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	4939      	ldr	r1, [pc, #228]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a24:	e03a      	b.n	8005a9c <HAL_RCC_OscConfig+0x200>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a26:	9b01      	ldr	r3, [sp, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d020      	beq.n	8005a70 <HAL_RCC_OscConfig+0x1d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a2e:	4b36      	ldr	r3, [pc, #216]	; (8005b08 <HAL_RCC_OscConfig+0x26c>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a34:	f7ff fbe8 	bl	8005208 <HAL_GetTick>
 8005a38:	9004      	str	r0, [sp, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x1b2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a3c:	f7ff fbe4 	bl	8005208 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	9b04      	ldr	r3, [sp, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e1a4      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4e:	4b2d      	ldr	r3, [pc, #180]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0f0      	beq.n	8005a3c <HAL_RCC_OscConfig+0x1a0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5a:	4b2a      	ldr	r3, [pc, #168]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a62:	9b01      	ldr	r3, [sp, #4]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4926      	ldr	r1, [pc, #152]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]
 8005a6e:	e015      	b.n	8005a9c <HAL_RCC_OscConfig+0x200>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a70:	4b25      	ldr	r3, [pc, #148]	; (8005b08 <HAL_RCC_OscConfig+0x26c>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a76:	f7ff fbc7 	bl	8005208 <HAL_GetTick>
 8005a7a:	9004      	str	r0, [sp, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0x1f4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a7e:	f7ff fbc3 	bl	8005208 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	9b04      	ldr	r3, [sp, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x1f4>
          {
            return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e183      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a90:	4b1c      	ldr	r3, [pc, #112]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1f0      	bne.n	8005a7e <HAL_RCC_OscConfig+0x1e2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a9c:	9b01      	ldr	r3, [sp, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d039      	beq.n	8005b1c <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005aa8:	9b01      	ldr	r3, [sp, #4]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d019      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x248>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ab0:	4b16      	ldr	r3, [pc, #88]	; (8005b0c <HAL_RCC_OscConfig+0x270>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ab6:	f7ff fba7 	bl	8005208 <HAL_GetTick>
 8005aba:	9004      	str	r0, [sp, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x234>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005abe:	f7ff fba3 	bl	8005208 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	9b04      	ldr	r3, [sp, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x234>
        {
          return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e163      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <HAL_RCC_OscConfig+0x268>)
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0f0      	beq.n	8005abe <HAL_RCC_OscConfig+0x222>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005adc:	2001      	movs	r0, #1
 8005ade:	f000 fad3 	bl	8006088 <RCC_Delay>
 8005ae2:	e01b      	b.n	8005b1c <HAL_RCC_OscConfig+0x280>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ae4:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <HAL_RCC_OscConfig+0x270>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aea:	f7ff fb8d 	bl	8005208 <HAL_GetTick>
 8005aee:	9004      	str	r0, [sp, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af0:	e00e      	b.n	8005b10 <HAL_RCC_OscConfig+0x274>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005af2:	f7ff fb89 	bl	8005208 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	9b04      	ldr	r3, [sp, #16]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d907      	bls.n	8005b10 <HAL_RCC_OscConfig+0x274>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e149      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
 8005b04:	40021000 	.word	0x40021000
 8005b08:	42420000 	.word	0x42420000
 8005b0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b10:	4b94      	ldr	r3, [pc, #592]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1ea      	bne.n	8005af2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b1c:	9b01      	ldr	r3, [sp, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 80a9 	beq.w	8005c7c <HAL_RCC_OscConfig+0x3e0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f88d 3017 	strb.w	r3, [sp, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b30:	4b8c      	ldr	r3, [pc, #560]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10e      	bne.n	8005b5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b3c:	4b89      	ldr	r3, [pc, #548]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	4a88      	ldr	r2, [pc, #544]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b46:	61d3      	str	r3, [r2, #28]
 8005b48:	4b86      	ldr	r3, [pc, #536]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b50:	9302      	str	r3, [sp, #8]
 8005b52:	9b02      	ldr	r3, [sp, #8]
      pwrclkchanged = SET;
 8005b54:	2301      	movs	r3, #1
 8005b56:	f88d 3017 	strb.w	r3, [sp, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b5a:	4b83      	ldr	r3, [pc, #524]	; (8005d68 <HAL_RCC_OscConfig+0x4cc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d118      	bne.n	8005b98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b66:	4b80      	ldr	r3, [pc, #512]	; (8005d68 <HAL_RCC_OscConfig+0x4cc>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a7f      	ldr	r2, [pc, #508]	; (8005d68 <HAL_RCC_OscConfig+0x4cc>)
 8005b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b72:	f7ff fb49 	bl	8005208 <HAL_GetTick>
 8005b76:	9004      	str	r0, [sp, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b7a:	f7ff fb45 	bl	8005208 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	9b04      	ldr	r3, [sp, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b64      	cmp	r3, #100	; 0x64
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e105      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b8c:	4b76      	ldr	r3, [pc, #472]	; (8005d68 <HAL_RCC_OscConfig+0x4cc>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0f0      	beq.n	8005b7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b98:	9b01      	ldr	r3, [sp, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d106      	bne.n	8005bae <HAL_RCC_OscConfig+0x312>
 8005ba0:	4b70      	ldr	r3, [pc, #448]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	4a6f      	ldr	r2, [pc, #444]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005ba6:	f043 0301 	orr.w	r3, r3, #1
 8005baa:	6213      	str	r3, [r2, #32]
 8005bac:	e02d      	b.n	8005c0a <HAL_RCC_OscConfig+0x36e>
 8005bae:	9b01      	ldr	r3, [sp, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10c      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x334>
 8005bb6:	4b6b      	ldr	r3, [pc, #428]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	4a6a      	ldr	r2, [pc, #424]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005bbc:	f023 0301 	bic.w	r3, r3, #1
 8005bc0:	6213      	str	r3, [r2, #32]
 8005bc2:	4b68      	ldr	r3, [pc, #416]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	4a67      	ldr	r2, [pc, #412]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005bc8:	f023 0304 	bic.w	r3, r3, #4
 8005bcc:	6213      	str	r3, [r2, #32]
 8005bce:	e01c      	b.n	8005c0a <HAL_RCC_OscConfig+0x36e>
 8005bd0:	9b01      	ldr	r3, [sp, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	2b05      	cmp	r3, #5
 8005bd6:	d10c      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x356>
 8005bd8:	4b62      	ldr	r3, [pc, #392]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	4a61      	ldr	r2, [pc, #388]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005bde:	f043 0304 	orr.w	r3, r3, #4
 8005be2:	6213      	str	r3, [r2, #32]
 8005be4:	4b5f      	ldr	r3, [pc, #380]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	4a5e      	ldr	r2, [pc, #376]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	6213      	str	r3, [r2, #32]
 8005bf0:	e00b      	b.n	8005c0a <HAL_RCC_OscConfig+0x36e>
 8005bf2:	4b5c      	ldr	r3, [pc, #368]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	4a5b      	ldr	r2, [pc, #364]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005bf8:	f023 0301 	bic.w	r3, r3, #1
 8005bfc:	6213      	str	r3, [r2, #32]
 8005bfe:	4b59      	ldr	r3, [pc, #356]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	4a58      	ldr	r2, [pc, #352]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005c04:	f023 0304 	bic.w	r3, r3, #4
 8005c08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c0a:	9b01      	ldr	r3, [sp, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d015      	beq.n	8005c3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c12:	f7ff faf9 	bl	8005208 <HAL_GetTick>
 8005c16:	9004      	str	r0, [sp, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c18:	e00a      	b.n	8005c30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c1a:	f7ff faf5 	bl	8005208 <HAL_GetTick>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	9b04      	ldr	r3, [sp, #16]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e0b3      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c30:	4b4c      	ldr	r3, [pc, #304]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0ee      	beq.n	8005c1a <HAL_RCC_OscConfig+0x37e>
 8005c3c:	e014      	b.n	8005c68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c3e:	f7ff fae3 	bl	8005208 <HAL_GetTick>
 8005c42:	9004      	str	r0, [sp, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c44:	e00a      	b.n	8005c5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c46:	f7ff fadf 	bl	8005208 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	9b04      	ldr	r3, [sp, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e09d      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c5c:	4b41      	ldr	r3, [pc, #260]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1ee      	bne.n	8005c46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c68:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d105      	bne.n	8005c7c <HAL_RCC_OscConfig+0x3e0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c70:	4b3c      	ldr	r3, [pc, #240]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	4a3b      	ldr	r2, [pc, #236]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c7a:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c7c:	9b01      	ldr	r3, [sp, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 8088 	beq.w	8005d96 <HAL_RCC_OscConfig+0x4fa>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c86:	4b37      	ldr	r3, [pc, #220]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f003 030c 	and.w	r3, r3, #12
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d061      	beq.n	8005d56 <HAL_RCC_OscConfig+0x4ba>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c92:	9b01      	ldr	r3, [sp, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d146      	bne.n	8005d28 <HAL_RCC_OscConfig+0x48c>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c9a:	4b34      	ldr	r3, [pc, #208]	; (8005d6c <HAL_RCC_OscConfig+0x4d0>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca0:	f7ff fab2 	bl	8005208 <HAL_GetTick>
 8005ca4:	9004      	str	r0, [sp, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x41e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ca8:	f7ff faae 	bl	8005208 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	9b04      	ldr	r3, [sp, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e06e      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005cba:	4b2a      	ldr	r3, [pc, #168]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f0      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x40c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005cc6:	9b01      	ldr	r3, [sp, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cce:	d108      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x446>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005cd0:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005cd8:	9b01      	ldr	r3, [sp, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	4921      	ldr	r1, [pc, #132]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ce2:	4b20      	ldr	r3, [pc, #128]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005cea:	9b01      	ldr	r3, [sp, #4]
 8005cec:	6a19      	ldr	r1, [r3, #32]
 8005cee:	9b01      	ldr	r3, [sp, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	430b      	orrs	r3, r1
 8005cf4:	491b      	ldr	r1, [pc, #108]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cfa:	4b1c      	ldr	r3, [pc, #112]	; (8005d6c <HAL_RCC_OscConfig+0x4d0>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d00:	f7ff fa82 	bl	8005208 <HAL_GetTick>
 8005d04:	9004      	str	r0, [sp, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x47e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d08:	f7ff fa7e 	bl	8005208 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	9b04      	ldr	r3, [sp, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e03e      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005d1a:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0f0      	beq.n	8005d08 <HAL_RCC_OscConfig+0x46c>
 8005d26:	e036      	b.n	8005d96 <HAL_RCC_OscConfig+0x4fa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d28:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <HAL_RCC_OscConfig+0x4d0>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2e:	f7ff fa6b 	bl	8005208 <HAL_GetTick>
 8005d32:	9004      	str	r0, [sp, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d36:	f7ff fa67 	bl	8005208 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	9b04      	ldr	r3, [sp, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e027      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d48:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <HAL_RCC_OscConfig+0x4c8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1f0      	bne.n	8005d36 <HAL_RCC_OscConfig+0x49a>
 8005d54:	e01f      	b.n	8005d96 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d56:	9b01      	ldr	r3, [sp, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d108      	bne.n	8005d70 <HAL_RCC_OscConfig+0x4d4>
      {
        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e01a      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
 8005d62:	bf00      	nop
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40007000 	.word	0x40007000
 8005d6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <HAL_RCC_OscConfig+0x504>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	9303      	str	r3, [sp, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d76:	9b03      	ldr	r3, [sp, #12]
 8005d78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d7c:	9b01      	ldr	r3, [sp, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d106      	bne.n	8005d92 <HAL_RCC_OscConfig+0x4f6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d84:	9b03      	ldr	r3, [sp, #12]
 8005d86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d8a:	9b01      	ldr	r3, [sp, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d001      	beq.n	8005d96 <HAL_RCC_OscConfig+0x4fa>
        {
          return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <HAL_RCC_OscConfig+0x4fc>
        }
      }
    }
  }

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	b007      	add	sp, #28
 8005d9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005da0:	40021000 	.word	0x40021000

08005da4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005da4:	b500      	push	{lr}
 8005da6:	b085      	sub	sp, #20
 8005da8:	9001      	str	r0, [sp, #4]
 8005daa:	9100      	str	r1, [sp, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005dac:	9b01      	ldr	r3, [sp, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_RCC_ClockConfig+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e0d0      	b.n	8005f58 <HAL_RCC_ClockConfig+0x1b4>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005db6:	4b6a      	ldr	r3, [pc, #424]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0307 	and.w	r3, r3, #7
 8005dbe:	9a00      	ldr	r2, [sp, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d910      	bls.n	8005de6 <HAL_RCC_ClockConfig+0x42>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dc4:	4b66      	ldr	r3, [pc, #408]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f023 0207 	bic.w	r2, r3, #7
 8005dcc:	4964      	ldr	r1, [pc, #400]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005dce:	9b00      	ldr	r3, [sp, #0]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd4:	4b62      	ldr	r3, [pc, #392]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	9a00      	ldr	r2, [sp, #0]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d001      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x42>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e0b8      	b.n	8005f58 <HAL_RCC_ClockConfig+0x1b4>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005de6:	9b01      	ldr	r3, [sp, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d020      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x90>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df2:	9b01      	ldr	r3, [sp, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <HAL_RCC_ClockConfig+0x66>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dfe:	4b59      	ldr	r3, [pc, #356]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	4a58      	ldr	r2, [pc, #352]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005e04:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e08:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e0a:	9b01      	ldr	r3, [sp, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x7e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e16:	4b53      	ldr	r3, [pc, #332]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	4a52      	ldr	r2, [pc, #328]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005e1c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005e20:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e22:	4b50      	ldr	r3, [pc, #320]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e2a:	9b01      	ldr	r3, [sp, #4]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	494d      	ldr	r1, [pc, #308]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e34:	9b01      	ldr	r3, [sp, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d040      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e40:	9b01      	ldr	r3, [sp, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d107      	bne.n	8005e58 <HAL_RCC_ClockConfig+0xb4>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e48:	4b46      	ldr	r3, [pc, #280]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d115      	bne.n	8005e80 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e07f      	b.n	8005f58 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e58:	9b01      	ldr	r3, [sp, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d107      	bne.n	8005e70 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e60:	4b40      	ldr	r3, [pc, #256]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d109      	bne.n	8005e80 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e073      	b.n	8005f58 <HAL_RCC_ClockConfig+0x1b4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e70:	4b3c      	ldr	r3, [pc, #240]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e06b      	b.n	8005f58 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e80:	4b38      	ldr	r3, [pc, #224]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f023 0203 	bic.w	r2, r3, #3
 8005e88:	9b01      	ldr	r3, [sp, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	4935      	ldr	r1, [pc, #212]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e92:	f7ff f9b9 	bl	8005208 <HAL_GetTick>
 8005e96:	9003      	str	r0, [sp, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e98:	e00a      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x10c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e9a:	f7ff f9b5 	bl	8005208 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	9b03      	ldr	r3, [sp, #12]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e053      	b.n	8005f58 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eb0:	4b2c      	ldr	r3, [pc, #176]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f003 020c 	and.w	r2, r3, #12
 8005eb8:	9b01      	ldr	r3, [sp, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d1eb      	bne.n	8005e9a <HAL_RCC_ClockConfig+0xf6>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ec2:	4b27      	ldr	r3, [pc, #156]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	9a00      	ldr	r2, [sp, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d210      	bcs.n	8005ef2 <HAL_RCC_ClockConfig+0x14e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed0:	4b23      	ldr	r3, [pc, #140]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f023 0207 	bic.w	r2, r3, #7
 8005ed8:	4921      	ldr	r1, [pc, #132]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005eda:	9b00      	ldr	r3, [sp, #0]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee0:	4b1f      	ldr	r3, [pc, #124]	; (8005f60 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	9a00      	ldr	r2, [sp, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d001      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0x14e>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e032      	b.n	8005f58 <HAL_RCC_ClockConfig+0x1b4>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ef2:	9b01      	ldr	r3, [sp, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0304 	and.w	r3, r3, #4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005efe:	4b19      	ldr	r3, [pc, #100]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f06:	9b01      	ldr	r3, [sp, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	4916      	ldr	r1, [pc, #88]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f10:	9b01      	ldr	r3, [sp, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d009      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f1c:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f24:	9b01      	ldr	r3, [sp, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	490e      	ldr	r1, [pc, #56]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f30:	f000 f820 	bl	8005f74 <HAL_RCC_GetSysClockFreq>
 8005f34:	4602      	mov	r2, r0
 8005f36:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <HAL_RCC_ClockConfig+0x1c0>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	091b      	lsrs	r3, r3, #4
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	4909      	ldr	r1, [pc, #36]	; (8005f68 <HAL_RCC_ClockConfig+0x1c4>)
 8005f42:	5ccb      	ldrb	r3, [r1, r3]
 8005f44:	fa22 f303 	lsr.w	r3, r2, r3
 8005f48:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <HAL_RCC_ClockConfig+0x1c8>)
 8005f4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f4c:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <HAL_RCC_ClockConfig+0x1cc>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff f91b 	bl	800518c <HAL_InitTick>

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	b005      	add	sp, #20
 8005f5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f60:	40022000 	.word	0x40022000
 8005f64:	40021000 	.word	0x40021000
 8005f68:	08007750 	.word	0x08007750
 8005f6c:	20000080 	.word	0x20000080
 8005f70:	20000084 	.word	0x20000084

08005f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f74:	b410      	push	{r4}
 8005f76:	b08b      	sub	sp, #44	; 0x2c
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005f78:	4b28      	ldr	r3, [pc, #160]	; (800601c <HAL_RCC_GetSysClockFreq+0xa8>)
 8005f7a:	ac01      	add	r4, sp, #4
 8005f7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005f82:	f240 2301 	movw	r3, #513	; 0x201
 8005f86:	f8ad 3000 	strh.w	r3, [sp]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	9307      	str	r3, [sp, #28]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9306      	str	r3, [sp, #24]
 8005f92:	2300      	movs	r3, #0
 8005f94:	9309      	str	r3, [sp, #36]	; 0x24
 8005f96:	2300      	movs	r3, #0
 8005f98:	9305      	str	r3, [sp, #20]
  uint32_t sysclockfreq = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	9308      	str	r3, [sp, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f9e:	4b20      	ldr	r3, [pc, #128]	; (8006020 <HAL_RCC_GetSysClockFreq+0xac>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	9307      	str	r3, [sp, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005fa4:	9b07      	ldr	r3, [sp, #28]
 8005fa6:	f003 030c 	and.w	r3, r3, #12
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d002      	beq.n	8005fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8005fae:	2b08      	cmp	r3, #8
 8005fb0:	d003      	beq.n	8005fba <HAL_RCC_GetSysClockFreq+0x46>
 8005fb2:	e02b      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005fb6:	9308      	str	r3, [sp, #32]
      break;
 8005fb8:	e02b      	b.n	8006012 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005fba:	9b07      	ldr	r3, [sp, #28]
 8005fbc:	0c9b      	lsrs	r3, r3, #18
 8005fbe:	f003 030f 	and.w	r3, r3, #15
 8005fc2:	3328      	adds	r3, #40	; 0x28
 8005fc4:	446b      	add	r3, sp
 8005fc6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005fca:	9305      	str	r3, [sp, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fcc:	9b07      	ldr	r3, [sp, #28]
 8005fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d012      	beq.n	8005ffc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005fd6:	4b12      	ldr	r3, [pc, #72]	; (8006020 <HAL_RCC_GetSysClockFreq+0xac>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	0c5b      	lsrs	r3, r3, #17
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	3328      	adds	r3, #40	; 0x28
 8005fe2:	446b      	add	r3, sp
 8005fe4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005fe8:	9306      	str	r3, [sp, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005fea:	9b05      	ldr	r3, [sp, #20]
 8005fec:	4a0d      	ldr	r2, [pc, #52]	; (8006024 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005fee:	fb03 f202 	mul.w	r2, r3, r2
 8005ff2:	9b06      	ldr	r3, [sp, #24]
 8005ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8005ffa:	e004      	b.n	8006006 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ffc:	9b05      	ldr	r3, [sp, #20]
 8005ffe:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006000:	fb02 f303 	mul.w	r3, r2, r3
 8006004:	9309      	str	r3, [sp, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006008:	9308      	str	r3, [sp, #32]
      break;
 800600a:	e002      	b.n	8006012 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800600c:	4b05      	ldr	r3, [pc, #20]	; (8006024 <HAL_RCC_GetSysClockFreq+0xb0>)
 800600e:	9308      	str	r3, [sp, #32]
      break;
 8006010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006012:	9b08      	ldr	r3, [sp, #32]
}
 8006014:	4618      	mov	r0, r3
 8006016:	b00b      	add	sp, #44	; 0x2c
 8006018:	bc10      	pop	{r4}
 800601a:	4770      	bx	lr
 800601c:	0800757c 	.word	0x0800757c
 8006020:	40021000 	.word	0x40021000
 8006024:	007a1200 	.word	0x007a1200
 8006028:	003d0900 	.word	0x003d0900

0800602c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800602c:	4b01      	ldr	r3, [pc, #4]	; (8006034 <HAL_RCC_GetHCLKFreq+0x8>)
 800602e:	681b      	ldr	r3, [r3, #0]
}
 8006030:	4618      	mov	r0, r3
 8006032:	4770      	bx	lr
 8006034:	20000080 	.word	0x20000080

08006038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006038:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800603a:	f7ff fff7 	bl	800602c <HAL_RCC_GetHCLKFreq>
 800603e:	4602      	mov	r2, r0
 8006040:	4b05      	ldr	r3, [pc, #20]	; (8006058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	0a1b      	lsrs	r3, r3, #8
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	4904      	ldr	r1, [pc, #16]	; (800605c <HAL_RCC_GetPCLK1Freq+0x24>)
 800604c:	5ccb      	ldrb	r3, [r1, r3]
 800604e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006052:	4618      	mov	r0, r3
 8006054:	bd08      	pop	{r3, pc}
 8006056:	bf00      	nop
 8006058:	40021000 	.word	0x40021000
 800605c:	08007760 	.word	0x08007760

08006060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006060:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006062:	f7ff ffe3 	bl	800602c <HAL_RCC_GetHCLKFreq>
 8006066:	4602      	mov	r2, r0
 8006068:	4b05      	ldr	r3, [pc, #20]	; (8006080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	0adb      	lsrs	r3, r3, #11
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	4904      	ldr	r1, [pc, #16]	; (8006084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006074:	5ccb      	ldrb	r3, [r1, r3]
 8006076:	fa22 f303 	lsr.w	r3, r2, r3
}
 800607a:	4618      	mov	r0, r3
 800607c:	bd08      	pop	{r3, pc}
 800607e:	bf00      	nop
 8006080:	40021000 	.word	0x40021000
 8006084:	08007760 	.word	0x08007760

08006088 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006088:	b084      	sub	sp, #16
 800608a:	9001      	str	r0, [sp, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800608c:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <RCC_Delay+0x2c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a09      	ldr	r2, [pc, #36]	; (80060b8 <RCC_Delay+0x30>)
 8006092:	fba2 2303 	umull	r2, r3, r2, r3
 8006096:	0a5b      	lsrs	r3, r3, #9
 8006098:	9a01      	ldr	r2, [sp, #4]
 800609a:	fb02 f303 	mul.w	r3, r2, r3
 800609e:	9303      	str	r3, [sp, #12]
  do
  {
    __NOP();
 80060a0:	bf00      	nop
  }
  while (Delay --);
 80060a2:	9b03      	ldr	r3, [sp, #12]
 80060a4:	1e5a      	subs	r2, r3, #1
 80060a6:	9203      	str	r2, [sp, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1f9      	bne.n	80060a0 <RCC_Delay+0x18>
}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	b004      	add	sp, #16
 80060b2:	4770      	bx	lr
 80060b4:	20000080 	.word	0x20000080
 80060b8:	10624dd3 	.word	0x10624dd3

080060bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060bc:	b500      	push	{lr}
 80060be:	b083      	sub	sp, #12
 80060c0:	9001      	str	r0, [sp, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c2:	9b01      	ldr	r3, [sp, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_UART_Init+0x10>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e03f      	b.n	800614c <HAL_UART_Init+0x90>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80060cc:	9b01      	ldr	r3, [sp, #4]
 80060ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d106      	bne.n	80060e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060d8:	9b01      	ldr	r3, [sp, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060e0:	9801      	ldr	r0, [sp, #4]
 80060e2:	f7fe ffc9 	bl	8005078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060e6:	9b01      	ldr	r3, [sp, #4]
 80060e8:	2224      	movs	r2, #36	; 0x24
 80060ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060ee:	9b01      	ldr	r3, [sp, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	9b01      	ldr	r3, [sp, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060fc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060fe:	9801      	ldr	r0, [sp, #4]
 8006100:	f000 fc16 	bl	8006930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006104:	9b01      	ldr	r3, [sp, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691a      	ldr	r2, [r3, #16]
 800610a:	9b01      	ldr	r3, [sp, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006112:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006114:	9b01      	ldr	r3, [sp, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	9b01      	ldr	r3, [sp, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006122:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006124:	9b01      	ldr	r3, [sp, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	9b01      	ldr	r3, [sp, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006132:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006134:	9b01      	ldr	r3, [sp, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800613a:	9b01      	ldr	r3, [sp, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006142:	9b01      	ldr	r3, [sp, #4]
 8006144:	2220      	movs	r2, #32
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	b003      	add	sp, #12
 8006150:	f85d fb04 	ldr.w	pc, [sp], #4

08006154 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006154:	b500      	push	{lr}
 8006156:	b08b      	sub	sp, #44	; 0x2c
 8006158:	9005      	str	r0, [sp, #20]
 800615a:	9104      	str	r1, [sp, #16]
 800615c:	9302      	str	r3, [sp, #8]
 800615e:	4613      	mov	r3, r2
 8006160:	f8ad 300e 	strh.w	r3, [sp, #14]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	9307      	str	r3, [sp, #28]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006168:	9b05      	ldr	r3, [sp, #20]
 800616a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b20      	cmp	r3, #32
 8006172:	d17f      	bne.n	8006274 <HAL_UART_Transmit+0x120>
  {
    if ((pData == NULL) || (Size == 0U))
 8006174:	9b04      	ldr	r3, [sp, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_UART_Transmit+0x2e>
 800617a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e077      	b.n	8006276 <HAL_UART_Transmit+0x122>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006186:	9b05      	ldr	r3, [sp, #20]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_UART_Transmit+0x40>
 8006190:	2302      	movs	r3, #2
 8006192:	e070      	b.n	8006276 <HAL_UART_Transmit+0x122>
 8006194:	9b05      	ldr	r3, [sp, #20]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619c:	9b05      	ldr	r3, [sp, #20]
 800619e:	2200      	movs	r2, #0
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061a2:	9b05      	ldr	r3, [sp, #20]
 80061a4:	2221      	movs	r2, #33	; 0x21
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061aa:	f7ff f82d 	bl	8005208 <HAL_GetTick>
 80061ae:	9007      	str	r0, [sp, #28]

    huart->TxXferSize = Size;
 80061b0:	9b05      	ldr	r3, [sp, #20]
 80061b2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80061b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061b8:	9b05      	ldr	r3, [sp, #20]
 80061ba:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80061be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c0:	9b05      	ldr	r3, [sp, #20]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c8:	d108      	bne.n	80061dc <HAL_UART_Transmit+0x88>
 80061ca:	9b05      	ldr	r3, [sp, #20]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d104      	bne.n	80061dc <HAL_UART_Transmit+0x88>
    {
      pdata8bits  = NULL;
 80061d2:	2300      	movs	r3, #0
 80061d4:	9309      	str	r3, [sp, #36]	; 0x24
      pdata16bits = (uint16_t *) pData;
 80061d6:	9b04      	ldr	r3, [sp, #16]
 80061d8:	9308      	str	r3, [sp, #32]
 80061da:	e003      	b.n	80061e4 <HAL_UART_Transmit+0x90>
    }
    else
    {
      pdata8bits  = pData;
 80061dc:	9b04      	ldr	r3, [sp, #16]
 80061de:	9309      	str	r3, [sp, #36]	; 0x24
      pdata16bits = NULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	9308      	str	r3, [sp, #32]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061e4:	9b05      	ldr	r3, [sp, #20]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80061ec:	e02a      	b.n	8006244 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ee:	9b02      	ldr	r3, [sp, #8]
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	9b07      	ldr	r3, [sp, #28]
 80061f4:	2200      	movs	r2, #0
 80061f6:	2180      	movs	r1, #128	; 0x80
 80061f8:	9805      	ldr	r0, [sp, #20]
 80061fa:	f000 fa08 	bl	800660e <UART_WaitOnFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_UART_Transmit+0xb4>
      {
        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e036      	b.n	8006276 <HAL_UART_Transmit+0x122>
      }
      if (pdata8bits == NULL)
 8006208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10b      	bne.n	8006226 <HAL_UART_Transmit+0xd2>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800620e:	9b08      	ldr	r3, [sp, #32]
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	461a      	mov	r2, r3
 8006214:	9b05      	ldr	r3, [sp, #20]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800621c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800621e:	9b08      	ldr	r3, [sp, #32]
 8006220:	3302      	adds	r3, #2
 8006222:	9308      	str	r3, [sp, #32]
 8006224:	e007      	b.n	8006236 <HAL_UART_Transmit+0xe2>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006228:	781a      	ldrb	r2, [r3, #0]
 800622a:	9b05      	ldr	r3, [sp, #20]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006232:	3301      	adds	r3, #1
 8006234:	9309      	str	r3, [sp, #36]	; 0x24
      }
      huart->TxXferCount--;
 8006236:	9b05      	ldr	r3, [sp, #20]
 8006238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	9b05      	ldr	r3, [sp, #20]
 8006242:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006244:	9b05      	ldr	r3, [sp, #20]
 8006246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1cf      	bne.n	80061ee <HAL_UART_Transmit+0x9a>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800624e:	9b02      	ldr	r3, [sp, #8]
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	9b07      	ldr	r3, [sp, #28]
 8006254:	2200      	movs	r2, #0
 8006256:	2140      	movs	r1, #64	; 0x40
 8006258:	9805      	ldr	r0, [sp, #20]
 800625a:	f000 f9d8 	bl	800660e <UART_WaitOnFlagUntilTimeout>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e006      	b.n	8006276 <HAL_UART_Transmit+0x122>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006268:	9b05      	ldr	r3, [sp, #20]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	e000      	b.n	8006276 <HAL_UART_Transmit+0x122>
  }
  else
  {
    return HAL_BUSY;
 8006274:	2302      	movs	r3, #2
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	b00b      	add	sp, #44	; 0x2c
 800627a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006280 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006280:	b500      	push	{lr}
 8006282:	b08b      	sub	sp, #44	; 0x2c
 8006284:	9001      	str	r0, [sp, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	9309      	str	r3, [sp, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800628e:	9b01      	ldr	r3, [sp, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	9308      	str	r3, [sp, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006296:	9b01      	ldr	r3, [sp, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	9307      	str	r3, [sp, #28]
  uint32_t errorflags = 0x00U;
 800629e:	2300      	movs	r3, #0
 80062a0:	9306      	str	r3, [sp, #24]
  uint32_t dmarequest = 0x00U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	9305      	str	r3, [sp, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	9306      	str	r3, [sp, #24]
  if (errorflags == RESET)
 80062ae:	9b06      	ldr	r3, [sp, #24]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10d      	bne.n	80062d0 <HAL_UART_IRQHandler+0x50>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d008      	beq.n	80062d0 <HAL_UART_IRQHandler+0x50>
 80062be:	9b08      	ldr	r3, [sp, #32]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_UART_IRQHandler+0x50>
    {
      UART_Receive_IT(huart);
 80062c8:	9801      	ldr	r0, [sp, #4]
 80062ca:	f000 fa88 	bl	80067de <UART_Receive_IT>
      return;
 80062ce:	e182      	b.n	80065d6 <HAL_UART_IRQHandler+0x356>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062d0:	9b06      	ldr	r3, [sp, #24]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 80b1 	beq.w	800643a <HAL_UART_IRQHandler+0x1ba>
 80062d8:	9b07      	ldr	r3, [sp, #28]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d105      	bne.n	80062ee <HAL_UART_IRQHandler+0x6e>
 80062e2:	9b08      	ldr	r3, [sp, #32]
 80062e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80a6 	beq.w	800643a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00a      	beq.n	800630e <HAL_UART_IRQHandler+0x8e>
 80062f8:	9b08      	ldr	r3, [sp, #32]
 80062fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d005      	beq.n	800630e <HAL_UART_IRQHandler+0x8e>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006302:	9b01      	ldr	r3, [sp, #4]
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	f043 0201 	orr.w	r2, r3, #1
 800630a:	9b01      	ldr	r3, [sp, #4]
 800630c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800630e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00a      	beq.n	800632e <HAL_UART_IRQHandler+0xae>
 8006318:	9b07      	ldr	r3, [sp, #28]
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006322:	9b01      	ldr	r3, [sp, #4]
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	f043 0202 	orr.w	r2, r3, #2
 800632a:	9b01      	ldr	r3, [sp, #4]
 800632c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800632e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <HAL_UART_IRQHandler+0xce>
 8006338:	9b07      	ldr	r3, [sp, #28]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	d005      	beq.n	800634e <HAL_UART_IRQHandler+0xce>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006342:	9b01      	ldr	r3, [sp, #4]
 8006344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006346:	f043 0204 	orr.w	r2, r3, #4
 800634a:	9b01      	ldr	r3, [sp, #4]
 800634c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800634e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006350:	f003 0308 	and.w	r3, r3, #8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00f      	beq.n	8006378 <HAL_UART_IRQHandler+0xf8>
 8006358:	9b08      	ldr	r3, [sp, #32]
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b00      	cmp	r3, #0
 8006360:	d104      	bne.n	800636c <HAL_UART_IRQHandler+0xec>
 8006362:	9b07      	ldr	r3, [sp, #28]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <HAL_UART_IRQHandler+0xf8>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800636c:	9b01      	ldr	r3, [sp, #4]
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	f043 0208 	orr.w	r2, r3, #8
 8006374:	9b01      	ldr	r3, [sp, #4]
 8006376:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006378:	9b01      	ldr	r3, [sp, #4]
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8125 	beq.w	80065cc <HAL_UART_IRQHandler+0x34c>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <HAL_UART_IRQHandler+0x11c>
 800638c:	9b08      	ldr	r3, [sp, #32]
 800638e:	f003 0320 	and.w	r3, r3, #32
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006396:	9801      	ldr	r0, [sp, #4]
 8006398:	f000 fa21 	bl	80067de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800639c:	9b01      	ldr	r3, [sp, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bf14      	ite	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	2300      	moveq	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	9305      	str	r3, [sp, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063b2:	9b01      	ldr	r3, [sp, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d102      	bne.n	80063c4 <HAL_UART_IRQHandler+0x144>
 80063be:	9b05      	ldr	r3, [sp, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d031      	beq.n	8006428 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063c4:	9801      	ldr	r0, [sp, #4]
 80063c6:	f000 f96d 	bl	80066a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ca:	9b01      	ldr	r3, [sp, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d023      	beq.n	8006420 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063d8:	9b01      	ldr	r3, [sp, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	9b01      	ldr	r3, [sp, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063e8:	9b01      	ldr	r3, [sp, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d013      	beq.n	8006418 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063f0:	9b01      	ldr	r3, [sp, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	4a79      	ldr	r2, [pc, #484]	; (80065dc <HAL_UART_IRQHandler+0x35c>)
 80063f6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063f8:	9b01      	ldr	r3, [sp, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff f83b 	bl	8005478 <HAL_DMA_Abort_IT>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d016      	beq.n	8006436 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006408:	9b01      	ldr	r3, [sp, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	9a01      	ldr	r2, [sp, #4]
 8006410:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006412:	4610      	mov	r0, r2
 8006414:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006416:	e00e      	b.n	8006436 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006418:	9801      	ldr	r0, [sp, #4]
 800641a:	f000 f8eb 	bl	80065f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800641e:	e00a      	b.n	8006436 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006420:	9801      	ldr	r0, [sp, #4]
 8006422:	f000 f8e7 	bl	80065f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006426:	e006      	b.n	8006436 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006428:	9801      	ldr	r0, [sp, #4]
 800642a:	f000 f8e3 	bl	80065f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006434:	e0ca      	b.n	80065cc <HAL_UART_IRQHandler+0x34c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006436:	bf00      	nop
    return;
 8006438:	e0c8      	b.n	80065cc <HAL_UART_IRQHandler+0x34c>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800643a:	9b01      	ldr	r3, [sp, #4]
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	2b01      	cmp	r3, #1
 8006440:	f040 80a8 	bne.w	8006594 <HAL_UART_IRQHandler+0x314>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 80a2 	beq.w	8006594 <HAL_UART_IRQHandler+0x314>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006450:	9b08      	ldr	r3, [sp, #32]
 8006452:	f003 0310 	and.w	r3, r3, #16
 8006456:	2b00      	cmp	r3, #0
 8006458:	f000 809c 	beq.w	8006594 <HAL_UART_IRQHandler+0x314>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800645c:	2300      	movs	r3, #0
 800645e:	9303      	str	r3, [sp, #12]
 8006460:	9b01      	ldr	r3, [sp, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	9303      	str	r3, [sp, #12]
 8006468:	9b01      	ldr	r3, [sp, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	9303      	str	r3, [sp, #12]
 8006470:	9b03      	ldr	r3, [sp, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006472:	9b01      	ldr	r3, [sp, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647c:	2b00      	cmp	r3, #0
 800647e:	d052      	beq.n	8006526 <HAL_UART_IRQHandler+0x2a6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006480:	9b01      	ldr	r3, [sp, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f8ad 3010 	strh.w	r3, [sp, #16]
      if (  (nb_remaining_rx_data > 0U)
 800648c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 809d 	beq.w	80065d0 <HAL_UART_IRQHandler+0x350>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006496:	9b01      	ldr	r3, [sp, #4]
 8006498:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800649a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800649e:	429a      	cmp	r2, r3
 80064a0:	f080 8096 	bcs.w	80065d0 <HAL_UART_IRQHandler+0x350>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064a4:	9b01      	ldr	r3, [sp, #4]
 80064a6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80064aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064ac:	9b01      	ldr	r3, [sp, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d02b      	beq.n	800650e <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064b6:	9b01      	ldr	r3, [sp, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	9b01      	ldr	r3, [sp, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064c4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c6:	9b01      	ldr	r3, [sp, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695a      	ldr	r2, [r3, #20]
 80064cc:	9b01      	ldr	r3, [sp, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0201 	bic.w	r2, r2, #1
 80064d4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064d6:	9b01      	ldr	r3, [sp, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695a      	ldr	r2, [r3, #20]
 80064dc:	9b01      	ldr	r3, [sp, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064e4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064e6:	9b01      	ldr	r3, [sp, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ee:	9b01      	ldr	r3, [sp, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f4:	9b01      	ldr	r3, [sp, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68da      	ldr	r2, [r3, #12]
 80064fa:	9b01      	ldr	r3, [sp, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0210 	bic.w	r2, r2, #16
 8006502:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006504:	9b01      	ldr	r3, [sp, #4]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	4618      	mov	r0, r3
 800650a:	f7fe ff7c 	bl	8005406 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800650e:	9b01      	ldr	r3, [sp, #4]
 8006510:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006512:	9b01      	ldr	r3, [sp, #4]
 8006514:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006516:	b29b      	uxth	r3, r3
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	b29b      	uxth	r3, r3
 800651c:	4619      	mov	r1, r3
 800651e:	9801      	ldr	r0, [sp, #4]
 8006520:	f000 f86d 	bl	80065fe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006524:	e054      	b.n	80065d0 <HAL_UART_IRQHandler+0x350>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006526:	9b01      	ldr	r3, [sp, #4]
 8006528:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800652a:	9b01      	ldr	r3, [sp, #4]
 800652c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800652e:	b29b      	uxth	r3, r3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	f8ad 3012 	strh.w	r3, [sp, #18]
      if (  (huart->RxXferCount > 0U)
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800653a:	b29b      	uxth	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d049      	beq.n	80065d4 <HAL_UART_IRQHandler+0x354>
          &&(nb_rx_data > 0U) )
 8006540:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d045      	beq.n	80065d4 <HAL_UART_IRQHandler+0x354>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006548:	9b01      	ldr	r3, [sp, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	9b01      	ldr	r3, [sp, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006556:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006558:	9b01      	ldr	r3, [sp, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695a      	ldr	r2, [r3, #20]
 800655e:	9b01      	ldr	r3, [sp, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006568:	9b01      	ldr	r3, [sp, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006570:	9b01      	ldr	r3, [sp, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006576:	9b01      	ldr	r3, [sp, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	9b01      	ldr	r3, [sp, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0210 	bic.w	r2, r2, #16
 8006584:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006586:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800658a:	4619      	mov	r1, r3
 800658c:	9801      	ldr	r0, [sp, #4]
 800658e:	f000 f836 	bl	80065fe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006592:	e01f      	b.n	80065d4 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659a:	2b00      	cmp	r3, #0
 800659c:	d008      	beq.n	80065b0 <HAL_UART_IRQHandler+0x330>
 800659e:	9b08      	ldr	r3, [sp, #32]
 80065a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <HAL_UART_IRQHandler+0x330>
  {
    UART_Transmit_IT(huart);
 80065a8:	9801      	ldr	r0, [sp, #4]
 80065aa:	f000 f8b6 	bl	800671a <UART_Transmit_IT>
    return;
 80065ae:	e012      	b.n	80065d6 <HAL_UART_IRQHandler+0x356>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00d      	beq.n	80065d6 <HAL_UART_IRQHandler+0x356>
 80065ba:	9b08      	ldr	r3, [sp, #32]
 80065bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d008      	beq.n	80065d6 <HAL_UART_IRQHandler+0x356>
  {
    UART_EndTransmit_IT(huart);
 80065c4:	9801      	ldr	r0, [sp, #4]
 80065c6:	f000 f8f3 	bl	80067b0 <UART_EndTransmit_IT>
    return;
 80065ca:	e004      	b.n	80065d6 <HAL_UART_IRQHandler+0x356>
    return;
 80065cc:	bf00      	nop
 80065ce:	e002      	b.n	80065d6 <HAL_UART_IRQHandler+0x356>
      return;
 80065d0:	bf00      	nop
 80065d2:	e000      	b.n	80065d6 <HAL_UART_IRQHandler+0x356>
      return;
 80065d4:	bf00      	nop
  }
}
 80065d6:	b00b      	add	sp, #44	; 0x2c
 80065d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80065dc:	080066f5 	.word	0x080066f5

080065e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065e0:	b082      	sub	sp, #8
 80065e2:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	b002      	add	sp, #8
 80065e8:	4770      	bx	lr

080065ea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065ea:	b082      	sub	sp, #8
 80065ec:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065ee:	bf00      	nop
 80065f0:	b002      	add	sp, #8
 80065f2:	4770      	bx	lr

080065f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065f4:	b082      	sub	sp, #8
 80065f6:	9001      	str	r0, [sp, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	b002      	add	sp, #8
 80065fc:	4770      	bx	lr

080065fe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065fe:	b082      	sub	sp, #8
 8006600:	9001      	str	r0, [sp, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	f8ad 3002 	strh.w	r3, [sp, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006608:	bf00      	nop
 800660a:	b002      	add	sp, #8
 800660c:	4770      	bx	lr

0800660e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800660e:	b500      	push	{lr}
 8006610:	b085      	sub	sp, #20
 8006612:	9003      	str	r0, [sp, #12]
 8006614:	9102      	str	r1, [sp, #8]
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	f88d 3007 	strb.w	r3, [sp, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800661e:	e02c      	b.n	800667a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006620:	9b06      	ldr	r3, [sp, #24]
 8006622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006626:	d028      	beq.n	800667a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006628:	9b06      	ldr	r3, [sp, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d007      	beq.n	800663e <UART_WaitOnFlagUntilTimeout+0x30>
 800662e:	f7fe fdeb 	bl	8005208 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	9b00      	ldr	r3, [sp, #0]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	9a06      	ldr	r2, [sp, #24]
 800663a:	429a      	cmp	r2, r3
 800663c:	d21d      	bcs.n	800667a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800663e:	9b03      	ldr	r3, [sp, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800664c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695a      	ldr	r2, [r3, #20]
 8006654:	9b03      	ldr	r3, [sp, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0201 	bic.w	r2, r2, #1
 800665c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800665e:	9b03      	ldr	r3, [sp, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800666e:	9b03      	ldr	r3, [sp, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e010      	b.n	800669c <UART_WaitOnFlagUntilTimeout+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800667a:	9b03      	ldr	r3, [sp, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	9b02      	ldr	r3, [sp, #8]
 8006682:	4013      	ands	r3, r2
 8006684:	9a02      	ldr	r2, [sp, #8]
 8006686:	429a      	cmp	r2, r3
 8006688:	bf0c      	ite	eq
 800668a:	2301      	moveq	r3, #1
 800668c:	2300      	movne	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	461a      	mov	r2, r3
 8006692:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006696:	429a      	cmp	r2, r3
 8006698:	d0c2      	beq.n	8006620 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	b005      	add	sp, #20
 80066a0:	f85d fb04 	ldr.w	pc, [sp], #4

080066a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066a4:	b082      	sub	sp, #8
 80066a6:	9001      	str	r0, [sp, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066a8:	9b01      	ldr	r3, [sp, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	9b01      	ldr	r3, [sp, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b8:	9b01      	ldr	r3, [sp, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695a      	ldr	r2, [r3, #20]
 80066be:	9b01      	ldr	r3, [sp, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c8:	9b01      	ldr	r3, [sp, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d107      	bne.n	80066e0 <UART_EndRxTransfer+0x3c>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d0:	9b01      	ldr	r3, [sp, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	9b01      	ldr	r3, [sp, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0210 	bic.w	r2, r2, #16
 80066de:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066e0:	9b01      	ldr	r3, [sp, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e8:	9b01      	ldr	r3, [sp, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066ee:	bf00      	nop
 80066f0:	b002      	add	sp, #8
 80066f2:	4770      	bx	lr

080066f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066f4:	b500      	push	{lr}
 80066f6:	b085      	sub	sp, #20
 80066f8:	9001      	str	r0, [sp, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066fa:	9b01      	ldr	r3, [sp, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	9303      	str	r3, [sp, #12]
  huart->RxXferCount = 0x00U;
 8006700:	9b03      	ldr	r3, [sp, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006706:	9b03      	ldr	r3, [sp, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800670c:	9803      	ldr	r0, [sp, #12]
 800670e:	f7ff ff71 	bl	80065f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006712:	bf00      	nop
 8006714:	b005      	add	sp, #20
 8006716:	f85d fb04 	ldr.w	pc, [sp], #4

0800671a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800671a:	b084      	sub	sp, #16
 800671c:	9001      	str	r0, [sp, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800671e:	9b01      	ldr	r3, [sp, #4]
 8006720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b21      	cmp	r3, #33	; 0x21
 8006728:	d13e      	bne.n	80067a8 <UART_Transmit_IT+0x8e>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800672a:	9b01      	ldr	r3, [sp, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006732:	d114      	bne.n	800675e <UART_Transmit_IT+0x44>
 8006734:	9b01      	ldr	r3, [sp, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d110      	bne.n	800675e <UART_Transmit_IT+0x44>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800673c:	9b01      	ldr	r3, [sp, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	9303      	str	r3, [sp, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006742:	9b03      	ldr	r3, [sp, #12]
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	9b01      	ldr	r3, [sp, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006750:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006752:	9b01      	ldr	r3, [sp, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	1c9a      	adds	r2, r3, #2
 8006758:	9b01      	ldr	r3, [sp, #4]
 800675a:	621a      	str	r2, [r3, #32]
 800675c:	e008      	b.n	8006770 <UART_Transmit_IT+0x56>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800675e:	9b01      	ldr	r3, [sp, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	1c59      	adds	r1, r3, #1
 8006764:	9a01      	ldr	r2, [sp, #4]
 8006766:	6211      	str	r1, [r2, #32]
 8006768:	781a      	ldrb	r2, [r3, #0]
 800676a:	9b01      	ldr	r3, [sp, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006770:	9b01      	ldr	r3, [sp, #4]
 8006772:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29b      	uxth	r3, r3
 800677a:	9a01      	ldr	r2, [sp, #4]
 800677c:	4619      	mov	r1, r3
 800677e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10f      	bne.n	80067a4 <UART_Transmit_IT+0x8a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006784:	9b01      	ldr	r3, [sp, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	9b01      	ldr	r3, [sp, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006792:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006794:	9b01      	ldr	r3, [sp, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68da      	ldr	r2, [r3, #12]
 800679a:	9b01      	ldr	r3, [sp, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	e000      	b.n	80067aa <UART_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 80067a8:	2302      	movs	r3, #2
  }
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	b004      	add	sp, #16
 80067ae:	4770      	bx	lr

080067b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067b0:	b500      	push	{lr}
 80067b2:	b083      	sub	sp, #12
 80067b4:	9001      	str	r0, [sp, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067b6:	9b01      	ldr	r3, [sp, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	9b01      	ldr	r3, [sp, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067c6:	9b01      	ldr	r3, [sp, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067ce:	9801      	ldr	r0, [sp, #4]
 80067d0:	f7ff ff06 	bl	80065e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	b003      	add	sp, #12
 80067da:	f85d fb04 	ldr.w	pc, [sp], #4

080067de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067de:	b500      	push	{lr}
 80067e0:	b087      	sub	sp, #28
 80067e2:	9001      	str	r0, [sp, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067e4:	9b01      	ldr	r3, [sp, #4]
 80067e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b22      	cmp	r3, #34	; 0x22
 80067ee:	f040 8099 	bne.w	8006924 <UART_Receive_IT+0x146>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f2:	9b01      	ldr	r3, [sp, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067fa:	d117      	bne.n	800682c <UART_Receive_IT+0x4e>
 80067fc:	9b01      	ldr	r3, [sp, #4]
 80067fe:	691b      	ldr	r3, [r3, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d113      	bne.n	800682c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8006804:	2300      	movs	r3, #0
 8006806:	9305      	str	r3, [sp, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006808:	9b01      	ldr	r3, [sp, #4]
 800680a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680c:	9304      	str	r3, [sp, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800680e:	9b01      	ldr	r3, [sp, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800681a:	b29a      	uxth	r2, r3
 800681c:	9b04      	ldr	r3, [sp, #16]
 800681e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006820:	9b01      	ldr	r3, [sp, #4]
 8006822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006824:	1c9a      	adds	r2, r3, #2
 8006826:	9b01      	ldr	r3, [sp, #4]
 8006828:	629a      	str	r2, [r3, #40]	; 0x28
 800682a:	e026      	b.n	800687a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800682c:	9b01      	ldr	r3, [sp, #4]
 800682e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006830:	9305      	str	r3, [sp, #20]
      pdata16bits  = NULL;
 8006832:	2300      	movs	r3, #0
 8006834:	9304      	str	r3, [sp, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006836:	9b01      	ldr	r3, [sp, #4]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800683e:	d007      	beq.n	8006850 <UART_Receive_IT+0x72>
 8006840:	9b01      	ldr	r3, [sp, #4]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <UART_Receive_IT+0x80>
 8006848:	9b01      	ldr	r3, [sp, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d106      	bne.n	800685e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006850:	9b01      	ldr	r3, [sp, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	b2da      	uxtb	r2, r3
 8006858:	9b05      	ldr	r3, [sp, #20]
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	e008      	b.n	8006870 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800685e:	9b01      	ldr	r3, [sp, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800686a:	b2da      	uxtb	r2, r3
 800686c:	9b05      	ldr	r3, [sp, #20]
 800686e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006870:	9b01      	ldr	r3, [sp, #4]
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	9b01      	ldr	r3, [sp, #4]
 8006878:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800687a:	9b01      	ldr	r3, [sp, #4]
 800687c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800687e:	b29b      	uxth	r3, r3
 8006880:	3b01      	subs	r3, #1
 8006882:	b29b      	uxth	r3, r3
 8006884:	9a01      	ldr	r2, [sp, #4]
 8006886:	4619      	mov	r1, r3
 8006888:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800688a:	2b00      	cmp	r3, #0
 800688c:	d148      	bne.n	8006920 <UART_Receive_IT+0x142>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800688e:	9b01      	ldr	r3, [sp, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	9b01      	ldr	r3, [sp, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0220 	bic.w	r2, r2, #32
 800689c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800689e:	9b01      	ldr	r3, [sp, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	9b01      	ldr	r3, [sp, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068ae:	9b01      	ldr	r3, [sp, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695a      	ldr	r2, [r3, #20]
 80068b4:	9b01      	ldr	r3, [sp, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0201 	bic.w	r2, r2, #1
 80068bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068be:	9b01      	ldr	r3, [sp, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c6:	9b01      	ldr	r3, [sp, #4]
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d123      	bne.n	8006916 <UART_Receive_IT+0x138>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ce:	9b01      	ldr	r3, [sp, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d4:	9b01      	ldr	r3, [sp, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	9b01      	ldr	r3, [sp, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0210 	bic.w	r2, r2, #16
 80068e2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068e4:	9b01      	ldr	r3, [sp, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0310 	and.w	r3, r3, #16
 80068ee:	2b10      	cmp	r3, #16
 80068f0:	d10a      	bne.n	8006908 <UART_Receive_IT+0x12a>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068f2:	2300      	movs	r3, #0
 80068f4:	9303      	str	r3, [sp, #12]
 80068f6:	9b01      	ldr	r3, [sp, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	9303      	str	r3, [sp, #12]
 80068fe:	9b01      	ldr	r3, [sp, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	9303      	str	r3, [sp, #12]
 8006906:	9b03      	ldr	r3, [sp, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006908:	9b01      	ldr	r3, [sp, #4]
 800690a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800690c:	4619      	mov	r1, r3
 800690e:	9801      	ldr	r0, [sp, #4]
 8006910:	f7ff fe75 	bl	80065fe <HAL_UARTEx_RxEventCallback>
 8006914:	e002      	b.n	800691c <UART_Receive_IT+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006916:	9801      	ldr	r0, [sp, #4]
 8006918:	f7ff fe67 	bl	80065ea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	e002      	b.n	8006926 <UART_Receive_IT+0x148>
    }
    return HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	e000      	b.n	8006926 <UART_Receive_IT+0x148>
  }
  else
  {
    return HAL_BUSY;
 8006924:	2302      	movs	r3, #2
  }
}
 8006926:	4618      	mov	r0, r3
 8006928:	b007      	add	sp, #28
 800692a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08006930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006930:	b500      	push	{lr}
 8006932:	b085      	sub	sp, #20
 8006934:	9001      	str	r0, [sp, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006936:	9b01      	ldr	r3, [sp, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006940:	9b01      	ldr	r3, [sp, #4]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	9b01      	ldr	r3, [sp, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800694c:	9b01      	ldr	r3, [sp, #4]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	9b01      	ldr	r3, [sp, #4]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	431a      	orrs	r2, r3
 8006956:	9b01      	ldr	r3, [sp, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	9302      	str	r3, [sp, #8]
  MODIFY_REG(huart->Instance->CR1,
 800695e:	9b01      	ldr	r3, [sp, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006968:	f023 030c 	bic.w	r3, r3, #12
 800696c:	9a01      	ldr	r2, [sp, #4]
 800696e:	6812      	ldr	r2, [r2, #0]
 8006970:	9902      	ldr	r1, [sp, #8]
 8006972:	430b      	orrs	r3, r1
 8006974:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006976:	9b01      	ldr	r3, [sp, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006980:	9b01      	ldr	r3, [sp, #4]
 8006982:	699a      	ldr	r2, [r3, #24]
 8006984:	9b01      	ldr	r3, [sp, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800698c:	9b01      	ldr	r3, [sp, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a2c      	ldr	r2, [pc, #176]	; (8006a44 <UART_SetConfig+0x114>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d103      	bne.n	800699e <UART_SetConfig+0x6e>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006996:	f7ff fb63 	bl	8006060 <HAL_RCC_GetPCLK2Freq>
 800699a:	9003      	str	r0, [sp, #12]
 800699c:	e002      	b.n	80069a4 <UART_SetConfig+0x74>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800699e:	f7ff fb4b 	bl	8006038 <HAL_RCC_GetPCLK1Freq>
 80069a2:	9003      	str	r0, [sp, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069a4:	9a03      	ldr	r2, [sp, #12]
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	009a      	lsls	r2, r3, #2
 80069ae:	441a      	add	r2, r3
 80069b0:	9b01      	ldr	r3, [sp, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ba:	4a23      	ldr	r2, [pc, #140]	; (8006a48 <UART_SetConfig+0x118>)
 80069bc:	fba2 2303 	umull	r2, r3, r2, r3
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	0119      	lsls	r1, r3, #4
 80069c4:	9a03      	ldr	r2, [sp, #12]
 80069c6:	4613      	mov	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4413      	add	r3, r2
 80069cc:	009a      	lsls	r2, r3, #2
 80069ce:	441a      	add	r2, r3
 80069d0:	9b01      	ldr	r3, [sp, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80069da:	4b1b      	ldr	r3, [pc, #108]	; (8006a48 <UART_SetConfig+0x118>)
 80069dc:	fba3 0302 	umull	r0, r3, r3, r2
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	2064      	movs	r0, #100	; 0x64
 80069e4:	fb00 f303 	mul.w	r3, r0, r3
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	3332      	adds	r3, #50	; 0x32
 80069ee:	4a16      	ldr	r2, [pc, #88]	; (8006a48 <UART_SetConfig+0x118>)
 80069f0:	fba2 2303 	umull	r2, r3, r2, r3
 80069f4:	095b      	lsrs	r3, r3, #5
 80069f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069fa:	4419      	add	r1, r3
 80069fc:	9a03      	ldr	r2, [sp, #12]
 80069fe:	4613      	mov	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	009a      	lsls	r2, r3, #2
 8006a06:	441a      	add	r2, r3
 8006a08:	9b01      	ldr	r3, [sp, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a12:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <UART_SetConfig+0x118>)
 8006a14:	fba3 0302 	umull	r0, r3, r3, r2
 8006a18:	095b      	lsrs	r3, r3, #5
 8006a1a:	2064      	movs	r0, #100	; 0x64
 8006a1c:	fb00 f303 	mul.w	r3, r0, r3
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	3332      	adds	r3, #50	; 0x32
 8006a26:	4a08      	ldr	r2, [pc, #32]	; (8006a48 <UART_SetConfig+0x118>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	f003 020f 	and.w	r2, r3, #15
 8006a32:	9b01      	ldr	r3, [sp, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	440a      	add	r2, r1
 8006a38:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a3a:	bf00      	nop
 8006a3c:	b005      	add	sp, #20
 8006a3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a42:	bf00      	nop
 8006a44:	40013800 	.word	0x40013800
 8006a48:	51eb851f 	.word	0x51eb851f

08006a4c <__errno>:
 8006a4c:	4b01      	ldr	r3, [pc, #4]	; (8006a54 <__errno+0x8>)
 8006a4e:	6818      	ldr	r0, [r3, #0]
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	2000008c 	.word	0x2000008c

08006a58 <__libc_init_array>:
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	2600      	movs	r6, #0
 8006a5c:	4d0c      	ldr	r5, [pc, #48]	; (8006a90 <__libc_init_array+0x38>)
 8006a5e:	4c0d      	ldr	r4, [pc, #52]	; (8006a94 <__libc_init_array+0x3c>)
 8006a60:	1b64      	subs	r4, r4, r5
 8006a62:	10a4      	asrs	r4, r4, #2
 8006a64:	42a6      	cmp	r6, r4
 8006a66:	d109      	bne.n	8006a7c <__libc_init_array+0x24>
 8006a68:	f000 fc9c 	bl	80073a4 <_init>
 8006a6c:	2600      	movs	r6, #0
 8006a6e:	4d0a      	ldr	r5, [pc, #40]	; (8006a98 <__libc_init_array+0x40>)
 8006a70:	4c0a      	ldr	r4, [pc, #40]	; (8006a9c <__libc_init_array+0x44>)
 8006a72:	1b64      	subs	r4, r4, r5
 8006a74:	10a4      	asrs	r4, r4, #2
 8006a76:	42a6      	cmp	r6, r4
 8006a78:	d105      	bne.n	8006a86 <__libc_init_array+0x2e>
 8006a7a:	bd70      	pop	{r4, r5, r6, pc}
 8006a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a80:	4798      	blx	r3
 8006a82:	3601      	adds	r6, #1
 8006a84:	e7ee      	b.n	8006a64 <__libc_init_array+0xc>
 8006a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a8a:	4798      	blx	r3
 8006a8c:	3601      	adds	r6, #1
 8006a8e:	e7f2      	b.n	8006a76 <__libc_init_array+0x1e>
 8006a90:	080077fc 	.word	0x080077fc
 8006a94:	080077fc 	.word	0x080077fc
 8006a98:	080077fc 	.word	0x080077fc
 8006a9c:	08007800 	.word	0x08007800

08006aa0 <__retarget_lock_acquire_recursive>:
 8006aa0:	4770      	bx	lr

08006aa2 <__retarget_lock_release_recursive>:
 8006aa2:	4770      	bx	lr

08006aa4 <memchr>:
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	b510      	push	{r4, lr}
 8006aa8:	b2c9      	uxtb	r1, r1
 8006aaa:	4402      	add	r2, r0
 8006aac:	4293      	cmp	r3, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	d101      	bne.n	8006ab6 <memchr+0x12>
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	e003      	b.n	8006abe <memchr+0x1a>
 8006ab6:	7804      	ldrb	r4, [r0, #0]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	428c      	cmp	r4, r1
 8006abc:	d1f6      	bne.n	8006aac <memchr+0x8>
 8006abe:	bd10      	pop	{r4, pc}

08006ac0 <memcpy>:
 8006ac0:	440a      	add	r2, r1
 8006ac2:	4291      	cmp	r1, r2
 8006ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ac8:	d100      	bne.n	8006acc <memcpy+0xc>
 8006aca:	4770      	bx	lr
 8006acc:	b510      	push	{r4, lr}
 8006ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ad2:	4291      	cmp	r1, r2
 8006ad4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ad8:	d1f9      	bne.n	8006ace <memcpy+0xe>
 8006ada:	bd10      	pop	{r4, pc}

08006adc <memset>:
 8006adc:	4603      	mov	r3, r0
 8006ade:	4402      	add	r2, r0
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d100      	bne.n	8006ae6 <memset+0xa>
 8006ae4:	4770      	bx	lr
 8006ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8006aea:	e7f9      	b.n	8006ae0 <memset+0x4>

08006aec <_free_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4605      	mov	r5, r0
 8006af0:	2900      	cmp	r1, #0
 8006af2:	d040      	beq.n	8006b76 <_free_r+0x8a>
 8006af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006af8:	1f0c      	subs	r4, r1, #4
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	bfb8      	it	lt
 8006afe:	18e4      	addlt	r4, r4, r3
 8006b00:	f000 f900 	bl	8006d04 <__malloc_lock>
 8006b04:	4a1c      	ldr	r2, [pc, #112]	; (8006b78 <_free_r+0x8c>)
 8006b06:	6813      	ldr	r3, [r2, #0]
 8006b08:	b933      	cbnz	r3, 8006b18 <_free_r+0x2c>
 8006b0a:	6063      	str	r3, [r4, #4]
 8006b0c:	6014      	str	r4, [r2, #0]
 8006b0e:	4628      	mov	r0, r5
 8006b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b14:	f000 b8fc 	b.w	8006d10 <__malloc_unlock>
 8006b18:	42a3      	cmp	r3, r4
 8006b1a:	d908      	bls.n	8006b2e <_free_r+0x42>
 8006b1c:	6820      	ldr	r0, [r4, #0]
 8006b1e:	1821      	adds	r1, r4, r0
 8006b20:	428b      	cmp	r3, r1
 8006b22:	bf01      	itttt	eq
 8006b24:	6819      	ldreq	r1, [r3, #0]
 8006b26:	685b      	ldreq	r3, [r3, #4]
 8006b28:	1809      	addeq	r1, r1, r0
 8006b2a:	6021      	streq	r1, [r4, #0]
 8006b2c:	e7ed      	b.n	8006b0a <_free_r+0x1e>
 8006b2e:	461a      	mov	r2, r3
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	b10b      	cbz	r3, 8006b38 <_free_r+0x4c>
 8006b34:	42a3      	cmp	r3, r4
 8006b36:	d9fa      	bls.n	8006b2e <_free_r+0x42>
 8006b38:	6811      	ldr	r1, [r2, #0]
 8006b3a:	1850      	adds	r0, r2, r1
 8006b3c:	42a0      	cmp	r0, r4
 8006b3e:	d10b      	bne.n	8006b58 <_free_r+0x6c>
 8006b40:	6820      	ldr	r0, [r4, #0]
 8006b42:	4401      	add	r1, r0
 8006b44:	1850      	adds	r0, r2, r1
 8006b46:	4283      	cmp	r3, r0
 8006b48:	6011      	str	r1, [r2, #0]
 8006b4a:	d1e0      	bne.n	8006b0e <_free_r+0x22>
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	4401      	add	r1, r0
 8006b52:	6011      	str	r1, [r2, #0]
 8006b54:	6053      	str	r3, [r2, #4]
 8006b56:	e7da      	b.n	8006b0e <_free_r+0x22>
 8006b58:	d902      	bls.n	8006b60 <_free_r+0x74>
 8006b5a:	230c      	movs	r3, #12
 8006b5c:	602b      	str	r3, [r5, #0]
 8006b5e:	e7d6      	b.n	8006b0e <_free_r+0x22>
 8006b60:	6820      	ldr	r0, [r4, #0]
 8006b62:	1821      	adds	r1, r4, r0
 8006b64:	428b      	cmp	r3, r1
 8006b66:	bf01      	itttt	eq
 8006b68:	6819      	ldreq	r1, [r3, #0]
 8006b6a:	685b      	ldreq	r3, [r3, #4]
 8006b6c:	1809      	addeq	r1, r1, r0
 8006b6e:	6021      	streq	r1, [r4, #0]
 8006b70:	6063      	str	r3, [r4, #4]
 8006b72:	6054      	str	r4, [r2, #4]
 8006b74:	e7cb      	b.n	8006b0e <_free_r+0x22>
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	200001fc 	.word	0x200001fc

08006b7c <sbrk_aligned>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	4e0e      	ldr	r6, [pc, #56]	; (8006bb8 <sbrk_aligned+0x3c>)
 8006b80:	460c      	mov	r4, r1
 8006b82:	6831      	ldr	r1, [r6, #0]
 8006b84:	4605      	mov	r5, r0
 8006b86:	b911      	cbnz	r1, 8006b8e <sbrk_aligned+0x12>
 8006b88:	f000 f88c 	bl	8006ca4 <_sbrk_r>
 8006b8c:	6030      	str	r0, [r6, #0]
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4628      	mov	r0, r5
 8006b92:	f000 f887 	bl	8006ca4 <_sbrk_r>
 8006b96:	1c43      	adds	r3, r0, #1
 8006b98:	d00a      	beq.n	8006bb0 <sbrk_aligned+0x34>
 8006b9a:	1cc4      	adds	r4, r0, #3
 8006b9c:	f024 0403 	bic.w	r4, r4, #3
 8006ba0:	42a0      	cmp	r0, r4
 8006ba2:	d007      	beq.n	8006bb4 <sbrk_aligned+0x38>
 8006ba4:	1a21      	subs	r1, r4, r0
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f000 f87c 	bl	8006ca4 <_sbrk_r>
 8006bac:	3001      	adds	r0, #1
 8006bae:	d101      	bne.n	8006bb4 <sbrk_aligned+0x38>
 8006bb0:	f04f 34ff 	mov.w	r4, #4294967295
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}
 8006bb8:	20000200 	.word	0x20000200

08006bbc <_malloc_r>:
 8006bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc0:	1ccd      	adds	r5, r1, #3
 8006bc2:	f025 0503 	bic.w	r5, r5, #3
 8006bc6:	3508      	adds	r5, #8
 8006bc8:	2d0c      	cmp	r5, #12
 8006bca:	bf38      	it	cc
 8006bcc:	250c      	movcc	r5, #12
 8006bce:	2d00      	cmp	r5, #0
 8006bd0:	4607      	mov	r7, r0
 8006bd2:	db01      	blt.n	8006bd8 <_malloc_r+0x1c>
 8006bd4:	42a9      	cmp	r1, r5
 8006bd6:	d905      	bls.n	8006be4 <_malloc_r+0x28>
 8006bd8:	230c      	movs	r3, #12
 8006bda:	2600      	movs	r6, #0
 8006bdc:	603b      	str	r3, [r7, #0]
 8006bde:	4630      	mov	r0, r6
 8006be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be4:	4e2e      	ldr	r6, [pc, #184]	; (8006ca0 <_malloc_r+0xe4>)
 8006be6:	f000 f88d 	bl	8006d04 <__malloc_lock>
 8006bea:	6833      	ldr	r3, [r6, #0]
 8006bec:	461c      	mov	r4, r3
 8006bee:	bb34      	cbnz	r4, 8006c3e <_malloc_r+0x82>
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	4638      	mov	r0, r7
 8006bf4:	f7ff ffc2 	bl	8006b7c <sbrk_aligned>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	d14d      	bne.n	8006c9a <_malloc_r+0xde>
 8006bfe:	6834      	ldr	r4, [r6, #0]
 8006c00:	4626      	mov	r6, r4
 8006c02:	2e00      	cmp	r6, #0
 8006c04:	d140      	bne.n	8006c88 <_malloc_r+0xcc>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	4631      	mov	r1, r6
 8006c0a:	4638      	mov	r0, r7
 8006c0c:	eb04 0803 	add.w	r8, r4, r3
 8006c10:	f000 f848 	bl	8006ca4 <_sbrk_r>
 8006c14:	4580      	cmp	r8, r0
 8006c16:	d13a      	bne.n	8006c8e <_malloc_r+0xd2>
 8006c18:	6821      	ldr	r1, [r4, #0]
 8006c1a:	3503      	adds	r5, #3
 8006c1c:	1a6d      	subs	r5, r5, r1
 8006c1e:	f025 0503 	bic.w	r5, r5, #3
 8006c22:	3508      	adds	r5, #8
 8006c24:	2d0c      	cmp	r5, #12
 8006c26:	bf38      	it	cc
 8006c28:	250c      	movcc	r5, #12
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	f7ff ffa5 	bl	8006b7c <sbrk_aligned>
 8006c32:	3001      	adds	r0, #1
 8006c34:	d02b      	beq.n	8006c8e <_malloc_r+0xd2>
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	442b      	add	r3, r5
 8006c3a:	6023      	str	r3, [r4, #0]
 8006c3c:	e00e      	b.n	8006c5c <_malloc_r+0xa0>
 8006c3e:	6822      	ldr	r2, [r4, #0]
 8006c40:	1b52      	subs	r2, r2, r5
 8006c42:	d41e      	bmi.n	8006c82 <_malloc_r+0xc6>
 8006c44:	2a0b      	cmp	r2, #11
 8006c46:	d916      	bls.n	8006c76 <_malloc_r+0xba>
 8006c48:	1961      	adds	r1, r4, r5
 8006c4a:	42a3      	cmp	r3, r4
 8006c4c:	6025      	str	r5, [r4, #0]
 8006c4e:	bf18      	it	ne
 8006c50:	6059      	strne	r1, [r3, #4]
 8006c52:	6863      	ldr	r3, [r4, #4]
 8006c54:	bf08      	it	eq
 8006c56:	6031      	streq	r1, [r6, #0]
 8006c58:	5162      	str	r2, [r4, r5]
 8006c5a:	604b      	str	r3, [r1, #4]
 8006c5c:	4638      	mov	r0, r7
 8006c5e:	f104 060b 	add.w	r6, r4, #11
 8006c62:	f000 f855 	bl	8006d10 <__malloc_unlock>
 8006c66:	f026 0607 	bic.w	r6, r6, #7
 8006c6a:	1d23      	adds	r3, r4, #4
 8006c6c:	1af2      	subs	r2, r6, r3
 8006c6e:	d0b6      	beq.n	8006bde <_malloc_r+0x22>
 8006c70:	1b9b      	subs	r3, r3, r6
 8006c72:	50a3      	str	r3, [r4, r2]
 8006c74:	e7b3      	b.n	8006bde <_malloc_r+0x22>
 8006c76:	6862      	ldr	r2, [r4, #4]
 8006c78:	42a3      	cmp	r3, r4
 8006c7a:	bf0c      	ite	eq
 8006c7c:	6032      	streq	r2, [r6, #0]
 8006c7e:	605a      	strne	r2, [r3, #4]
 8006c80:	e7ec      	b.n	8006c5c <_malloc_r+0xa0>
 8006c82:	4623      	mov	r3, r4
 8006c84:	6864      	ldr	r4, [r4, #4]
 8006c86:	e7b2      	b.n	8006bee <_malloc_r+0x32>
 8006c88:	4634      	mov	r4, r6
 8006c8a:	6876      	ldr	r6, [r6, #4]
 8006c8c:	e7b9      	b.n	8006c02 <_malloc_r+0x46>
 8006c8e:	230c      	movs	r3, #12
 8006c90:	4638      	mov	r0, r7
 8006c92:	603b      	str	r3, [r7, #0]
 8006c94:	f000 f83c 	bl	8006d10 <__malloc_unlock>
 8006c98:	e7a1      	b.n	8006bde <_malloc_r+0x22>
 8006c9a:	6025      	str	r5, [r4, #0]
 8006c9c:	e7de      	b.n	8006c5c <_malloc_r+0xa0>
 8006c9e:	bf00      	nop
 8006ca0:	200001fc 	.word	0x200001fc

08006ca4 <_sbrk_r>:
 8006ca4:	b538      	push	{r3, r4, r5, lr}
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	4d05      	ldr	r5, [pc, #20]	; (8006cc0 <_sbrk_r+0x1c>)
 8006caa:	4604      	mov	r4, r0
 8006cac:	4608      	mov	r0, r1
 8006cae:	602b      	str	r3, [r5, #0]
 8006cb0:	f7fe f982 	bl	8004fb8 <_sbrk>
 8006cb4:	1c43      	adds	r3, r0, #1
 8006cb6:	d102      	bne.n	8006cbe <_sbrk_r+0x1a>
 8006cb8:	682b      	ldr	r3, [r5, #0]
 8006cba:	b103      	cbz	r3, 8006cbe <_sbrk_r+0x1a>
 8006cbc:	6023      	str	r3, [r4, #0]
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	20000204 	.word	0x20000204

08006cc4 <siprintf>:
 8006cc4:	b40e      	push	{r1, r2, r3}
 8006cc6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cca:	b500      	push	{lr}
 8006ccc:	b09c      	sub	sp, #112	; 0x70
 8006cce:	ab1d      	add	r3, sp, #116	; 0x74
 8006cd0:	9002      	str	r0, [sp, #8]
 8006cd2:	9006      	str	r0, [sp, #24]
 8006cd4:	9107      	str	r1, [sp, #28]
 8006cd6:	9104      	str	r1, [sp, #16]
 8006cd8:	4808      	ldr	r0, [pc, #32]	; (8006cfc <siprintf+0x38>)
 8006cda:	4909      	ldr	r1, [pc, #36]	; (8006d00 <siprintf+0x3c>)
 8006cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce0:	9105      	str	r1, [sp, #20]
 8006ce2:	6800      	ldr	r0, [r0, #0]
 8006ce4:	a902      	add	r1, sp, #8
 8006ce6:	9301      	str	r3, [sp, #4]
 8006ce8:	f000 f874 	bl	8006dd4 <_svfiprintf_r>
 8006cec:	2200      	movs	r2, #0
 8006cee:	9b02      	ldr	r3, [sp, #8]
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	b01c      	add	sp, #112	; 0x70
 8006cf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cf8:	b003      	add	sp, #12
 8006cfa:	4770      	bx	lr
 8006cfc:	2000008c 	.word	0x2000008c
 8006d00:	ffff0208 	.word	0xffff0208

08006d04 <__malloc_lock>:
 8006d04:	4801      	ldr	r0, [pc, #4]	; (8006d0c <__malloc_lock+0x8>)
 8006d06:	f7ff becb 	b.w	8006aa0 <__retarget_lock_acquire_recursive>
 8006d0a:	bf00      	nop
 8006d0c:	200001f8 	.word	0x200001f8

08006d10 <__malloc_unlock>:
 8006d10:	4801      	ldr	r0, [pc, #4]	; (8006d18 <__malloc_unlock+0x8>)
 8006d12:	f7ff bec6 	b.w	8006aa2 <__retarget_lock_release_recursive>
 8006d16:	bf00      	nop
 8006d18:	200001f8 	.word	0x200001f8

08006d1c <__ssputs_r>:
 8006d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d20:	688e      	ldr	r6, [r1, #8]
 8006d22:	4682      	mov	sl, r0
 8006d24:	429e      	cmp	r6, r3
 8006d26:	460c      	mov	r4, r1
 8006d28:	4690      	mov	r8, r2
 8006d2a:	461f      	mov	r7, r3
 8006d2c:	d838      	bhi.n	8006da0 <__ssputs_r+0x84>
 8006d2e:	898a      	ldrh	r2, [r1, #12]
 8006d30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d34:	d032      	beq.n	8006d9c <__ssputs_r+0x80>
 8006d36:	6825      	ldr	r5, [r4, #0]
 8006d38:	6909      	ldr	r1, [r1, #16]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	eba5 0901 	sub.w	r9, r5, r1
 8006d40:	6965      	ldr	r5, [r4, #20]
 8006d42:	444b      	add	r3, r9
 8006d44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d4c:	106d      	asrs	r5, r5, #1
 8006d4e:	429d      	cmp	r5, r3
 8006d50:	bf38      	it	cc
 8006d52:	461d      	movcc	r5, r3
 8006d54:	0553      	lsls	r3, r2, #21
 8006d56:	d531      	bpl.n	8006dbc <__ssputs_r+0xa0>
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7ff ff2f 	bl	8006bbc <_malloc_r>
 8006d5e:	4606      	mov	r6, r0
 8006d60:	b950      	cbnz	r0, 8006d78 <__ssputs_r+0x5c>
 8006d62:	230c      	movs	r3, #12
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	f8ca 3000 	str.w	r3, [sl]
 8006d6c:	89a3      	ldrh	r3, [r4, #12]
 8006d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d72:	81a3      	strh	r3, [r4, #12]
 8006d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d78:	464a      	mov	r2, r9
 8006d7a:	6921      	ldr	r1, [r4, #16]
 8006d7c:	f7ff fea0 	bl	8006ac0 <memcpy>
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8a:	81a3      	strh	r3, [r4, #12]
 8006d8c:	6126      	str	r6, [r4, #16]
 8006d8e:	444e      	add	r6, r9
 8006d90:	6026      	str	r6, [r4, #0]
 8006d92:	463e      	mov	r6, r7
 8006d94:	6165      	str	r5, [r4, #20]
 8006d96:	eba5 0509 	sub.w	r5, r5, r9
 8006d9a:	60a5      	str	r5, [r4, #8]
 8006d9c:	42be      	cmp	r6, r7
 8006d9e:	d900      	bls.n	8006da2 <__ssputs_r+0x86>
 8006da0:	463e      	mov	r6, r7
 8006da2:	4632      	mov	r2, r6
 8006da4:	4641      	mov	r1, r8
 8006da6:	6820      	ldr	r0, [r4, #0]
 8006da8:	f000 faaa 	bl	8007300 <memmove>
 8006dac:	68a3      	ldr	r3, [r4, #8]
 8006dae:	2000      	movs	r0, #0
 8006db0:	1b9b      	subs	r3, r3, r6
 8006db2:	60a3      	str	r3, [r4, #8]
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	4433      	add	r3, r6
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	e7db      	b.n	8006d74 <__ssputs_r+0x58>
 8006dbc:	462a      	mov	r2, r5
 8006dbe:	f000 fab9 	bl	8007334 <_realloc_r>
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d1e1      	bne.n	8006d8c <__ssputs_r+0x70>
 8006dc8:	4650      	mov	r0, sl
 8006dca:	6921      	ldr	r1, [r4, #16]
 8006dcc:	f7ff fe8e 	bl	8006aec <_free_r>
 8006dd0:	e7c7      	b.n	8006d62 <__ssputs_r+0x46>
	...

08006dd4 <_svfiprintf_r>:
 8006dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd8:	4698      	mov	r8, r3
 8006dda:	898b      	ldrh	r3, [r1, #12]
 8006ddc:	4607      	mov	r7, r0
 8006dde:	061b      	lsls	r3, r3, #24
 8006de0:	460d      	mov	r5, r1
 8006de2:	4614      	mov	r4, r2
 8006de4:	b09d      	sub	sp, #116	; 0x74
 8006de6:	d50e      	bpl.n	8006e06 <_svfiprintf_r+0x32>
 8006de8:	690b      	ldr	r3, [r1, #16]
 8006dea:	b963      	cbnz	r3, 8006e06 <_svfiprintf_r+0x32>
 8006dec:	2140      	movs	r1, #64	; 0x40
 8006dee:	f7ff fee5 	bl	8006bbc <_malloc_r>
 8006df2:	6028      	str	r0, [r5, #0]
 8006df4:	6128      	str	r0, [r5, #16]
 8006df6:	b920      	cbnz	r0, 8006e02 <_svfiprintf_r+0x2e>
 8006df8:	230c      	movs	r3, #12
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006e00:	e0d1      	b.n	8006fa6 <_svfiprintf_r+0x1d2>
 8006e02:	2340      	movs	r3, #64	; 0x40
 8006e04:	616b      	str	r3, [r5, #20]
 8006e06:	2300      	movs	r3, #0
 8006e08:	9309      	str	r3, [sp, #36]	; 0x24
 8006e0a:	2320      	movs	r3, #32
 8006e0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e10:	2330      	movs	r3, #48	; 0x30
 8006e12:	f04f 0901 	mov.w	r9, #1
 8006e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e1a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006fc0 <_svfiprintf_r+0x1ec>
 8006e1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e22:	4623      	mov	r3, r4
 8006e24:	469a      	mov	sl, r3
 8006e26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e2a:	b10a      	cbz	r2, 8006e30 <_svfiprintf_r+0x5c>
 8006e2c:	2a25      	cmp	r2, #37	; 0x25
 8006e2e:	d1f9      	bne.n	8006e24 <_svfiprintf_r+0x50>
 8006e30:	ebba 0b04 	subs.w	fp, sl, r4
 8006e34:	d00b      	beq.n	8006e4e <_svfiprintf_r+0x7a>
 8006e36:	465b      	mov	r3, fp
 8006e38:	4622      	mov	r2, r4
 8006e3a:	4629      	mov	r1, r5
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	f7ff ff6d 	bl	8006d1c <__ssputs_r>
 8006e42:	3001      	adds	r0, #1
 8006e44:	f000 80aa 	beq.w	8006f9c <_svfiprintf_r+0x1c8>
 8006e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e4a:	445a      	add	r2, fp
 8006e4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 80a2 	beq.w	8006f9c <_svfiprintf_r+0x1c8>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e62:	f10a 0a01 	add.w	sl, sl, #1
 8006e66:	9304      	str	r3, [sp, #16]
 8006e68:	9307      	str	r3, [sp, #28]
 8006e6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e6e:	931a      	str	r3, [sp, #104]	; 0x68
 8006e70:	4654      	mov	r4, sl
 8006e72:	2205      	movs	r2, #5
 8006e74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e78:	4851      	ldr	r0, [pc, #324]	; (8006fc0 <_svfiprintf_r+0x1ec>)
 8006e7a:	f7ff fe13 	bl	8006aa4 <memchr>
 8006e7e:	9a04      	ldr	r2, [sp, #16]
 8006e80:	b9d8      	cbnz	r0, 8006eba <_svfiprintf_r+0xe6>
 8006e82:	06d0      	lsls	r0, r2, #27
 8006e84:	bf44      	itt	mi
 8006e86:	2320      	movmi	r3, #32
 8006e88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e8c:	0711      	lsls	r1, r2, #28
 8006e8e:	bf44      	itt	mi
 8006e90:	232b      	movmi	r3, #43	; 0x2b
 8006e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e96:	f89a 3000 	ldrb.w	r3, [sl]
 8006e9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e9c:	d015      	beq.n	8006eca <_svfiprintf_r+0xf6>
 8006e9e:	4654      	mov	r4, sl
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	f04f 0c0a 	mov.w	ip, #10
 8006ea6:	9a07      	ldr	r2, [sp, #28]
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006eae:	3b30      	subs	r3, #48	; 0x30
 8006eb0:	2b09      	cmp	r3, #9
 8006eb2:	d94e      	bls.n	8006f52 <_svfiprintf_r+0x17e>
 8006eb4:	b1b0      	cbz	r0, 8006ee4 <_svfiprintf_r+0x110>
 8006eb6:	9207      	str	r2, [sp, #28]
 8006eb8:	e014      	b.n	8006ee4 <_svfiprintf_r+0x110>
 8006eba:	eba0 0308 	sub.w	r3, r0, r8
 8006ebe:	fa09 f303 	lsl.w	r3, r9, r3
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	46a2      	mov	sl, r4
 8006ec6:	9304      	str	r3, [sp, #16]
 8006ec8:	e7d2      	b.n	8006e70 <_svfiprintf_r+0x9c>
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	1d19      	adds	r1, r3, #4
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	9103      	str	r1, [sp, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	bfbb      	ittet	lt
 8006ed6:	425b      	neglt	r3, r3
 8006ed8:	f042 0202 	orrlt.w	r2, r2, #2
 8006edc:	9307      	strge	r3, [sp, #28]
 8006ede:	9307      	strlt	r3, [sp, #28]
 8006ee0:	bfb8      	it	lt
 8006ee2:	9204      	strlt	r2, [sp, #16]
 8006ee4:	7823      	ldrb	r3, [r4, #0]
 8006ee6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ee8:	d10c      	bne.n	8006f04 <_svfiprintf_r+0x130>
 8006eea:	7863      	ldrb	r3, [r4, #1]
 8006eec:	2b2a      	cmp	r3, #42	; 0x2a
 8006eee:	d135      	bne.n	8006f5c <_svfiprintf_r+0x188>
 8006ef0:	9b03      	ldr	r3, [sp, #12]
 8006ef2:	3402      	adds	r4, #2
 8006ef4:	1d1a      	adds	r2, r3, #4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	9203      	str	r2, [sp, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bfb8      	it	lt
 8006efe:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f02:	9305      	str	r3, [sp, #20]
 8006f04:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006fc4 <_svfiprintf_r+0x1f0>
 8006f08:	2203      	movs	r2, #3
 8006f0a:	4650      	mov	r0, sl
 8006f0c:	7821      	ldrb	r1, [r4, #0]
 8006f0e:	f7ff fdc9 	bl	8006aa4 <memchr>
 8006f12:	b140      	cbz	r0, 8006f26 <_svfiprintf_r+0x152>
 8006f14:	2340      	movs	r3, #64	; 0x40
 8006f16:	eba0 000a 	sub.w	r0, r0, sl
 8006f1a:	fa03 f000 	lsl.w	r0, r3, r0
 8006f1e:	9b04      	ldr	r3, [sp, #16]
 8006f20:	3401      	adds	r4, #1
 8006f22:	4303      	orrs	r3, r0
 8006f24:	9304      	str	r3, [sp, #16]
 8006f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f2a:	2206      	movs	r2, #6
 8006f2c:	4826      	ldr	r0, [pc, #152]	; (8006fc8 <_svfiprintf_r+0x1f4>)
 8006f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f32:	f7ff fdb7 	bl	8006aa4 <memchr>
 8006f36:	2800      	cmp	r0, #0
 8006f38:	d038      	beq.n	8006fac <_svfiprintf_r+0x1d8>
 8006f3a:	4b24      	ldr	r3, [pc, #144]	; (8006fcc <_svfiprintf_r+0x1f8>)
 8006f3c:	bb1b      	cbnz	r3, 8006f86 <_svfiprintf_r+0x1b2>
 8006f3e:	9b03      	ldr	r3, [sp, #12]
 8006f40:	3307      	adds	r3, #7
 8006f42:	f023 0307 	bic.w	r3, r3, #7
 8006f46:	3308      	adds	r3, #8
 8006f48:	9303      	str	r3, [sp, #12]
 8006f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f4c:	4433      	add	r3, r6
 8006f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f50:	e767      	b.n	8006e22 <_svfiprintf_r+0x4e>
 8006f52:	460c      	mov	r4, r1
 8006f54:	2001      	movs	r0, #1
 8006f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f5a:	e7a5      	b.n	8006ea8 <_svfiprintf_r+0xd4>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f04f 0c0a 	mov.w	ip, #10
 8006f62:	4619      	mov	r1, r3
 8006f64:	3401      	adds	r4, #1
 8006f66:	9305      	str	r3, [sp, #20]
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f6e:	3a30      	subs	r2, #48	; 0x30
 8006f70:	2a09      	cmp	r2, #9
 8006f72:	d903      	bls.n	8006f7c <_svfiprintf_r+0x1a8>
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d0c5      	beq.n	8006f04 <_svfiprintf_r+0x130>
 8006f78:	9105      	str	r1, [sp, #20]
 8006f7a:	e7c3      	b.n	8006f04 <_svfiprintf_r+0x130>
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	2301      	movs	r3, #1
 8006f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f84:	e7f0      	b.n	8006f68 <_svfiprintf_r+0x194>
 8006f86:	ab03      	add	r3, sp, #12
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	462a      	mov	r2, r5
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	4b10      	ldr	r3, [pc, #64]	; (8006fd0 <_svfiprintf_r+0x1fc>)
 8006f90:	a904      	add	r1, sp, #16
 8006f92:	f3af 8000 	nop.w
 8006f96:	1c42      	adds	r2, r0, #1
 8006f98:	4606      	mov	r6, r0
 8006f9a:	d1d6      	bne.n	8006f4a <_svfiprintf_r+0x176>
 8006f9c:	89ab      	ldrh	r3, [r5, #12]
 8006f9e:	065b      	lsls	r3, r3, #25
 8006fa0:	f53f af2c 	bmi.w	8006dfc <_svfiprintf_r+0x28>
 8006fa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fa6:	b01d      	add	sp, #116	; 0x74
 8006fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fac:	ab03      	add	r3, sp, #12
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	462a      	mov	r2, r5
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	4b06      	ldr	r3, [pc, #24]	; (8006fd0 <_svfiprintf_r+0x1fc>)
 8006fb6:	a904      	add	r1, sp, #16
 8006fb8:	f000 f87c 	bl	80070b4 <_printf_i>
 8006fbc:	e7eb      	b.n	8006f96 <_svfiprintf_r+0x1c2>
 8006fbe:	bf00      	nop
 8006fc0:	080077c8 	.word	0x080077c8
 8006fc4:	080077ce 	.word	0x080077ce
 8006fc8:	080077d2 	.word	0x080077d2
 8006fcc:	00000000 	.word	0x00000000
 8006fd0:	08006d1d 	.word	0x08006d1d

08006fd4 <_printf_common>:
 8006fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	4616      	mov	r6, r2
 8006fda:	4699      	mov	r9, r3
 8006fdc:	688a      	ldr	r2, [r1, #8]
 8006fde:	690b      	ldr	r3, [r1, #16]
 8006fe0:	4607      	mov	r7, r0
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	bfb8      	it	lt
 8006fe6:	4613      	movlt	r3, r2
 8006fe8:	6033      	str	r3, [r6, #0]
 8006fea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fee:	460c      	mov	r4, r1
 8006ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ff4:	b10a      	cbz	r2, 8006ffa <_printf_common+0x26>
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	6033      	str	r3, [r6, #0]
 8006ffa:	6823      	ldr	r3, [r4, #0]
 8006ffc:	0699      	lsls	r1, r3, #26
 8006ffe:	bf42      	ittt	mi
 8007000:	6833      	ldrmi	r3, [r6, #0]
 8007002:	3302      	addmi	r3, #2
 8007004:	6033      	strmi	r3, [r6, #0]
 8007006:	6825      	ldr	r5, [r4, #0]
 8007008:	f015 0506 	ands.w	r5, r5, #6
 800700c:	d106      	bne.n	800701c <_printf_common+0x48>
 800700e:	f104 0a19 	add.w	sl, r4, #25
 8007012:	68e3      	ldr	r3, [r4, #12]
 8007014:	6832      	ldr	r2, [r6, #0]
 8007016:	1a9b      	subs	r3, r3, r2
 8007018:	42ab      	cmp	r3, r5
 800701a:	dc28      	bgt.n	800706e <_printf_common+0x9a>
 800701c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007020:	1e13      	subs	r3, r2, #0
 8007022:	6822      	ldr	r2, [r4, #0]
 8007024:	bf18      	it	ne
 8007026:	2301      	movne	r3, #1
 8007028:	0692      	lsls	r2, r2, #26
 800702a:	d42d      	bmi.n	8007088 <_printf_common+0xb4>
 800702c:	4649      	mov	r1, r9
 800702e:	4638      	mov	r0, r7
 8007030:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007034:	47c0      	blx	r8
 8007036:	3001      	adds	r0, #1
 8007038:	d020      	beq.n	800707c <_printf_common+0xa8>
 800703a:	6823      	ldr	r3, [r4, #0]
 800703c:	68e5      	ldr	r5, [r4, #12]
 800703e:	f003 0306 	and.w	r3, r3, #6
 8007042:	2b04      	cmp	r3, #4
 8007044:	bf18      	it	ne
 8007046:	2500      	movne	r5, #0
 8007048:	6832      	ldr	r2, [r6, #0]
 800704a:	f04f 0600 	mov.w	r6, #0
 800704e:	68a3      	ldr	r3, [r4, #8]
 8007050:	bf08      	it	eq
 8007052:	1aad      	subeq	r5, r5, r2
 8007054:	6922      	ldr	r2, [r4, #16]
 8007056:	bf08      	it	eq
 8007058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800705c:	4293      	cmp	r3, r2
 800705e:	bfc4      	itt	gt
 8007060:	1a9b      	subgt	r3, r3, r2
 8007062:	18ed      	addgt	r5, r5, r3
 8007064:	341a      	adds	r4, #26
 8007066:	42b5      	cmp	r5, r6
 8007068:	d11a      	bne.n	80070a0 <_printf_common+0xcc>
 800706a:	2000      	movs	r0, #0
 800706c:	e008      	b.n	8007080 <_printf_common+0xac>
 800706e:	2301      	movs	r3, #1
 8007070:	4652      	mov	r2, sl
 8007072:	4649      	mov	r1, r9
 8007074:	4638      	mov	r0, r7
 8007076:	47c0      	blx	r8
 8007078:	3001      	adds	r0, #1
 800707a:	d103      	bne.n	8007084 <_printf_common+0xb0>
 800707c:	f04f 30ff 	mov.w	r0, #4294967295
 8007080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007084:	3501      	adds	r5, #1
 8007086:	e7c4      	b.n	8007012 <_printf_common+0x3e>
 8007088:	2030      	movs	r0, #48	; 0x30
 800708a:	18e1      	adds	r1, r4, r3
 800708c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007096:	4422      	add	r2, r4
 8007098:	3302      	adds	r3, #2
 800709a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800709e:	e7c5      	b.n	800702c <_printf_common+0x58>
 80070a0:	2301      	movs	r3, #1
 80070a2:	4622      	mov	r2, r4
 80070a4:	4649      	mov	r1, r9
 80070a6:	4638      	mov	r0, r7
 80070a8:	47c0      	blx	r8
 80070aa:	3001      	adds	r0, #1
 80070ac:	d0e6      	beq.n	800707c <_printf_common+0xa8>
 80070ae:	3601      	adds	r6, #1
 80070b0:	e7d9      	b.n	8007066 <_printf_common+0x92>
	...

080070b4 <_printf_i>:
 80070b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070b8:	7e0f      	ldrb	r7, [r1, #24]
 80070ba:	4691      	mov	r9, r2
 80070bc:	2f78      	cmp	r7, #120	; 0x78
 80070be:	4680      	mov	r8, r0
 80070c0:	460c      	mov	r4, r1
 80070c2:	469a      	mov	sl, r3
 80070c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80070c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80070ca:	d807      	bhi.n	80070dc <_printf_i+0x28>
 80070cc:	2f62      	cmp	r7, #98	; 0x62
 80070ce:	d80a      	bhi.n	80070e6 <_printf_i+0x32>
 80070d0:	2f00      	cmp	r7, #0
 80070d2:	f000 80d9 	beq.w	8007288 <_printf_i+0x1d4>
 80070d6:	2f58      	cmp	r7, #88	; 0x58
 80070d8:	f000 80a4 	beq.w	8007224 <_printf_i+0x170>
 80070dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070e4:	e03a      	b.n	800715c <_printf_i+0xa8>
 80070e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070ea:	2b15      	cmp	r3, #21
 80070ec:	d8f6      	bhi.n	80070dc <_printf_i+0x28>
 80070ee:	a101      	add	r1, pc, #4	; (adr r1, 80070f4 <_printf_i+0x40>)
 80070f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070f4:	0800714d 	.word	0x0800714d
 80070f8:	08007161 	.word	0x08007161
 80070fc:	080070dd 	.word	0x080070dd
 8007100:	080070dd 	.word	0x080070dd
 8007104:	080070dd 	.word	0x080070dd
 8007108:	080070dd 	.word	0x080070dd
 800710c:	08007161 	.word	0x08007161
 8007110:	080070dd 	.word	0x080070dd
 8007114:	080070dd 	.word	0x080070dd
 8007118:	080070dd 	.word	0x080070dd
 800711c:	080070dd 	.word	0x080070dd
 8007120:	0800726f 	.word	0x0800726f
 8007124:	08007191 	.word	0x08007191
 8007128:	08007251 	.word	0x08007251
 800712c:	080070dd 	.word	0x080070dd
 8007130:	080070dd 	.word	0x080070dd
 8007134:	08007291 	.word	0x08007291
 8007138:	080070dd 	.word	0x080070dd
 800713c:	08007191 	.word	0x08007191
 8007140:	080070dd 	.word	0x080070dd
 8007144:	080070dd 	.word	0x080070dd
 8007148:	08007259 	.word	0x08007259
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	1d1a      	adds	r2, r3, #4
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	602a      	str	r2, [r5, #0]
 8007154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007158:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800715c:	2301      	movs	r3, #1
 800715e:	e0a4      	b.n	80072aa <_printf_i+0x1f6>
 8007160:	6820      	ldr	r0, [r4, #0]
 8007162:	6829      	ldr	r1, [r5, #0]
 8007164:	0606      	lsls	r6, r0, #24
 8007166:	f101 0304 	add.w	r3, r1, #4
 800716a:	d50a      	bpl.n	8007182 <_printf_i+0xce>
 800716c:	680e      	ldr	r6, [r1, #0]
 800716e:	602b      	str	r3, [r5, #0]
 8007170:	2e00      	cmp	r6, #0
 8007172:	da03      	bge.n	800717c <_printf_i+0xc8>
 8007174:	232d      	movs	r3, #45	; 0x2d
 8007176:	4276      	negs	r6, r6
 8007178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800717c:	230a      	movs	r3, #10
 800717e:	485e      	ldr	r0, [pc, #376]	; (80072f8 <_printf_i+0x244>)
 8007180:	e019      	b.n	80071b6 <_printf_i+0x102>
 8007182:	680e      	ldr	r6, [r1, #0]
 8007184:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007188:	602b      	str	r3, [r5, #0]
 800718a:	bf18      	it	ne
 800718c:	b236      	sxthne	r6, r6
 800718e:	e7ef      	b.n	8007170 <_printf_i+0xbc>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	6820      	ldr	r0, [r4, #0]
 8007194:	1d19      	adds	r1, r3, #4
 8007196:	6029      	str	r1, [r5, #0]
 8007198:	0601      	lsls	r1, r0, #24
 800719a:	d501      	bpl.n	80071a0 <_printf_i+0xec>
 800719c:	681e      	ldr	r6, [r3, #0]
 800719e:	e002      	b.n	80071a6 <_printf_i+0xf2>
 80071a0:	0646      	lsls	r6, r0, #25
 80071a2:	d5fb      	bpl.n	800719c <_printf_i+0xe8>
 80071a4:	881e      	ldrh	r6, [r3, #0]
 80071a6:	2f6f      	cmp	r7, #111	; 0x6f
 80071a8:	bf0c      	ite	eq
 80071aa:	2308      	moveq	r3, #8
 80071ac:	230a      	movne	r3, #10
 80071ae:	4852      	ldr	r0, [pc, #328]	; (80072f8 <_printf_i+0x244>)
 80071b0:	2100      	movs	r1, #0
 80071b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071b6:	6865      	ldr	r5, [r4, #4]
 80071b8:	2d00      	cmp	r5, #0
 80071ba:	bfa8      	it	ge
 80071bc:	6821      	ldrge	r1, [r4, #0]
 80071be:	60a5      	str	r5, [r4, #8]
 80071c0:	bfa4      	itt	ge
 80071c2:	f021 0104 	bicge.w	r1, r1, #4
 80071c6:	6021      	strge	r1, [r4, #0]
 80071c8:	b90e      	cbnz	r6, 80071ce <_printf_i+0x11a>
 80071ca:	2d00      	cmp	r5, #0
 80071cc:	d04d      	beq.n	800726a <_printf_i+0x1b6>
 80071ce:	4615      	mov	r5, r2
 80071d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80071d4:	fb03 6711 	mls	r7, r3, r1, r6
 80071d8:	5dc7      	ldrb	r7, [r0, r7]
 80071da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80071de:	4637      	mov	r7, r6
 80071e0:	42bb      	cmp	r3, r7
 80071e2:	460e      	mov	r6, r1
 80071e4:	d9f4      	bls.n	80071d0 <_printf_i+0x11c>
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	d10b      	bne.n	8007202 <_printf_i+0x14e>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	07de      	lsls	r6, r3, #31
 80071ee:	d508      	bpl.n	8007202 <_printf_i+0x14e>
 80071f0:	6923      	ldr	r3, [r4, #16]
 80071f2:	6861      	ldr	r1, [r4, #4]
 80071f4:	4299      	cmp	r1, r3
 80071f6:	bfde      	ittt	le
 80071f8:	2330      	movle	r3, #48	; 0x30
 80071fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007202:	1b52      	subs	r2, r2, r5
 8007204:	6122      	str	r2, [r4, #16]
 8007206:	464b      	mov	r3, r9
 8007208:	4621      	mov	r1, r4
 800720a:	4640      	mov	r0, r8
 800720c:	f8cd a000 	str.w	sl, [sp]
 8007210:	aa03      	add	r2, sp, #12
 8007212:	f7ff fedf 	bl	8006fd4 <_printf_common>
 8007216:	3001      	adds	r0, #1
 8007218:	d14c      	bne.n	80072b4 <_printf_i+0x200>
 800721a:	f04f 30ff 	mov.w	r0, #4294967295
 800721e:	b004      	add	sp, #16
 8007220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007224:	4834      	ldr	r0, [pc, #208]	; (80072f8 <_printf_i+0x244>)
 8007226:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800722a:	6829      	ldr	r1, [r5, #0]
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007232:	6029      	str	r1, [r5, #0]
 8007234:	061d      	lsls	r5, r3, #24
 8007236:	d514      	bpl.n	8007262 <_printf_i+0x1ae>
 8007238:	07df      	lsls	r7, r3, #31
 800723a:	bf44      	itt	mi
 800723c:	f043 0320 	orrmi.w	r3, r3, #32
 8007240:	6023      	strmi	r3, [r4, #0]
 8007242:	b91e      	cbnz	r6, 800724c <_printf_i+0x198>
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	f023 0320 	bic.w	r3, r3, #32
 800724a:	6023      	str	r3, [r4, #0]
 800724c:	2310      	movs	r3, #16
 800724e:	e7af      	b.n	80071b0 <_printf_i+0xfc>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	f043 0320 	orr.w	r3, r3, #32
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	2378      	movs	r3, #120	; 0x78
 800725a:	4828      	ldr	r0, [pc, #160]	; (80072fc <_printf_i+0x248>)
 800725c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007260:	e7e3      	b.n	800722a <_printf_i+0x176>
 8007262:	0659      	lsls	r1, r3, #25
 8007264:	bf48      	it	mi
 8007266:	b2b6      	uxthmi	r6, r6
 8007268:	e7e6      	b.n	8007238 <_printf_i+0x184>
 800726a:	4615      	mov	r5, r2
 800726c:	e7bb      	b.n	80071e6 <_printf_i+0x132>
 800726e:	682b      	ldr	r3, [r5, #0]
 8007270:	6826      	ldr	r6, [r4, #0]
 8007272:	1d18      	adds	r0, r3, #4
 8007274:	6961      	ldr	r1, [r4, #20]
 8007276:	6028      	str	r0, [r5, #0]
 8007278:	0635      	lsls	r5, r6, #24
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	d501      	bpl.n	8007282 <_printf_i+0x1ce>
 800727e:	6019      	str	r1, [r3, #0]
 8007280:	e002      	b.n	8007288 <_printf_i+0x1d4>
 8007282:	0670      	lsls	r0, r6, #25
 8007284:	d5fb      	bpl.n	800727e <_printf_i+0x1ca>
 8007286:	8019      	strh	r1, [r3, #0]
 8007288:	2300      	movs	r3, #0
 800728a:	4615      	mov	r5, r2
 800728c:	6123      	str	r3, [r4, #16]
 800728e:	e7ba      	b.n	8007206 <_printf_i+0x152>
 8007290:	682b      	ldr	r3, [r5, #0]
 8007292:	2100      	movs	r1, #0
 8007294:	1d1a      	adds	r2, r3, #4
 8007296:	602a      	str	r2, [r5, #0]
 8007298:	681d      	ldr	r5, [r3, #0]
 800729a:	6862      	ldr	r2, [r4, #4]
 800729c:	4628      	mov	r0, r5
 800729e:	f7ff fc01 	bl	8006aa4 <memchr>
 80072a2:	b108      	cbz	r0, 80072a8 <_printf_i+0x1f4>
 80072a4:	1b40      	subs	r0, r0, r5
 80072a6:	6060      	str	r0, [r4, #4]
 80072a8:	6863      	ldr	r3, [r4, #4]
 80072aa:	6123      	str	r3, [r4, #16]
 80072ac:	2300      	movs	r3, #0
 80072ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072b2:	e7a8      	b.n	8007206 <_printf_i+0x152>
 80072b4:	462a      	mov	r2, r5
 80072b6:	4649      	mov	r1, r9
 80072b8:	4640      	mov	r0, r8
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	47d0      	blx	sl
 80072be:	3001      	adds	r0, #1
 80072c0:	d0ab      	beq.n	800721a <_printf_i+0x166>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	079b      	lsls	r3, r3, #30
 80072c6:	d413      	bmi.n	80072f0 <_printf_i+0x23c>
 80072c8:	68e0      	ldr	r0, [r4, #12]
 80072ca:	9b03      	ldr	r3, [sp, #12]
 80072cc:	4298      	cmp	r0, r3
 80072ce:	bfb8      	it	lt
 80072d0:	4618      	movlt	r0, r3
 80072d2:	e7a4      	b.n	800721e <_printf_i+0x16a>
 80072d4:	2301      	movs	r3, #1
 80072d6:	4632      	mov	r2, r6
 80072d8:	4649      	mov	r1, r9
 80072da:	4640      	mov	r0, r8
 80072dc:	47d0      	blx	sl
 80072de:	3001      	adds	r0, #1
 80072e0:	d09b      	beq.n	800721a <_printf_i+0x166>
 80072e2:	3501      	adds	r5, #1
 80072e4:	68e3      	ldr	r3, [r4, #12]
 80072e6:	9903      	ldr	r1, [sp, #12]
 80072e8:	1a5b      	subs	r3, r3, r1
 80072ea:	42ab      	cmp	r3, r5
 80072ec:	dcf2      	bgt.n	80072d4 <_printf_i+0x220>
 80072ee:	e7eb      	b.n	80072c8 <_printf_i+0x214>
 80072f0:	2500      	movs	r5, #0
 80072f2:	f104 0619 	add.w	r6, r4, #25
 80072f6:	e7f5      	b.n	80072e4 <_printf_i+0x230>
 80072f8:	080077d9 	.word	0x080077d9
 80072fc:	080077ea 	.word	0x080077ea

08007300 <memmove>:
 8007300:	4288      	cmp	r0, r1
 8007302:	b510      	push	{r4, lr}
 8007304:	eb01 0402 	add.w	r4, r1, r2
 8007308:	d902      	bls.n	8007310 <memmove+0x10>
 800730a:	4284      	cmp	r4, r0
 800730c:	4623      	mov	r3, r4
 800730e:	d807      	bhi.n	8007320 <memmove+0x20>
 8007310:	1e43      	subs	r3, r0, #1
 8007312:	42a1      	cmp	r1, r4
 8007314:	d008      	beq.n	8007328 <memmove+0x28>
 8007316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800731a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800731e:	e7f8      	b.n	8007312 <memmove+0x12>
 8007320:	4601      	mov	r1, r0
 8007322:	4402      	add	r2, r0
 8007324:	428a      	cmp	r2, r1
 8007326:	d100      	bne.n	800732a <memmove+0x2a>
 8007328:	bd10      	pop	{r4, pc}
 800732a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800732e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007332:	e7f7      	b.n	8007324 <memmove+0x24>

08007334 <_realloc_r>:
 8007334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007338:	4680      	mov	r8, r0
 800733a:	4614      	mov	r4, r2
 800733c:	460e      	mov	r6, r1
 800733e:	b921      	cbnz	r1, 800734a <_realloc_r+0x16>
 8007340:	4611      	mov	r1, r2
 8007342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007346:	f7ff bc39 	b.w	8006bbc <_malloc_r>
 800734a:	b92a      	cbnz	r2, 8007358 <_realloc_r+0x24>
 800734c:	f7ff fbce 	bl	8006aec <_free_r>
 8007350:	4625      	mov	r5, r4
 8007352:	4628      	mov	r0, r5
 8007354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007358:	f000 f81b 	bl	8007392 <_malloc_usable_size_r>
 800735c:	4284      	cmp	r4, r0
 800735e:	4607      	mov	r7, r0
 8007360:	d802      	bhi.n	8007368 <_realloc_r+0x34>
 8007362:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007366:	d812      	bhi.n	800738e <_realloc_r+0x5a>
 8007368:	4621      	mov	r1, r4
 800736a:	4640      	mov	r0, r8
 800736c:	f7ff fc26 	bl	8006bbc <_malloc_r>
 8007370:	4605      	mov	r5, r0
 8007372:	2800      	cmp	r0, #0
 8007374:	d0ed      	beq.n	8007352 <_realloc_r+0x1e>
 8007376:	42bc      	cmp	r4, r7
 8007378:	4622      	mov	r2, r4
 800737a:	4631      	mov	r1, r6
 800737c:	bf28      	it	cs
 800737e:	463a      	movcs	r2, r7
 8007380:	f7ff fb9e 	bl	8006ac0 <memcpy>
 8007384:	4631      	mov	r1, r6
 8007386:	4640      	mov	r0, r8
 8007388:	f7ff fbb0 	bl	8006aec <_free_r>
 800738c:	e7e1      	b.n	8007352 <_realloc_r+0x1e>
 800738e:	4635      	mov	r5, r6
 8007390:	e7df      	b.n	8007352 <_realloc_r+0x1e>

08007392 <_malloc_usable_size_r>:
 8007392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007396:	1f18      	subs	r0, r3, #4
 8007398:	2b00      	cmp	r3, #0
 800739a:	bfbc      	itt	lt
 800739c:	580b      	ldrlt	r3, [r1, r0]
 800739e:	18c0      	addlt	r0, r0, r3
 80073a0:	4770      	bx	lr
	...

080073a4 <_init>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	bf00      	nop
 80073a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073aa:	bc08      	pop	{r3}
 80073ac:	469e      	mov	lr, r3
 80073ae:	4770      	bx	lr

080073b0 <_fini>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr
